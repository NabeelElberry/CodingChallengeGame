[
  {
    "id": "6",
    "title": "Zigzag Conversion",
    "titleSlug": "zigzag-conversion",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Zigzag Conversion",
    "example_output": "# Expected output for Zigzag Conversion",
    "status": "TO_DO",
    "description": "Given a string `s` and an integer `numRows`, arrange the characters of the string in a zigzag pattern on a given number of rows and then read the pattern row by row. Return the final string.\n\nExample: Input: s = \"PAYPALISHIRING\", numRows = 3\nZigzag Pattern:\nP   A   H   N\nA P L S I I G\nY   I   R\nOutput: \"PAHNAPLSIIGYIR\""
  },
  {
    "id": "7",
    "title": "Reverse Integer",
    "titleSlug": "reverse-integer",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Integer",
    "example_output": "# Expected output for Reverse Integer",
    "status": "TO_DO",
    "description": "Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the 32-bit signed integer range [-2^31, 2^31 - 1], return 0."
  },
  {
    "id": "8",
    "title": "String to Integer (atoi)",
    "titleSlug": "string-to-integer-atoi",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for String to Integer (atoi)",
    "example_output": "# Expected output for String to Integer (atoi)",
    "status": "TO_DO",
    "description": "Convert a string `s` to a 32-bit signed integer (similar to C/C++'s `atoi` function). The function should:\n- Ignore leading whitespace\n- Handle an optional '+' or '-' sign\n- Read digits until a non-digit character or the end\n- Return 0 if conversion is invalid\n- Clamp the result if it overflows 32-bit range"
  },
  {
    "id": "9",
    "title": "Palindrome Number",
    "titleSlug": "palindrome-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Number",
    "example_output": "# Expected output for Palindrome Number",
    "status": "TO_DO",
    "description": "Determine whether an integer `x` is a palindrome. An integer is a palindrome when it reads the same backward as forward."
  },
  {
    "id": "10",
    "title": "Regular Expression Matching",
    "titleSlug": "regular-expression-matching",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Regular Expression Matching",
    "example_output": "# Expected output for Regular Expression Matching",
    "status": "TO_DO",
    "description": "Implement regular expression matching with support for '.' and '*'. Given a string `s` and a pattern `p`, return true if `s` matches the entire pattern.\n- '.' Matches any single character.\n- '*' Matches zero or more of the preceding element."
  },
  {
    "id": "11",
    "title": "Container With Most Water",
    "titleSlug": "container-with-most-water",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Container With Most Water",
    "example_output": "# Expected output for Container With Most Water",
    "status": "TO_DO",
    "description": "You are given an array `height` of length `n`. Each value represents the height of a vertical line at that position. Choose two lines that, together with the x-axis, form a container that can hold the most water. Return the maximum amount of water a container can store."
  },
  {
    "id": "12",
    "title": "Integer to Roman",
    "titleSlug": "integer-to-roman",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Integer to Roman",
    "example_output": "# Expected output for Integer to Roman",
    "status": "TO_DO",
    "description": "Given an integer `num`, convert it to a Roman numeral. You may assume the input is in the range 1 to 3999."
  },
  {
    "id": "13",
    "title": "Roman to Integer",
    "titleSlug": "roman-to-integer",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Roman to Integer",
    "example_output": "# Expected output for Roman to Integer",
    "status": "TO_DO",
    "description": "Given a Roman numeral, convert it to an integer. You may assume the input is a valid Roman numeral in the range 1 to 3999."
  },
  {
    "id": "14",
    "title": "Longest Common Prefix",
    "titleSlug": "longest-common-prefix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Common Prefix",
    "example_output": "# Expected output for Longest Common Prefix",
    "status": "TO_DO",
    "description": "Write a function to find the longest common prefix string among an array of strings. If there is no common prefix, return an empty string."
  },
  {
    "id": "15",
    "title": "3Sum",
    "titleSlug": "3sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 3Sum",
    "example_output": "# Expected output for 3Sum",
    "status": "TO_DO",
    "description": "Given an integer array `nums`, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. The solution set must not contain duplicate triplets."
  },
  {
    "id": "16",
    "title": "3Sum Closest",
    "titleSlug": "3sum-closest",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 3Sum Closest",
    "example_output": "# Expected output for 3Sum Closest",
    "status": "TO_DO",
    "description": "Given an array `nums` of `n` integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. Assume that each input would have exactly one solution."
  },
  {
    "id": "17",
    "title": "Letter Combinations of a Phone Number",
    "titleSlug": "letter-combinations-of-a-phone-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Letter Combinations of a Phone Number",
    "example_output": "# Expected output for Letter Combinations of a Phone Number",
    "status": "TO_DO",
    "description": "Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent. Map digits to letters as on a traditional telephone keypad. Return the answer in any order."
  },
  {
    "id": "18",
    "title": "4Sum",
    "titleSlug": "4sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 4Sum",
    "example_output": "# Expected output for 4Sum",
    "status": "TO_DO",
    "description": "Given an array `nums` of `n` integers and an integer `target`, return all unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that `a`, `b`, `c`, and `d` are distinct and `nums[a] + nums[b] + nums[c] + nums[d] == target`."
  },
  {
    "id": "19",
    "title": "Remove Nth Node From End of List",
    "titleSlug": "remove-nth-node-from-end-of-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Nth Node From End of List",
    "example_output": "# Expected output for Remove Nth Node From End of List",
    "status": "TO_DO",
    "description": "Given the head of a linked list, remove the `n`th node from the end of the list and return its head. Assume the list contains at least one node."
  },
  {
    "id": "20",
    "title": "Valid Parentheses",
    "titleSlug": "valid-parentheses",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Parentheses",
    "example_output": "# Expected output for Valid Parentheses",
    "status": "TO_DO",
    "description": "Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n1. Open brackets are closed by the same type of brackets.\n2. Open brackets are closed in the correct order."
  },
  {
    "id": "21",
    "title": "Merge Two Sorted Lists",
    "titleSlug": "merge-two-sorted-lists",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Two Sorted Lists",
    "example_output": "# Expected output for Merge Two Sorted Lists",
    "status": "TO_DO",
    "description": "You are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists into one sorted linked list and return the head of the merged list."
  },
  {
    "id": "22",
    "title": "Generate Parentheses",
    "titleSlug": "generate-parentheses",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Generate Parentheses",
    "example_output": "# Expected output for Generate Parentheses",
    "status": "TO_DO",
    "description": "Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses."
  },
  {
    "id": "23",
    "title": "Merge k Sorted Lists",
    "titleSlug": "merge-k-sorted-lists",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Merge Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge k Sorted Lists",
    "example_output": "# Expected output for Merge k Sorted Lists",
    "status": "TO_DO",
    "description": "You are given an array of `k` linked-lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it."
  },
  {
    "id": "24",
    "title": "Swap Nodes in Pairs",
    "titleSlug": "swap-nodes-in-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Swap Nodes in Pairs",
    "example_output": "# Expected output for Swap Nodes in Pairs",
    "status": "TO_DO",
    "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list nodes — only node pointers may be changed."
  },
  {
    "id": "25",
    "title": "Reverse Nodes in k-Group",
    "titleSlug": "reverse-nodes-in-k-group",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Nodes in k-Group",
    "example_output": "# Expected output for Reverse Nodes in k-Group",
    "status": "TO_DO",
    "description": "Given the head of a linked list, reverse the nodes of the list `k` at a time, and return the modified list. If the number of nodes is not a multiple of `k`, leave the last nodes as-is."
  },
  {
    "id": "26",
    "title": "Remove Duplicates from Sorted Array",
    "titleSlug": "remove-duplicates-from-sorted-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Duplicates from Sorted Array",
    "example_output": "# Expected output for Remove Duplicates from Sorted Array",
    "status": "TO_DO",
    "description": "Given an integer array `nums` sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Return the number of unique elements. Modify `nums` in-place with the first `k` elements being the result."
  },
  {
    "id": "27",
    "title": "Remove Element",
    "titleSlug": "remove-element",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Element",
    "example_output": "# Expected output for Remove Element",
    "status": "TO_DO",
    "description": "Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in-place. Return the number of remaining elements. Modify the input array in-place with the first `k` elements as the result."
  },
  {
    "id": "28",
    "title": "Find the Index of the First Occurrence in a String",
    "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Index of the First Occurrence in a String",
    "example_output": "# Expected output for Find the Index of the First Occurrence in a String",
    "status": "TO_DO",
    "description": "Given two strings `haystack` and `needle`, return the index of the first occurrence of `needle` in `haystack`, or -1 if `needle` is not part of `haystack`."
  },
  {
    "id": "29",
    "title": "Divide Two Integers",
    "titleSlug": "divide-two-integers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Two Integers",
    "example_output": "# Expected output for Divide Two Integers",
    "status": "TO_DO",
    "description": "Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator. Return the quotient after dividing `dividend` by `divisor`. The result must be truncated toward zero and within the 32-bit signed integer range."
  },
  {
    "id": "30",
    "title": "Substring with Concatenation of All Words",
    "titleSlug": "substring-with-concatenation-of-all-words",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Substring with Concatenation of All Words",
    "example_output": "# Expected output for Substring with Concatenation of All Words",
    "status": "TO_DO",
    "description": "You are given a string `s` and an array of strings `words` of the same length. Return all starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once and without any intervening characters."
  },
  {
    "id": "31",
    "title": "Next Permutation",
    "titleSlug": "next-permutation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Permutation",
    "example_output": "# Expected output for Next Permutation",
    "status": "TO_DO",
    "description": "Given an array of integers `nums`, rearrange the numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, rearrange it as the lowest possible order (i.e., sorted in ascending order). The replacement must be in-place and use only constant extra memory."
  },
  {
    "id": "32",
    "title": "Longest Valid Parentheses",
    "titleSlug": "longest-valid-parentheses",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Valid Parentheses",
    "example_output": "# Expected output for Longest Valid Parentheses",
    "status": "TO_DO",
    "description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring."
  },
  {
    "id": "33",
    "title": "Search in Rotated Sorted Array",
    "titleSlug": "search-in-rotated-sorted-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Search in Rotated Sorted Array",
    "example_output": "# Expected output for Search in Rotated Sorted Array",
    "status": "TO_DO",
    "description": "You are given an integer array `nums` sorted in ascending order (possibly rotated) and an integer `target`. Search `nums` to find if `target` exists and return its index. If it does not exist, return -1. The array does not contain duplicates and has O(log n) time complexity."
  },
  {
    "id": "34",
    "title": "Find First and Last Position of Element in Sorted Array",
    "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find First and Last Position of Element in Sorted Array",
    "example_output": "# Expected output for Find First and Last Position of Element in Sorted Array",
    "status": "TO_DO",
    "description": "Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1]."
  },
  {
    "id": "35",
    "title": "Search Insert Position",
    "titleSlug": "search-insert-position",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Search Insert Position",
    "example_output": "# Expected output for Search Insert Position",
    "status": "TO_DO",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."
  },
  {
    "id": "36",
    "title": "Valid Sudoku",
    "titleSlug": "valid-sudoku",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Sudoku",
    "example_output": "# Expected output for Valid Sudoku",
    "status": "TO_DO",
    "description": "Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n1. Each row must contain the digits 1-9 without repetition.\n2. Each column must contain the digits 1-9 without repetition.\n3. Each of the nine 3x3 sub-boxes must contain the digits 1-9 without repetition."
  },
  {
    "id": "37",
    "title": "Sudoku Solver",
    "titleSlug": "sudoku-solver",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sudoku Solver",
    "example_output": "# Expected output for Sudoku Solver",
    "status": "TO_DO",
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy the following rules:\n- Each of the digits 1-9 must occur exactly once in each row.\n- Each of the digits 1-9 must occur exactly once in each column.\n- Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes."
  },
  {
    "id": "38",
    "title": "Count and Say",
    "titleSlug": "count-and-say",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count and Say",
    "example_output": "# Expected output for Count and Say",
    "status": "TO_DO",
    "description": "The count-and-say sequence is a sequence of digit strings defined as follows:\n1 is read off as \"one 1\" or 11.\n11 is read off as \"two 1s\" or 21.\n21 is read off as \"one 2, then one 1\" or 1211.\nGiven an integer `n`, return the `n`th term of the count-and-say sequence."
  },
  {
    "id": "39",
    "title": "Combination Sum",
    "titleSlug": "combination-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Combination Sum",
    "example_output": "# Expected output for Combination Sum",
    "status": "TO_DO",
    "description": "Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may use the same number in `candidates` an unlimited number of times. The solution set must not contain duplicate combinations."
  },
  {
    "id": "40",
    "title": "Combination Sum II",
    "titleSlug": "combination-sum-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Combination Sum II",
    "example_output": "# Expected output for Combination Sum II",
    "status": "TO_DO",
    "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in `candidates` where the candidate numbers sum to `target`. Each number in `candidates` may only be used once in the combination. The solution set must not contain duplicate combinations."
  },
  {
    "id": "41",
    "title": "First Missing Positive",
    "titleSlug": "first-missing-positive",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for First Missing Positive",
    "example_output": "# Expected output for First Missing Positive",
    "status": "TO_DO",
    "description": "Given an unsorted integer array `nums`, return the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses constant extra space."
  },
  {
    "id": "42",
    "title": "Trapping Rain Water",
    "titleSlug": "trapping-rain-water",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Trapping Rain Water",
    "example_output": "# Expected output for Trapping Rain Water",
    "status": "TO_DO",
    "description": "Given `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining."
  },
  {
    "id": "43",
    "title": "Multiply Strings",
    "titleSlug": "multiply-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Multiply Strings",
    "example_output": "# Expected output for Multiply Strings",
    "status": "TO_DO",
    "description": "Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string. You must not use built-in big integer libraries or convert the inputs directly to integers."
  },
  {
    "id": "44",
    "title": "Wildcard Matching",
    "titleSlug": "wildcard-matching",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Wildcard Matching",
    "example_output": "# Expected output for Wildcard Matching",
    "status": "TO_DO",
    "description": "Given an input string `s` and a pattern `p`, implement wildcard pattern matching with support for `?` and `*`:\n`?` matches any single character.\n`*` matches any sequence of characters (including the empty sequence).\nReturn true if the entire input string matches the pattern."
  },
  {
    "id": "45",
    "title": "Jump Game II",
    "titleSlug": "jump-game-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jump Game II",
    "example_output": "# Expected output for Jump Game II",
    "status": "TO_DO",
    "description": "Given an array of non-negative integers `nums`, where each element represents your maximum jump length at that position, return the minimum number of jumps needed to reach the last index. You can assume that you can always reach the last index."
  },
  {
    "id": "46",
    "title": "Permutations",
    "titleSlug": "permutations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Permutations",
    "example_output": "# Expected output for Permutations",
    "status": "TO_DO",
    "description": "Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order."
  },
  {
    "id": "47",
    "title": "Permutations II",
    "titleSlug": "permutations-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Permutations II",
    "example_output": "# Expected output for Permutations II",
    "status": "TO_DO",
    "description": "Given a collection of numbers `nums` that might contain duplicates, return all possible unique permutations in any order."
  },
  {
    "id": "48",
    "title": "Rotate Image",
    "titleSlug": "rotate-image",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rotate Image",
    "example_output": "# Expected output for Rotate Image",
    "status": "TO_DO",
    "description": "You are given an `n x n` 2D matrix representing an image. Rotate the image 90 degrees clockwise in-place."
  },
  {
    "id": "49",
    "title": "Group Anagrams",
    "titleSlug": "group-anagrams",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Group Anagrams",
    "example_output": "# Expected output for Group Anagrams",
    "status": "TO_DO",
    "description": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order. An anagram is a word formed by rearranging the letters of another word."
  },
  {
    "id": "50",
    "title": "Pow(x, n)",
    "titleSlug": "powx-n",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pow(x, n)",
    "example_output": "# Expected output for Pow(x, n)",
    "status": "TO_DO",
    "description": "Implement `pow(x, n)`, which calculates `x` raised to the power `n` (i.e., `x^n`)."
  },
  {
    "id": "51",
    "title": "N-Queens",
    "titleSlug": "n-queens",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for N-Queens",
    "example_output": "# Expected output for N-Queens",
    "status": "TO_DO",
    "description": "The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Return all distinct solutions to the n-queens puzzle. Each solution contains a distinct board configuration of the placement of the n queens."
  },
  {
    "id": "52",
    "title": "N-Queens II",
    "titleSlug": "n-queens-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for N-Queens II",
    "example_output": "# Expected output for N-Queens II",
    "status": "TO_DO",
    "description": "The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return the number of distinct solutions to the n-queens puzzle."
  },
  {
    "id": "53",
    "title": "Maximum Subarray",
    "titleSlug": "maximum-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Subarray",
    "example_output": "# Expected output for Maximum Subarray",
    "status": "TO_DO",
    "description": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."
  },
  {
    "id": "54",
    "title": "Spiral Matrix",
    "titleSlug": "spiral-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Spiral Matrix",
    "example_output": "# Expected output for Spiral Matrix",
    "status": "TO_DO",
    "description": "Given an `m x n` matrix, return all elements of the matrix in spiral order starting from the top-left corner."
  },
  {
    "id": "55",
    "title": "Jump Game",
    "titleSlug": "jump-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jump Game",
    "example_output": "# Expected output for Jump Game",
    "status": "TO_DO",
    "description": "Given an array of non-negative integers `nums`, where each element represents your maximum jump length at that position, determine if you are able to reach the last index starting from the first index."
  },
  {
    "id": "56",
    "title": "Merge Intervals",
    "titleSlug": "merge-intervals",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Intervals",
    "example_output": "# Expected output for Merge Intervals",
    "status": "TO_DO",
    "description": "Given an array of intervals where `intervals[i] = [start_i, end_i]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input."
  },
  {
    "id": "57",
    "title": "Insert Interval",
    "titleSlug": "insert-interval",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Insert Interval",
    "example_output": "# Expected output for Insert Interval",
    "status": "TO_DO",
    "description": "You are given an array of non-overlapping intervals `intervals` where intervals[i] = [start_i, end_i] represent the start and the end of the i-th interval and `intervals` is sorted in ascending order by start_i. You are also given an interval `newInterval` = [start, end] that represents a new interval. Insert `newInterval` into `intervals` such that the result is still a valid list of non-overlapping intervals in order. Merge overlapping intervals if necessary and return the result."
  },
  {
    "id": "58",
    "title": "Length of Last Word",
    "titleSlug": "length-of-last-word",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Length of Last Word",
    "example_output": "# Expected output for Length of Last Word",
    "status": "TO_DO",
    "description": "Given a string `s` consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only."
  },
  {
    "id": "59",
    "title": "Spiral Matrix II",
    "titleSlug": "spiral-matrix-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Spiral Matrix II",
    "example_output": "# Expected output for Spiral Matrix II",
    "status": "TO_DO",
    "description": "Given a positive integer `n`, generate an `n x n` matrix filled with elements from 1 to `n^2` in spiral order."
  },
  {
    "id": "60",
    "title": "Permutation Sequence",
    "titleSlug": "permutation-sequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Permutation Sequence",
    "example_output": "# Expected output for Permutation Sequence",
    "status": "TO_DO",
    "description": "The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations. Given `n` and an integer `k`, return the `k`th permutation sequence of this set as a string."
  },
  {
    "id": "61",
    "title": "Rotate List",
    "titleSlug": "rotate-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rotate List",
    "example_output": "# Expected output for Rotate List",
    "status": "TO_DO",
    "description": "Given the head of a linked list, rotate the list to the right by `k` places."
  },
  {
    "id": "62",
    "title": "Unique Paths",
    "titleSlug": "unique-paths",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Paths",
    "example_output": "# Expected output for Unique Paths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Paths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "63",
    "title": "Unique Paths II",
    "titleSlug": "unique-paths-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Paths II",
    "example_output": "# Expected output for Unique Paths II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Paths II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "64",
    "title": "Minimum Path Sum",
    "titleSlug": "minimum-path-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Path Sum",
    "example_output": "# Expected output for Minimum Path Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Path Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "65",
    "title": "Valid Number",
    "titleSlug": "valid-number",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Number",
    "example_output": "# Expected output for Valid Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "66",
    "title": "Plus One",
    "titleSlug": "plus-one",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Plus One",
    "example_output": "# Expected output for Plus One",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Plus One\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "67",
    "title": "Add Binary",
    "titleSlug": "add-binary",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Binary",
    "example_output": "# Expected output for Add Binary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Binary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "68",
    "title": "Text Justification",
    "titleSlug": "text-justification",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Text Justification",
    "example_output": "# Expected output for Text Justification",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Text Justification\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "69",
    "title": "Sqrt(x)",
    "titleSlug": "sqrtx",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sqrt(x)",
    "example_output": "# Expected output for Sqrt(x)",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sqrt(x)\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "70",
    "title": "Climbing Stairs",
    "titleSlug": "climbing-stairs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Climbing Stairs",
    "example_output": "# Expected output for Climbing Stairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Climbing Stairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "71",
    "title": "Simplify Path",
    "titleSlug": "simplify-path",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Simplify Path",
    "example_output": "# Expected output for Simplify Path",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Simplify Path\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "72",
    "title": "Edit Distance",
    "titleSlug": "edit-distance",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Edit Distance",
    "example_output": "# Expected output for Edit Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Edit Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "73",
    "title": "Set Matrix Zeroes",
    "titleSlug": "set-matrix-zeroes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Set Matrix Zeroes",
    "example_output": "# Expected output for Set Matrix Zeroes",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Set Matrix Zeroes\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "74",
    "title": "Search a 2D Matrix",
    "titleSlug": "search-a-2d-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Search a 2D Matrix",
    "example_output": "# Expected output for Search a 2D Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Search a 2D Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "75",
    "title": "Sort Colors",
    "titleSlug": "sort-colors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Colors",
    "example_output": "# Expected output for Sort Colors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Colors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "76",
    "title": "Minimum Window Substring",
    "titleSlug": "minimum-window-substring",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Window Substring",
    "example_output": "# Expected output for Minimum Window Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Window Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "77",
    "title": "Combinations",
    "titleSlug": "combinations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Combinations",
    "example_output": "# Expected output for Combinations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Combinations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "78",
    "title": "Subsets",
    "titleSlug": "subsets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subsets",
    "example_output": "# Expected output for Subsets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subsets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "79",
    "title": "Word Search",
    "titleSlug": "word-search",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Search",
    "example_output": "# Expected output for Word Search",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Search\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "80",
    "title": "Remove Duplicates from Sorted Array II",
    "titleSlug": "remove-duplicates-from-sorted-array-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Duplicates from Sorted Array II",
    "example_output": "# Expected output for Remove Duplicates from Sorted Array II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Duplicates from Sorted Array II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "81",
    "title": "Search in Rotated Sorted Array II",
    "titleSlug": "search-in-rotated-sorted-array-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Search in Rotated Sorted Array II",
    "example_output": "# Expected output for Search in Rotated Sorted Array II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Search in Rotated Sorted Array II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "82",
    "title": "Remove Duplicates from Sorted List II",
    "titleSlug": "remove-duplicates-from-sorted-list-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Duplicates from Sorted List II",
    "example_output": "# Expected output for Remove Duplicates from Sorted List II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Duplicates from Sorted List II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "83",
    "title": "Remove Duplicates from Sorted List",
    "titleSlug": "remove-duplicates-from-sorted-list",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Duplicates from Sorted List",
    "example_output": "# Expected output for Remove Duplicates from Sorted List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Duplicates from Sorted List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "84",
    "title": "Largest Rectangle in Histogram",
    "titleSlug": "largest-rectangle-in-histogram",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Rectangle in Histogram",
    "example_output": "# Expected output for Largest Rectangle in Histogram",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Rectangle in Histogram\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "85",
    "title": "Maximal Rectangle",
    "titleSlug": "maximal-rectangle",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximal Rectangle",
    "example_output": "# Expected output for Maximal Rectangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximal Rectangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "86",
    "title": "Partition List",
    "titleSlug": "partition-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition List",
    "example_output": "# Expected output for Partition List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "87",
    "title": "Scramble String",
    "titleSlug": "scramble-string",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Scramble String",
    "example_output": "# Expected output for Scramble String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Scramble String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "88",
    "title": "Merge Sorted Array",
    "titleSlug": "merge-sorted-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Sorted Array",
    "example_output": "# Expected output for Merge Sorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge Sorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "89",
    "title": "Gray Code",
    "titleSlug": "gray-code",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Gray Code",
    "example_output": "# Expected output for Gray Code",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Gray Code\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "90",
    "title": "Subsets II",
    "titleSlug": "subsets-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subsets II",
    "example_output": "# Expected output for Subsets II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subsets II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "91",
    "title": "Decode Ways",
    "titleSlug": "decode-ways",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decode Ways",
    "example_output": "# Expected output for Decode Ways",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decode Ways\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "92",
    "title": "Reverse Linked List II",
    "titleSlug": "reverse-linked-list-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Linked List II",
    "example_output": "# Expected output for Reverse Linked List II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Linked List II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "93",
    "title": "Restore IP Addresses",
    "titleSlug": "restore-ip-addresses",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Restore IP Addresses",
    "example_output": "# Expected output for Restore IP Addresses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Restore IP Addresses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "94",
    "title": "Binary Tree Inorder Traversal",
    "titleSlug": "binary-tree-inorder-traversal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Inorder Traversal",
    "example_output": "# Expected output for Binary Tree Inorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Inorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "95",
    "title": "Unique Binary Search Trees II",
    "titleSlug": "unique-binary-search-trees-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Binary Search Trees II",
    "example_output": "# Expected output for Unique Binary Search Trees II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Binary Search Trees II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "96",
    "title": "Unique Binary Search Trees",
    "titleSlug": "unique-binary-search-trees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Binary Search Trees",
    "example_output": "# Expected output for Unique Binary Search Trees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Binary Search Trees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "97",
    "title": "Interleaving String",
    "titleSlug": "interleaving-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Interleaving String",
    "example_output": "# Expected output for Interleaving String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Interleaving String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "98",
    "title": "Validate Binary Search Tree",
    "titleSlug": "validate-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Validate Binary Search Tree",
    "example_output": "# Expected output for Validate Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Validate Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "99",
    "title": "Recover Binary Search Tree",
    "titleSlug": "recover-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Recover Binary Search Tree",
    "example_output": "# Expected output for Recover Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Recover Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "100",
    "title": "Same Tree",
    "titleSlug": "same-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Same Tree",
    "example_output": "# Expected output for Same Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Same Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "101",
    "title": "Symmetric Tree",
    "titleSlug": "symmetric-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Symmetric Tree",
    "example_output": "# Expected output for Symmetric Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Symmetric Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "102",
    "title": "Binary Tree Level Order Traversal",
    "titleSlug": "binary-tree-level-order-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Level Order Traversal",
    "example_output": "# Expected output for Binary Tree Level Order Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Level Order Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "103",
    "title": "Binary Tree Zigzag Level Order Traversal",
    "titleSlug": "binary-tree-zigzag-level-order-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Zigzag Level Order Traversal",
    "example_output": "# Expected output for Binary Tree Zigzag Level Order Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Zigzag Level Order Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "104",
    "title": "Maximum Depth of Binary Tree",
    "titleSlug": "maximum-depth-of-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Depth of Binary Tree",
    "example_output": "# Expected output for Maximum Depth of Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Depth of Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "105",
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Binary Tree from Preorder and Inorder Traversal",
    "example_output": "# Expected output for Construct Binary Tree from Preorder and Inorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct Binary Tree from Preorder and Inorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "106",
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Binary Tree from Inorder and Postorder Traversal",
    "example_output": "# Expected output for Construct Binary Tree from Inorder and Postorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct Binary Tree from Inorder and Postorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "107",
    "title": "Binary Tree Level Order Traversal II",
    "titleSlug": "binary-tree-level-order-traversal-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Level Order Traversal II",
    "example_output": "# Expected output for Binary Tree Level Order Traversal II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Level Order Traversal II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "108",
    "title": "Convert Sorted Array to Binary Search Tree",
    "titleSlug": "convert-sorted-array-to-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert Sorted Array to Binary Search Tree",
    "example_output": "# Expected output for Convert Sorted Array to Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert Sorted Array to Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "109",
    "title": "Convert Sorted List to Binary Search Tree",
    "titleSlug": "convert-sorted-list-to-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert Sorted List to Binary Search Tree",
    "example_output": "# Expected output for Convert Sorted List to Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert Sorted List to Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "110",
    "title": "Balanced Binary Tree",
    "titleSlug": "balanced-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Balanced Binary Tree",
    "example_output": "# Expected output for Balanced Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Balanced Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "111",
    "title": "Minimum Depth of Binary Tree",
    "titleSlug": "minimum-depth-of-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Depth of Binary Tree",
    "example_output": "# Expected output for Minimum Depth of Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Depth of Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "112",
    "title": "Path Sum",
    "titleSlug": "path-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path Sum",
    "example_output": "# Expected output for Path Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "113",
    "title": "Path Sum II",
    "titleSlug": "path-sum-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Backtracking"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path Sum II",
    "example_output": "# Expected output for Path Sum II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path Sum II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "114",
    "title": "Flatten Binary Tree to Linked List",
    "titleSlug": "flatten-binary-tree-to-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flatten Binary Tree to Linked List",
    "example_output": "# Expected output for Flatten Binary Tree to Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flatten Binary Tree to Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "115",
    "title": "Distinct Subsequences",
    "titleSlug": "distinct-subsequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distinct Subsequences",
    "example_output": "# Expected output for Distinct Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distinct Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "116",
    "title": "Populating Next Right Pointers in Each Node",
    "titleSlug": "populating-next-right-pointers-in-each-node",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Populating Next Right Pointers in Each Node",
    "example_output": "# Expected output for Populating Next Right Pointers in Each Node",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Populating Next Right Pointers in Each Node\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "117",
    "title": "Populating Next Right Pointers in Each Node II",
    "titleSlug": "populating-next-right-pointers-in-each-node-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Populating Next Right Pointers in Each Node II",
    "example_output": "# Expected output for Populating Next Right Pointers in Each Node II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Populating Next Right Pointers in Each Node II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "118",
    "title": "Pascal's Triangle",
    "titleSlug": "pascals-triangle",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pascal's Triangle",
    "example_output": "# Expected output for Pascal's Triangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pascal's Triangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "119",
    "title": "Pascal's Triangle II",
    "titleSlug": "pascals-triangle-ii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pascal's Triangle II",
    "example_output": "# Expected output for Pascal's Triangle II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pascal's Triangle II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "120",
    "title": "Triangle",
    "titleSlug": "triangle",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Triangle",
    "example_output": "# Expected output for Triangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Triangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "121",
    "title": "Best Time to Buy and Sell Stock",
    "titleSlug": "best-time-to-buy-and-sell-stock",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Time to Buy and Sell Stock",
    "example_output": "# Expected output for Best Time to Buy and Sell Stock",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Time to Buy and Sell Stock\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "122",
    "title": "Best Time to Buy and Sell Stock II",
    "titleSlug": "best-time-to-buy-and-sell-stock-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Time to Buy and Sell Stock II",
    "example_output": "# Expected output for Best Time to Buy and Sell Stock II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Time to Buy and Sell Stock II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "123",
    "title": "Best Time to Buy and Sell Stock III",
    "titleSlug": "best-time-to-buy-and-sell-stock-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Time to Buy and Sell Stock III",
    "example_output": "# Expected output for Best Time to Buy and Sell Stock III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Time to Buy and Sell Stock III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "124",
    "title": "Binary Tree Maximum Path Sum",
    "titleSlug": "binary-tree-maximum-path-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Maximum Path Sum",
    "example_output": "# Expected output for Binary Tree Maximum Path Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Maximum Path Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "126",
    "title": "Word Ladder II",
    "titleSlug": "word-ladder-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Ladder II",
    "example_output": "# Expected output for Word Ladder II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Ladder II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "127",
    "title": "Word Ladder",
    "titleSlug": "word-ladder",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Ladder",
    "example_output": "# Expected output for Word Ladder",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Ladder\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "128",
    "title": "Longest Consecutive Sequence",
    "titleSlug": "longest-consecutive-sequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Consecutive Sequence",
    "example_output": "# Expected output for Longest Consecutive Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Consecutive Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "129",
    "title": "Sum Root to Leaf Numbers",
    "titleSlug": "sum-root-to-leaf-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum Root to Leaf Numbers",
    "example_output": "# Expected output for Sum Root to Leaf Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum Root to Leaf Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "130",
    "title": "Surrounded Regions",
    "titleSlug": "surrounded-regions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Surrounded Regions",
    "example_output": "# Expected output for Surrounded Regions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Surrounded Regions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "131",
    "title": "Palindrome Partitioning",
    "titleSlug": "palindrome-partitioning",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Partitioning",
    "example_output": "# Expected output for Palindrome Partitioning",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Partitioning\". Return the result based on the transformation rules involved."
  },
  {
    "id": "132",
    "title": "Palindrome Partitioning II",
    "titleSlug": "palindrome-partitioning-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Partitioning II",
    "example_output": "# Expected output for Palindrome Partitioning II",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Partitioning II\". Return the result based on the transformation rules involved."
  },
  {
    "id": "133",
    "title": "Clone Graph",
    "titleSlug": "clone-graph",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Clone Graph",
    "example_output": "# Expected output for Clone Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Clone Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "134",
    "title": "Gas Station",
    "titleSlug": "gas-station",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Gas Station",
    "example_output": "# Expected output for Gas Station",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Gas Station\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "135",
    "title": "Candy",
    "titleSlug": "candy",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Candy",
    "example_output": "# Expected output for Candy",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Candy\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "136",
    "title": "Single Number",
    "titleSlug": "single-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Single Number",
    "example_output": "# Expected output for Single Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Single Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "137",
    "title": "Single Number II",
    "titleSlug": "single-number-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Single Number II",
    "example_output": "# Expected output for Single Number II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Single Number II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "138",
    "title": "Copy List with Random Pointer",
    "titleSlug": "copy-list-with-random-pointer",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Copy List with Random Pointer",
    "example_output": "# Expected output for Copy List with Random Pointer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Copy List with Random Pointer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "139",
    "title": "Word Break",
    "titleSlug": "word-break",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Break",
    "example_output": "# Expected output for Word Break",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Break\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "140",
    "title": "Word Break II",
    "titleSlug": "word-break-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Break II",
    "example_output": "# Expected output for Word Break II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Break II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "141",
    "title": "Linked List Cycle",
    "titleSlug": "linked-list-cycle",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Linked List Cycle",
    "example_output": "# Expected output for Linked List Cycle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Linked List Cycle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "142",
    "title": "Linked List Cycle II",
    "titleSlug": "linked-list-cycle-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Linked List Cycle II",
    "example_output": "# Expected output for Linked List Cycle II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Linked List Cycle II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "143",
    "title": "Reorder List",
    "titleSlug": "reorder-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reorder List",
    "example_output": "# Expected output for Reorder List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reorder List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "144",
    "title": "Binary Tree Preorder Traversal",
    "titleSlug": "binary-tree-preorder-traversal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Preorder Traversal",
    "example_output": "# Expected output for Binary Tree Preorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Preorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "145",
    "title": "Binary Tree Postorder Traversal",
    "titleSlug": "binary-tree-postorder-traversal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Postorder Traversal",
    "example_output": "# Expected output for Binary Tree Postorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Postorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "146",
    "title": "LRU Cache",
    "titleSlug": "lru-cache",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Doubly-Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for LRU Cache",
    "example_output": "# Expected output for LRU Cache",
    "status": "TO_DO",
    "description": "Solve the problem titled \"LRU Cache\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "147",
    "title": "Insertion Sort List",
    "titleSlug": "insertion-sort-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Insertion Sort List",
    "example_output": "# Expected output for Insertion Sort List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Insertion Sort List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "148",
    "title": "Sort List",
    "titleSlug": "sort-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Merge Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort List",
    "example_output": "# Expected output for Sort List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "149",
    "title": "Max Points on a Line",
    "titleSlug": "max-points-on-a-line",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Points on a Line",
    "example_output": "# Expected output for Max Points on a Line",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Points on a Line\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "150",
    "title": "Evaluate Reverse Polish Notation",
    "titleSlug": "evaluate-reverse-polish-notation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Evaluate Reverse Polish Notation",
    "example_output": "# Expected output for Evaluate Reverse Polish Notation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Evaluate Reverse Polish Notation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "151",
    "title": "Reverse Words in a String",
    "titleSlug": "reverse-words-in-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Words in a String",
    "example_output": "# Expected output for Reverse Words in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Words in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "152",
    "title": "Maximum Product Subarray",
    "titleSlug": "maximum-product-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product Subarray",
    "example_output": "# Expected output for Maximum Product Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "153",
    "title": "Find Minimum in Rotated Sorted Array",
    "titleSlug": "find-minimum-in-rotated-sorted-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Minimum in Rotated Sorted Array",
    "example_output": "# Expected output for Find Minimum in Rotated Sorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Minimum in Rotated Sorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "154",
    "title": "Find Minimum in Rotated Sorted Array II",
    "titleSlug": "find-minimum-in-rotated-sorted-array-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Minimum in Rotated Sorted Array II",
    "example_output": "# Expected output for Find Minimum in Rotated Sorted Array II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Minimum in Rotated Sorted Array II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "155",
    "title": "Min Stack",
    "titleSlug": "min-stack",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Min Stack",
    "example_output": "# Expected output for Min Stack",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Min Stack\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "156",
    "title": "Binary Tree Upside Down",
    "titleSlug": "binary-tree-upside-down",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Upside Down",
    "example_output": "# Expected output for Binary Tree Upside Down",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Upside Down\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "157",
    "title": "Read N Characters Given Read4",
    "titleSlug": "read-n-characters-given-read4",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Read N Characters Given Read4",
    "example_output": "# Expected output for Read N Characters Given Read4",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Read N Characters Given Read4\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "158",
    "title": "Read N Characters Given read4 II - Call Multiple Times",
    "titleSlug": "read-n-characters-given-read4-ii-call-multiple-times",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Read N Characters Given read4 II - Call Multiple Times",
    "example_output": "# Expected output for Read N Characters Given read4 II - Call Multiple Times",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Read N Characters Given read4 II - Call Multiple Times\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "159",
    "title": "Longest Substring with At Most Two Distinct Characters",
    "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Substring with At Most Two Distinct Characters",
    "example_output": "# Expected output for Longest Substring with At Most Two Distinct Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Substring with At Most Two Distinct Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "160",
    "title": "Intersection of Two Linked Lists",
    "titleSlug": "intersection-of-two-linked-lists",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Intersection of Two Linked Lists",
    "example_output": "# Expected output for Intersection of Two Linked Lists",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Intersection of Two Linked Lists\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "161",
    "title": "One Edit Distance",
    "titleSlug": "one-edit-distance",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for One Edit Distance",
    "example_output": "# Expected output for One Edit Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"One Edit Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "162",
    "title": "Find Peak Element",
    "titleSlug": "find-peak-element",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Peak Element",
    "example_output": "# Expected output for Find Peak Element",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Peak Element\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "163",
    "title": "Missing Ranges",
    "titleSlug": "missing-ranges",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Missing Ranges",
    "example_output": "# Expected output for Missing Ranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Missing Ranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "164",
    "title": "Maximum Gap",
    "titleSlug": "maximum-gap",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Bucket Sort"
      },
      {
        "name": "Radix Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Gap",
    "example_output": "# Expected output for Maximum Gap",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Gap\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "165",
    "title": "Compare Version Numbers",
    "titleSlug": "compare-version-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Compare Version Numbers",
    "example_output": "# Expected output for Compare Version Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Compare Version Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "166",
    "title": "Fraction to Recurring Decimal",
    "titleSlug": "fraction-to-recurring-decimal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fraction to Recurring Decimal",
    "example_output": "# Expected output for Fraction to Recurring Decimal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fraction to Recurring Decimal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "168",
    "title": "Excel Sheet Column Title",
    "titleSlug": "excel-sheet-column-title",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Excel Sheet Column Title",
    "example_output": "# Expected output for Excel Sheet Column Title",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Excel Sheet Column Title\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "169",
    "title": "Majority Element",
    "titleSlug": "majority-element",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Majority Element",
    "example_output": "# Expected output for Majority Element",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Majority Element\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "171",
    "title": "Excel Sheet Column Number",
    "titleSlug": "excel-sheet-column-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Excel Sheet Column Number",
    "example_output": "# Expected output for Excel Sheet Column Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Excel Sheet Column Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "172",
    "title": "Factorial Trailing Zeroes",
    "titleSlug": "factorial-trailing-zeroes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Factorial Trailing Zeroes",
    "example_output": "# Expected output for Factorial Trailing Zeroes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Factorial Trailing Zeroes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "173",
    "title": "Binary Search Tree Iterator",
    "titleSlug": "binary-search-tree-iterator",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Search Tree Iterator",
    "example_output": "# Expected output for Binary Search Tree Iterator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Search Tree Iterator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "174",
    "title": "Dungeon Game",
    "titleSlug": "dungeon-game",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Dungeon Game",
    "example_output": "# Expected output for Dungeon Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Dungeon Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "175",
    "title": "Combine Two Tables",
    "titleSlug": "combine-two-tables",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Combine Two Tables",
    "example_output": "# Expected output for Combine Two Tables",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Combine Two Tables\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "176",
    "title": "Second Highest Salary",
    "titleSlug": "second-highest-salary",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Second Highest Salary",
    "example_output": "# Expected output for Second Highest Salary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Second Highest Salary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "177",
    "title": "Nth Highest Salary",
    "titleSlug": "nth-highest-salary",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Nth Highest Salary",
    "example_output": "# Expected output for Nth Highest Salary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Nth Highest Salary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "178",
    "title": "Rank Scores",
    "titleSlug": "rank-scores",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rank Scores",
    "example_output": "# Expected output for Rank Scores",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rank Scores\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "179",
    "title": "Largest Number",
    "titleSlug": "largest-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Number",
    "example_output": "# Expected output for Largest Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "180",
    "title": "Consecutive Numbers",
    "titleSlug": "consecutive-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Consecutive Numbers",
    "example_output": "# Expected output for Consecutive Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Consecutive Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "181",
    "title": "Employees Earning More Than Their Managers",
    "titleSlug": "employees-earning-more-than-their-managers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Employees Earning More Than Their Managers",
    "example_output": "# Expected output for Employees Earning More Than Their Managers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Employees Earning More Than Their Managers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "182",
    "title": "Duplicate Emails",
    "titleSlug": "duplicate-emails",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Duplicate Emails",
    "example_output": "# Expected output for Duplicate Emails",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Duplicate Emails\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "183",
    "title": "Customers Who Never Order",
    "titleSlug": "customers-who-never-order",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Customers Who Never Order",
    "example_output": "# Expected output for Customers Who Never Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Customers Who Never Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "184",
    "title": "Department Highest Salary",
    "titleSlug": "department-highest-salary",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Department Highest Salary",
    "example_output": "# Expected output for Department Highest Salary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Department Highest Salary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "185",
    "title": "Department Top Three Salaries",
    "titleSlug": "department-top-three-salaries",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Department Top Three Salaries",
    "example_output": "# Expected output for Department Top Three Salaries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Department Top Three Salaries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "186",
    "title": "Reverse Words in a String II",
    "titleSlug": "reverse-words-in-a-string-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Words in a String II",
    "example_output": "# Expected output for Reverse Words in a String II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Words in a String II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "187",
    "title": "Repeated DNA Sequences",
    "titleSlug": "repeated-dna-sequences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Repeated DNA Sequences",
    "example_output": "# Expected output for Repeated DNA Sequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Repeated DNA Sequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "188",
    "title": "Best Time to Buy and Sell Stock IV",
    "titleSlug": "best-time-to-buy-and-sell-stock-iv",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Time to Buy and Sell Stock IV",
    "example_output": "# Expected output for Best Time to Buy and Sell Stock IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Time to Buy and Sell Stock IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "189",
    "title": "Rotate Array",
    "titleSlug": "rotate-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rotate Array",
    "example_output": "# Expected output for Rotate Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rotate Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "190",
    "title": "Reverse Bits",
    "titleSlug": "reverse-bits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Bits",
    "example_output": "# Expected output for Reverse Bits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Bits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "191",
    "title": "Number of 1 Bits",
    "titleSlug": "number-of-1-bits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of 1 Bits",
    "example_output": "# Expected output for Number of 1 Bits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of 1 Bits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "192",
    "title": "Word Frequency",
    "titleSlug": "word-frequency",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Shell"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Frequency",
    "example_output": "# Expected output for Word Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "193",
    "title": "Valid Phone Numbers",
    "titleSlug": "valid-phone-numbers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Shell"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Phone Numbers",
    "example_output": "# Expected output for Valid Phone Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Phone Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "194",
    "title": "Transpose File",
    "titleSlug": "transpose-file",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Shell"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Transpose File",
    "example_output": "# Expected output for Transpose File",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Transpose File\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "195",
    "title": "Tenth Line",
    "titleSlug": "tenth-line",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Shell"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tenth Line",
    "example_output": "# Expected output for Tenth Line",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tenth Line\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "196",
    "title": "Delete Duplicate Emails",
    "titleSlug": "delete-duplicate-emails",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Duplicate Emails",
    "example_output": "# Expected output for Delete Duplicate Emails",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Duplicate Emails\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "197",
    "title": "Rising Temperature",
    "titleSlug": "rising-temperature",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rising Temperature",
    "example_output": "# Expected output for Rising Temperature",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rising Temperature\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "198",
    "title": "House Robber",
    "titleSlug": "house-robber",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for House Robber",
    "example_output": "# Expected output for House Robber",
    "status": "TO_DO",
    "description": "Solve the problem titled \"House Robber\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "199",
    "title": "Binary Tree Right Side View",
    "titleSlug": "binary-tree-right-side-view",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Right Side View",
    "example_output": "# Expected output for Binary Tree Right Side View",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Right Side View\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "200",
    "title": "Number of Islands",
    "titleSlug": "number-of-islands",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Islands",
    "example_output": "# Expected output for Number of Islands",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Islands\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "201",
    "title": "Bitwise AND of Numbers Range",
    "titleSlug": "bitwise-and-of-numbers-range",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bitwise AND of Numbers Range",
    "example_output": "# Expected output for Bitwise AND of Numbers Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bitwise AND of Numbers Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "202",
    "title": "Happy Number",
    "titleSlug": "happy-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Happy Number",
    "example_output": "# Expected output for Happy Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Happy Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "203",
    "title": "Remove Linked List Elements",
    "titleSlug": "remove-linked-list-elements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Linked List Elements",
    "example_output": "# Expected output for Remove Linked List Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Linked List Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "204",
    "title": "Count Primes",
    "titleSlug": "count-primes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Primes",
    "example_output": "# Expected output for Count Primes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Primes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "205",
    "title": "Isomorphic Strings",
    "titleSlug": "isomorphic-strings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Isomorphic Strings",
    "example_output": "# Expected output for Isomorphic Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Isomorphic Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "206",
    "title": "Reverse Linked List",
    "titleSlug": "reverse-linked-list",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Linked List",
    "example_output": "# Expected output for Reverse Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "207",
    "title": "Course Schedule",
    "titleSlug": "course-schedule",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Course Schedule",
    "example_output": "# Expected output for Course Schedule",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Course Schedule\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "208",
    "title": "Implement Trie (Prefix Tree)",
    "titleSlug": "implement-trie-prefix-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Implement Trie (Prefix Tree)",
    "example_output": "# Expected output for Implement Trie (Prefix Tree)",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Implement Trie (Prefix Tree)\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "209",
    "title": "Minimum Size Subarray Sum",
    "titleSlug": "minimum-size-subarray-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Size Subarray Sum",
    "example_output": "# Expected output for Minimum Size Subarray Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Size Subarray Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "210",
    "title": "Course Schedule II",
    "titleSlug": "course-schedule-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Course Schedule II",
    "example_output": "# Expected output for Course Schedule II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Course Schedule II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "211",
    "title": "Design Add and Search Words Data Structure",
    "titleSlug": "design-add-and-search-words-data-structure",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Add and Search Words Data Structure",
    "example_output": "# Expected output for Design Add and Search Words Data Structure",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Add and Search Words Data Structure\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "212",
    "title": "Word Search II",
    "titleSlug": "word-search-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Search II",
    "example_output": "# Expected output for Word Search II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Search II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "213",
    "title": "House Robber II",
    "titleSlug": "house-robber-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for House Robber II",
    "example_output": "# Expected output for House Robber II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"House Robber II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "214",
    "title": "Shortest Palindrome",
    "titleSlug": "shortest-palindrome",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "String Matching"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Palindrome",
    "example_output": "# Expected output for Shortest Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Shortest Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "215",
    "title": "Kth Largest Element in an Array",
    "titleSlug": "kth-largest-element-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Quickselect"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Largest Element in an Array",
    "example_output": "# Expected output for Kth Largest Element in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Largest Element in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "216",
    "title": "Combination Sum III",
    "titleSlug": "combination-sum-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Combination Sum III",
    "example_output": "# Expected output for Combination Sum III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Combination Sum III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "217",
    "title": "Contains Duplicate",
    "titleSlug": "contains-duplicate",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Contains Duplicate",
    "example_output": "# Expected output for Contains Duplicate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Contains Duplicate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "218",
    "title": "The Skyline Problem",
    "titleSlug": "the-skyline-problem",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Line Sweep"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Skyline Problem",
    "example_output": "# Expected output for The Skyline Problem",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Skyline Problem\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "219",
    "title": "Contains Duplicate II",
    "titleSlug": "contains-duplicate-ii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Contains Duplicate II",
    "example_output": "# Expected output for Contains Duplicate II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Contains Duplicate II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "220",
    "title": "Contains Duplicate III",
    "titleSlug": "contains-duplicate-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Bucket Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Contains Duplicate III",
    "example_output": "# Expected output for Contains Duplicate III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Contains Duplicate III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "221",
    "title": "Maximal Square",
    "titleSlug": "maximal-square",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximal Square",
    "example_output": "# Expected output for Maximal Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximal Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "222",
    "title": "Count Complete Tree Nodes",
    "titleSlug": "count-complete-tree-nodes",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Binary Search"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Complete Tree Nodes",
    "example_output": "# Expected output for Count Complete Tree Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Complete Tree Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "223",
    "title": "Rectangle Area",
    "titleSlug": "rectangle-area",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rectangle Area",
    "example_output": "# Expected output for Rectangle Area",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rectangle Area\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "224",
    "title": "Basic Calculator",
    "titleSlug": "basic-calculator",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Basic Calculator",
    "example_output": "# Expected output for Basic Calculator",
    "status": "TO_DO",
    "description": "Implement a calculator that supports the logic described in \"Basic Calculator\". The calculator may need to parse expressions and compute results."
  },
  {
    "id": "225",
    "title": "Implement Stack using Queues",
    "titleSlug": "implement-stack-using-queues",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Implement Stack using Queues",
    "example_output": "# Expected output for Implement Stack using Queues",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Implement Stack using Queues\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "226",
    "title": "Invert Binary Tree",
    "titleSlug": "invert-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Invert Binary Tree",
    "example_output": "# Expected output for Invert Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Invert Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "227",
    "title": "Basic Calculator II",
    "titleSlug": "basic-calculator-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Basic Calculator II",
    "example_output": "# Expected output for Basic Calculator II",
    "status": "TO_DO",
    "description": "Implement a calculator that supports the logic described in \"Basic Calculator II\". The calculator may need to parse expressions and compute results."
  },
  {
    "id": "228",
    "title": "Summary Ranges",
    "titleSlug": "summary-ranges",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Summary Ranges",
    "example_output": "# Expected output for Summary Ranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Summary Ranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "229",
    "title": "Majority Element II",
    "titleSlug": "majority-element-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Majority Element II",
    "example_output": "# Expected output for Majority Element II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Majority Element II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "230",
    "title": "Kth Smallest Element in a BST",
    "titleSlug": "kth-smallest-element-in-a-bst",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Smallest Element in a BST",
    "example_output": "# Expected output for Kth Smallest Element in a BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Smallest Element in a BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "231",
    "title": "Power of Two",
    "titleSlug": "power-of-two",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Power of Two",
    "example_output": "# Expected output for Power of Two",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Power of Two\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "232",
    "title": "Implement Queue using Stacks",
    "titleSlug": "implement-queue-using-stacks",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Implement Queue using Stacks",
    "example_output": "# Expected output for Implement Queue using Stacks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Implement Queue using Stacks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "233",
    "title": "Number of Digit One",
    "titleSlug": "number-of-digit-one",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Digit One",
    "example_output": "# Expected output for Number of Digit One",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Digit One\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "234",
    "title": "Palindrome Linked List",
    "titleSlug": "palindrome-linked-list",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Linked List",
    "example_output": "# Expected output for Palindrome Linked List",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Linked List\". Return the result based on the transformation rules involved."
  },
  {
    "id": "235",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lowest Common Ancestor of a Binary Search Tree",
    "example_output": "# Expected output for Lowest Common Ancestor of a Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lowest Common Ancestor of a Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "236",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lowest Common Ancestor of a Binary Tree",
    "example_output": "# Expected output for Lowest Common Ancestor of a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lowest Common Ancestor of a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "237",
    "title": "Delete Node in a Linked List",
    "titleSlug": "delete-node-in-a-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Node in a Linked List",
    "example_output": "# Expected output for Delete Node in a Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Node in a Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "238",
    "title": "Product of Array Except Self",
    "titleSlug": "product-of-array-except-self",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product of Array Except Self",
    "example_output": "# Expected output for Product of Array Except Self",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product of Array Except Self\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "239",
    "title": "Sliding Window Maximum",
    "titleSlug": "sliding-window-maximum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sliding Window Maximum",
    "example_output": "# Expected output for Sliding Window Maximum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sliding Window Maximum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "240",
    "title": "Search a 2D Matrix II",
    "titleSlug": "search-a-2d-matrix-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Search a 2D Matrix II",
    "example_output": "# Expected output for Search a 2D Matrix II",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Search a 2D Matrix II\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "241",
    "title": "Different Ways to Add Parentheses",
    "titleSlug": "different-ways-to-add-parentheses",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Different Ways to Add Parentheses",
    "example_output": "# Expected output for Different Ways to Add Parentheses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Different Ways to Add Parentheses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "243",
    "title": "Shortest Word Distance",
    "titleSlug": "shortest-word-distance",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Word Distance",
    "example_output": "# Expected output for Shortest Word Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Word Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "244",
    "title": "Shortest Word Distance II",
    "titleSlug": "shortest-word-distance-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Word Distance II",
    "example_output": "# Expected output for Shortest Word Distance II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Word Distance II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "245",
    "title": "Shortest Word Distance III",
    "titleSlug": "shortest-word-distance-iii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Word Distance III",
    "example_output": "# Expected output for Shortest Word Distance III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Word Distance III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "246",
    "title": "Strobogrammatic Number",
    "titleSlug": "strobogrammatic-number",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strobogrammatic Number",
    "example_output": "# Expected output for Strobogrammatic Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strobogrammatic Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "247",
    "title": "Strobogrammatic Number II",
    "titleSlug": "strobogrammatic-number-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strobogrammatic Number II",
    "example_output": "# Expected output for Strobogrammatic Number II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strobogrammatic Number II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "248",
    "title": "Strobogrammatic Number III",
    "titleSlug": "strobogrammatic-number-iii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strobogrammatic Number III",
    "example_output": "# Expected output for Strobogrammatic Number III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strobogrammatic Number III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "249",
    "title": "Group Shifted Strings",
    "titleSlug": "group-shifted-strings",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Group Shifted Strings",
    "example_output": "# Expected output for Group Shifted Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Group Shifted Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "250",
    "title": "Count Univalue Subtrees",
    "titleSlug": "count-univalue-subtrees",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Univalue Subtrees",
    "example_output": "# Expected output for Count Univalue Subtrees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Univalue Subtrees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "251",
    "title": "Flatten 2D Vector",
    "titleSlug": "flatten-2d-vector",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Design"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flatten 2D Vector",
    "example_output": "# Expected output for Flatten 2D Vector",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flatten 2D Vector\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "252",
    "title": "Meeting Rooms",
    "titleSlug": "meeting-rooms",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Meeting Rooms",
    "example_output": "# Expected output for Meeting Rooms",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Meeting Rooms\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "253",
    "title": "Meeting Rooms II",
    "titleSlug": "meeting-rooms-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Meeting Rooms II",
    "example_output": "# Expected output for Meeting Rooms II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Meeting Rooms II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "254",
    "title": "Factor Combinations",
    "titleSlug": "factor-combinations",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Factor Combinations",
    "example_output": "# Expected output for Factor Combinations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Factor Combinations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "255",
    "title": "Verify Preorder Sequence in Binary Search Tree",
    "titleSlug": "verify-preorder-sequence-in-binary-search-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Verify Preorder Sequence in Binary Search Tree",
    "example_output": "# Expected output for Verify Preorder Sequence in Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Verify Preorder Sequence in Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "256",
    "title": "Paint House",
    "titleSlug": "paint-house",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Paint House",
    "example_output": "# Expected output for Paint House",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Paint House\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "257",
    "title": "Binary Tree Paths",
    "titleSlug": "binary-tree-paths",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Paths",
    "example_output": "# Expected output for Binary Tree Paths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Paths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "258",
    "title": "Add Digits",
    "titleSlug": "add-digits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Digits",
    "example_output": "# Expected output for Add Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "259",
    "title": "3Sum Smaller",
    "titleSlug": "3sum-smaller",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 3Sum Smaller",
    "example_output": "# Expected output for 3Sum Smaller",
    "status": "TO_DO",
    "description": "Solve the problem titled \"3Sum Smaller\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "260",
    "title": "Single Number III",
    "titleSlug": "single-number-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Single Number III",
    "example_output": "# Expected output for Single Number III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Single Number III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "261",
    "title": "Graph Valid Tree",
    "titleSlug": "graph-valid-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Graph Valid Tree",
    "example_output": "# Expected output for Graph Valid Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Graph Valid Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "262",
    "title": "Trips and Users",
    "titleSlug": "trips-and-users",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Trips and Users",
    "example_output": "# Expected output for Trips and Users",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Trips and Users\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "263",
    "title": "Ugly Number",
    "titleSlug": "ugly-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ugly Number",
    "example_output": "# Expected output for Ugly Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ugly Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "264",
    "title": "Ugly Number II",
    "titleSlug": "ugly-number-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ugly Number II",
    "example_output": "# Expected output for Ugly Number II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ugly Number II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "265",
    "title": "Paint House II",
    "titleSlug": "paint-house-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Paint House II",
    "example_output": "# Expected output for Paint House II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Paint House II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "266",
    "title": "Palindrome Permutation",
    "titleSlug": "palindrome-permutation",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Permutation",
    "example_output": "# Expected output for Palindrome Permutation",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Permutation\". Return the result based on the transformation rules involved."
  },
  {
    "id": "267",
    "title": "Palindrome Permutation II",
    "titleSlug": "palindrome-permutation-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Permutation II",
    "example_output": "# Expected output for Palindrome Permutation II",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Permutation II\". Return the result based on the transformation rules involved."
  },
  {
    "id": "268",
    "title": "Missing Number",
    "titleSlug": "missing-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Missing Number",
    "example_output": "# Expected output for Missing Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Missing Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "269",
    "title": "Alien Dictionary",
    "titleSlug": "alien-dictionary",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Alien Dictionary",
    "example_output": "# Expected output for Alien Dictionary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Alien Dictionary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "270",
    "title": "Closest Binary Search Tree Value",
    "titleSlug": "closest-binary-search-tree-value",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Binary Search"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Binary Search Tree Value",
    "example_output": "# Expected output for Closest Binary Search Tree Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Binary Search Tree Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "271",
    "title": "Encode and Decode Strings",
    "titleSlug": "encode-and-decode-strings",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Encode and Decode Strings",
    "example_output": "# Expected output for Encode and Decode Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Encode and Decode Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "272",
    "title": "Closest Binary Search Tree Value II",
    "titleSlug": "closest-binary-search-tree-value-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Binary Search Tree Value II",
    "example_output": "# Expected output for Closest Binary Search Tree Value II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Binary Search Tree Value II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "273",
    "title": "Integer to English Words",
    "titleSlug": "integer-to-english-words",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Integer to English Words",
    "example_output": "# Expected output for Integer to English Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Integer to English Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "274",
    "title": "H-Index",
    "titleSlug": "h-index",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for H-Index",
    "example_output": "# Expected output for H-Index",
    "status": "TO_DO",
    "description": "Solve the problem titled \"H-Index\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "275",
    "title": "H-Index II",
    "titleSlug": "h-index-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for H-Index II",
    "example_output": "# Expected output for H-Index II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"H-Index II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "276",
    "title": "Paint Fence",
    "titleSlug": "paint-fence",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Paint Fence",
    "example_output": "# Expected output for Paint Fence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Paint Fence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "277",
    "title": "Find the Celebrity",
    "titleSlug": "find-the-celebrity",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Celebrity",
    "example_output": "# Expected output for Find the Celebrity",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Celebrity\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "278",
    "title": "First Bad Version",
    "titleSlug": "first-bad-version",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Binary Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for First Bad Version",
    "example_output": "# Expected output for First Bad Version",
    "status": "TO_DO",
    "description": "Solve the problem titled \"First Bad Version\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "279",
    "title": "Perfect Squares",
    "titleSlug": "perfect-squares",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Perfect Squares",
    "example_output": "# Expected output for Perfect Squares",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Perfect Squares\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "280",
    "title": "Wiggle Sort",
    "titleSlug": "wiggle-sort",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Wiggle Sort",
    "example_output": "# Expected output for Wiggle Sort",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Wiggle Sort\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "281",
    "title": "Zigzag Iterator",
    "titleSlug": "zigzag-iterator",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Zigzag Iterator",
    "example_output": "# Expected output for Zigzag Iterator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Zigzag Iterator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "282",
    "title": "Expression Add Operators",
    "titleSlug": "expression-add-operators",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Expression Add Operators",
    "example_output": "# Expected output for Expression Add Operators",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Expression Add Operators\"."
  },
  {
    "id": "283",
    "title": "Move Zeroes",
    "titleSlug": "move-zeroes",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Move Zeroes",
    "example_output": "# Expected output for Move Zeroes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Move Zeroes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "284",
    "title": "Peeking Iterator",
    "titleSlug": "peeking-iterator",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Peeking Iterator",
    "example_output": "# Expected output for Peeking Iterator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Peeking Iterator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "285",
    "title": "Inorder Successor in BST",
    "titleSlug": "inorder-successor-in-bst",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Inorder Successor in BST",
    "example_output": "# Expected output for Inorder Successor in BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Inorder Successor in BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "286",
    "title": "Walls and Gates",
    "titleSlug": "walls-and-gates",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Walls and Gates",
    "example_output": "# Expected output for Walls and Gates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Walls and Gates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "287",
    "title": "Find the Duplicate Number",
    "titleSlug": "find-the-duplicate-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Duplicate Number",
    "example_output": "# Expected output for Find the Duplicate Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Duplicate Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "288",
    "title": "Unique Word Abbreviation",
    "titleSlug": "unique-word-abbreviation",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Word Abbreviation",
    "example_output": "# Expected output for Unique Word Abbreviation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Word Abbreviation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "289",
    "title": "Game of Life",
    "titleSlug": "game-of-life",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Game of Life",
    "example_output": "# Expected output for Game of Life",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Game of Life\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "290",
    "title": "Word Pattern",
    "titleSlug": "word-pattern",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Pattern",
    "example_output": "# Expected output for Word Pattern",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Pattern\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "291",
    "title": "Word Pattern II",
    "titleSlug": "word-pattern-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Pattern II",
    "example_output": "# Expected output for Word Pattern II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Pattern II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "292",
    "title": "Nim Game",
    "titleSlug": "nim-game",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Nim Game",
    "example_output": "# Expected output for Nim Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Nim Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "293",
    "title": "Flip Game",
    "titleSlug": "flip-game",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flip Game",
    "example_output": "# Expected output for Flip Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flip Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "294",
    "title": "Flip Game II",
    "titleSlug": "flip-game-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flip Game II",
    "example_output": "# Expected output for Flip Game II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flip Game II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "295",
    "title": "Find Median from Data Stream",
    "titleSlug": "find-median-from-data-stream",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "Design"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Median from Data Stream",
    "example_output": "# Expected output for Find Median from Data Stream",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Median from Data Stream\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "296",
    "title": "Best Meeting Point",
    "titleSlug": "best-meeting-point",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Meeting Point",
    "example_output": "# Expected output for Best Meeting Point",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Meeting Point\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "297",
    "title": "Serialize and Deserialize Binary Tree",
    "titleSlug": "serialize-and-deserialize-binary-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Serialize and Deserialize Binary Tree",
    "example_output": "# Expected output for Serialize and Deserialize Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Serialize and Deserialize Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "298",
    "title": "Binary Tree Longest Consecutive Sequence",
    "titleSlug": "binary-tree-longest-consecutive-sequence",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Longest Consecutive Sequence",
    "example_output": "# Expected output for Binary Tree Longest Consecutive Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Longest Consecutive Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "299",
    "title": "Bulls and Cows",
    "titleSlug": "bulls-and-cows",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bulls and Cows",
    "example_output": "# Expected output for Bulls and Cows",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bulls and Cows\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "300",
    "title": "Longest Increasing Subsequence",
    "titleSlug": "longest-increasing-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Increasing Subsequence",
    "example_output": "# Expected output for Longest Increasing Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Increasing Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "301",
    "title": "Remove Invalid Parentheses",
    "titleSlug": "remove-invalid-parentheses",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Invalid Parentheses",
    "example_output": "# Expected output for Remove Invalid Parentheses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Invalid Parentheses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "302",
    "title": "Smallest Rectangle Enclosing Black Pixels",
    "titleSlug": "smallest-rectangle-enclosing-black-pixels",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Rectangle Enclosing Black Pixels",
    "example_output": "# Expected output for Smallest Rectangle Enclosing Black Pixels",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Rectangle Enclosing Black Pixels\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "303",
    "title": "Range Sum Query - Immutable",
    "titleSlug": "range-sum-query-immutable",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Sum Query - Immutable",
    "example_output": "# Expected output for Range Sum Query - Immutable",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Sum Query - Immutable\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "304",
    "title": "Range Sum Query 2D - Immutable",
    "titleSlug": "range-sum-query-2d-immutable",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Sum Query 2D - Immutable",
    "example_output": "# Expected output for Range Sum Query 2D - Immutable",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Sum Query 2D - Immutable\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "305",
    "title": "Number of Islands II",
    "titleSlug": "number-of-islands-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Islands II",
    "example_output": "# Expected output for Number of Islands II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Islands II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "306",
    "title": "Additive Number",
    "titleSlug": "additive-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Additive Number",
    "example_output": "# Expected output for Additive Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Additive Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "307",
    "title": "Range Sum Query - Mutable",
    "titleSlug": "range-sum-query-mutable",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Sum Query - Mutable",
    "example_output": "# Expected output for Range Sum Query - Mutable",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Sum Query - Mutable\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "308",
    "title": "Range Sum Query 2D - Mutable",
    "titleSlug": "range-sum-query-2d-mutable",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Sum Query 2D - Mutable",
    "example_output": "# Expected output for Range Sum Query 2D - Mutable",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Sum Query 2D - Mutable\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "309",
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Time to Buy and Sell Stock with Cooldown",
    "example_output": "# Expected output for Best Time to Buy and Sell Stock with Cooldown",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Time to Buy and Sell Stock with Cooldown\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "310",
    "title": "Minimum Height Trees",
    "titleSlug": "minimum-height-trees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Height Trees",
    "example_output": "# Expected output for Minimum Height Trees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Height Trees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "311",
    "title": "Sparse Matrix Multiplication",
    "titleSlug": "sparse-matrix-multiplication",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sparse Matrix Multiplication",
    "example_output": "# Expected output for Sparse Matrix Multiplication",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Sparse Matrix Multiplication\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "312",
    "title": "Burst Balloons",
    "titleSlug": "burst-balloons",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Burst Balloons",
    "example_output": "# Expected output for Burst Balloons",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Burst Balloons\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "313",
    "title": "Super Ugly Number",
    "titleSlug": "super-ugly-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Super Ugly Number",
    "example_output": "# Expected output for Super Ugly Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Super Ugly Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "314",
    "title": "Binary Tree Vertical Order Traversal",
    "titleSlug": "binary-tree-vertical-order-traversal",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Vertical Order Traversal",
    "example_output": "# Expected output for Binary Tree Vertical Order Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Vertical Order Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "315",
    "title": "Count of Smaller Numbers After Self",
    "titleSlug": "count-of-smaller-numbers-after-self",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count of Smaller Numbers After Self",
    "example_output": "# Expected output for Count of Smaller Numbers After Self",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count of Smaller Numbers After Self\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "316",
    "title": "Remove Duplicate Letters",
    "titleSlug": "remove-duplicate-letters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Duplicate Letters",
    "example_output": "# Expected output for Remove Duplicate Letters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Duplicate Letters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "317",
    "title": "Shortest Distance from All Buildings",
    "titleSlug": "shortest-distance-from-all-buildings",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Distance from All Buildings",
    "example_output": "# Expected output for Shortest Distance from All Buildings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Distance from All Buildings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "318",
    "title": "Maximum Product of Word Lengths",
    "titleSlug": "maximum-product-of-word-lengths",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product of Word Lengths",
    "example_output": "# Expected output for Maximum Product of Word Lengths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product of Word Lengths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "319",
    "title": "Bulb Switcher",
    "titleSlug": "bulb-switcher",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Brainteaser"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bulb Switcher",
    "example_output": "# Expected output for Bulb Switcher",
    "status": "TO_DO",
    "description": "Given a number of bulbs or switches, solve the problem titled \"Bulb Switcher\" by simulating the toggling operations and returning the correct result."
  },
  {
    "id": "320",
    "title": "Generalized Abbreviation",
    "titleSlug": "generalized-abbreviation",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Generalized Abbreviation",
    "example_output": "# Expected output for Generalized Abbreviation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Generalized Abbreviation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "321",
    "title": "Create Maximum Number",
    "titleSlug": "create-maximum-number",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create Maximum Number",
    "example_output": "# Expected output for Create Maximum Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create Maximum Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "322",
    "title": "Coin Change",
    "titleSlug": "coin-change",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Coin Change",
    "example_output": "# Expected output for Coin Change",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Coin Change\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "323",
    "title": "Number of Connected Components in an Undirected Graph",
    "titleSlug": "number-of-connected-components-in-an-undirected-graph",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Connected Components in an Undirected Graph",
    "example_output": "# Expected output for Number of Connected Components in an Undirected Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Connected Components in an Undirected Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "324",
    "title": "Wiggle Sort II",
    "titleSlug": "wiggle-sort-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Quickselect"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Wiggle Sort II",
    "example_output": "# Expected output for Wiggle Sort II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Wiggle Sort II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "325",
    "title": "Maximum Size Subarray Sum Equals k",
    "titleSlug": "maximum-size-subarray-sum-equals-k",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Size Subarray Sum Equals k",
    "example_output": "# Expected output for Maximum Size Subarray Sum Equals k",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Size Subarray Sum Equals k\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "326",
    "title": "Power of Three",
    "titleSlug": "power-of-three",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Power of Three",
    "example_output": "# Expected output for Power of Three",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Power of Three\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "327",
    "title": "Count of Range Sum",
    "titleSlug": "count-of-range-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count of Range Sum",
    "example_output": "# Expected output for Count of Range Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count of Range Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "328",
    "title": "Odd Even Linked List",
    "titleSlug": "odd-even-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Odd Even Linked List",
    "example_output": "# Expected output for Odd Even Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Odd Even Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "329",
    "title": "Longest Increasing Path in a Matrix",
    "titleSlug": "longest-increasing-path-in-a-matrix",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Increasing Path in a Matrix",
    "example_output": "# Expected output for Longest Increasing Path in a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Longest Increasing Path in a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "330",
    "title": "Patching Array",
    "titleSlug": "patching-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Patching Array",
    "example_output": "# Expected output for Patching Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Patching Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "331",
    "title": "Verify Preorder Serialization of a Binary Tree",
    "titleSlug": "verify-preorder-serialization-of-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Verify Preorder Serialization of a Binary Tree",
    "example_output": "# Expected output for Verify Preorder Serialization of a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Verify Preorder Serialization of a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "332",
    "title": "Reconstruct Itinerary",
    "titleSlug": "reconstruct-itinerary",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Eulerian Circuit"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reconstruct Itinerary",
    "example_output": "# Expected output for Reconstruct Itinerary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reconstruct Itinerary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "333",
    "title": "Largest BST Subtree",
    "titleSlug": "largest-bst-subtree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest BST Subtree",
    "example_output": "# Expected output for Largest BST Subtree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest BST Subtree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "334",
    "title": "Increasing Triplet Subsequence",
    "titleSlug": "increasing-triplet-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Increasing Triplet Subsequence",
    "example_output": "# Expected output for Increasing Triplet Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Increasing Triplet Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "335",
    "title": "Self Crossing",
    "titleSlug": "self-crossing",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Self Crossing",
    "example_output": "# Expected output for Self Crossing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Self Crossing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "336",
    "title": "Palindrome Pairs",
    "titleSlug": "palindrome-pairs",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Pairs",
    "example_output": "# Expected output for Palindrome Pairs",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Pairs\". Return the result based on the transformation rules involved."
  },
  {
    "id": "337",
    "title": "House Robber III",
    "titleSlug": "house-robber-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for House Robber III",
    "example_output": "# Expected output for House Robber III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"House Robber III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "338",
    "title": "Counting Bits",
    "titleSlug": "counting-bits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Counting Bits",
    "example_output": "# Expected output for Counting Bits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Counting Bits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "339",
    "title": "Nested List Weight Sum",
    "titleSlug": "nested-list-weight-sum",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Nested List Weight Sum",
    "example_output": "# Expected output for Nested List Weight Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Nested List Weight Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "340",
    "title": "Longest Substring with At Most K Distinct Characters",
    "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Substring with At Most K Distinct Characters",
    "example_output": "# Expected output for Longest Substring with At Most K Distinct Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Substring with At Most K Distinct Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "341",
    "title": "Flatten Nested List Iterator",
    "titleSlug": "flatten-nested-list-iterator",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flatten Nested List Iterator",
    "example_output": "# Expected output for Flatten Nested List Iterator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flatten Nested List Iterator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "342",
    "title": "Power of Four",
    "titleSlug": "power-of-four",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Power of Four",
    "example_output": "# Expected output for Power of Four",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Power of Four\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "343",
    "title": "Integer Break",
    "titleSlug": "integer-break",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Integer Break",
    "example_output": "# Expected output for Integer Break",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Integer Break\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "345",
    "title": "Reverse Vowels of a String",
    "titleSlug": "reverse-vowels-of-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Vowels of a String",
    "example_output": "# Expected output for Reverse Vowels of a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Vowels of a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "346",
    "title": "Moving Average from Data Stream",
    "titleSlug": "moving-average-from-data-stream",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Moving Average from Data Stream",
    "example_output": "# Expected output for Moving Average from Data Stream",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Moving Average from Data Stream\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "347",
    "title": "Top K Frequent Elements",
    "titleSlug": "top-k-frequent-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Bucket Sort"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Quickselect"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Top K Frequent Elements",
    "example_output": "# Expected output for Top K Frequent Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Top K Frequent Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "348",
    "title": "Design Tic-Tac-Toe",
    "titleSlug": "design-tic-tac-toe",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Tic-Tac-Toe",
    "example_output": "# Expected output for Design Tic-Tac-Toe",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Tic-Tac-Toe\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "349",
    "title": "Intersection of Two Arrays",
    "titleSlug": "intersection-of-two-arrays",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Intersection of Two Arrays",
    "example_output": "# Expected output for Intersection of Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Intersection of Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "350",
    "title": "Intersection of Two Arrays II",
    "titleSlug": "intersection-of-two-arrays-ii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Intersection of Two Arrays II",
    "example_output": "# Expected output for Intersection of Two Arrays II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Intersection of Two Arrays II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "351",
    "title": "Android Unlock Patterns",
    "titleSlug": "android-unlock-patterns",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Android Unlock Patterns",
    "example_output": "# Expected output for Android Unlock Patterns",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Android Unlock Patterns\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "352",
    "title": "Data Stream as Disjoint Intervals",
    "titleSlug": "data-stream-as-disjoint-intervals",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Data Stream as Disjoint Intervals",
    "example_output": "# Expected output for Data Stream as Disjoint Intervals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Data Stream as Disjoint Intervals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "353",
    "title": "Design Snake Game",
    "titleSlug": "design-snake-game",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Snake Game",
    "example_output": "# Expected output for Design Snake Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Snake Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "354",
    "title": "Russian Doll Envelopes",
    "titleSlug": "russian-doll-envelopes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Russian Doll Envelopes",
    "example_output": "# Expected output for Russian Doll Envelopes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Russian Doll Envelopes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "355",
    "title": "Design Twitter",
    "titleSlug": "design-twitter",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Twitter",
    "example_output": "# Expected output for Design Twitter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Twitter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "356",
    "title": "Line Reflection",
    "titleSlug": "line-reflection",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Line Reflection",
    "example_output": "# Expected output for Line Reflection",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Line Reflection\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "357",
    "title": "Count Numbers with Unique Digits",
    "titleSlug": "count-numbers-with-unique-digits",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Numbers with Unique Digits",
    "example_output": "# Expected output for Count Numbers with Unique Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Numbers with Unique Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "358",
    "title": "Rearrange String k Distance Apart",
    "titleSlug": "rearrange-string-k-distance-apart",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rearrange String k Distance Apart",
    "example_output": "# Expected output for Rearrange String k Distance Apart",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rearrange String k Distance Apart\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "359",
    "title": "Logger Rate Limiter",
    "titleSlug": "logger-rate-limiter",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Logger Rate Limiter",
    "example_output": "# Expected output for Logger Rate Limiter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Logger Rate Limiter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "360",
    "title": "Sort Transformed Array",
    "titleSlug": "sort-transformed-array",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Transformed Array",
    "example_output": "# Expected output for Sort Transformed Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Transformed Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "361",
    "title": "Bomb Enemy",
    "titleSlug": "bomb-enemy",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bomb Enemy",
    "example_output": "# Expected output for Bomb Enemy",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bomb Enemy\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "362",
    "title": "Design Hit Counter",
    "titleSlug": "design-hit-counter",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Hit Counter",
    "example_output": "# Expected output for Design Hit Counter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Hit Counter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "363",
    "title": "Max Sum of Rectangle No Larger Than K",
    "titleSlug": "max-sum-of-rectangle-no-larger-than-k",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Sum of Rectangle No Larger Than K",
    "example_output": "# Expected output for Max Sum of Rectangle No Larger Than K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Sum of Rectangle No Larger Than K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "364",
    "title": "Nested List Weight Sum II",
    "titleSlug": "nested-list-weight-sum-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Nested List Weight Sum II",
    "example_output": "# Expected output for Nested List Weight Sum II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Nested List Weight Sum II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "365",
    "title": "Water and Jug Problem",
    "titleSlug": "water-and-jug-problem",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Water and Jug Problem",
    "example_output": "# Expected output for Water and Jug Problem",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Water and Jug Problem\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "366",
    "title": "Find Leaves of Binary Tree",
    "titleSlug": "find-leaves-of-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Leaves of Binary Tree",
    "example_output": "# Expected output for Find Leaves of Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Leaves of Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "367",
    "title": "Valid Perfect Square",
    "titleSlug": "valid-perfect-square",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Perfect Square",
    "example_output": "# Expected output for Valid Perfect Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Perfect Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "368",
    "title": "Largest Divisible Subset",
    "titleSlug": "largest-divisible-subset",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Divisible Subset",
    "example_output": "# Expected output for Largest Divisible Subset",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Divisible Subset\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "369",
    "title": "Plus One Linked List",
    "titleSlug": "plus-one-linked-list",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Plus One Linked List",
    "example_output": "# Expected output for Plus One Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Plus One Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "370",
    "title": "Range Addition",
    "titleSlug": "range-addition",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Addition",
    "example_output": "# Expected output for Range Addition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Addition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "371",
    "title": "Sum of Two Integers",
    "titleSlug": "sum-of-two-integers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Two Integers",
    "example_output": "# Expected output for Sum of Two Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Two Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "372",
    "title": "Super Pow",
    "titleSlug": "super-pow",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Divide and Conquer"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Super Pow",
    "example_output": "# Expected output for Super Pow",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Super Pow\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "373",
    "title": "Find K Pairs with Smallest Sums",
    "titleSlug": "find-k-pairs-with-smallest-sums",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find K Pairs with Smallest Sums",
    "example_output": "# Expected output for Find K Pairs with Smallest Sums",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find K Pairs with Smallest Sums\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "374",
    "title": "Guess Number Higher or Lower",
    "titleSlug": "guess-number-higher-or-lower",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Binary Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Guess Number Higher or Lower",
    "example_output": "# Expected output for Guess Number Higher or Lower",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Guess Number Higher or Lower\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "375",
    "title": "Guess Number Higher or Lower II",
    "titleSlug": "guess-number-higher-or-lower-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Guess Number Higher or Lower II",
    "example_output": "# Expected output for Guess Number Higher or Lower II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Guess Number Higher or Lower II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "376",
    "title": "Wiggle Subsequence",
    "titleSlug": "wiggle-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Wiggle Subsequence",
    "example_output": "# Expected output for Wiggle Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Wiggle Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "377",
    "title": "Combination Sum IV",
    "titleSlug": "combination-sum-iv",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Combination Sum IV",
    "example_output": "# Expected output for Combination Sum IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Combination Sum IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "378",
    "title": "Kth Smallest Element in a Sorted Matrix",
    "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Smallest Element in a Sorted Matrix",
    "example_output": "# Expected output for Kth Smallest Element in a Sorted Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Kth Smallest Element in a Sorted Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "379",
    "title": "Design Phone Directory",
    "titleSlug": "design-phone-directory",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Phone Directory",
    "example_output": "# Expected output for Design Phone Directory",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Phone Directory\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "380",
    "title": "Insert Delete GetRandom O(1)",
    "titleSlug": "insert-delete-getrandom-o1",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Design"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Insert Delete GetRandom O(1)",
    "example_output": "# Expected output for Insert Delete GetRandom O(1)",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Insert Delete GetRandom O(1)\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "381",
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Design"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Insert Delete GetRandom O(1) - Duplicates allowed",
    "example_output": "# Expected output for Insert Delete GetRandom O(1) - Duplicates allowed",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Insert Delete GetRandom O(1) - Duplicates allowed\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "382",
    "title": "Linked List Random Node",
    "titleSlug": "linked-list-random-node",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Math"
      },
      {
        "name": "Reservoir Sampling"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Linked List Random Node",
    "example_output": "# Expected output for Linked List Random Node",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Linked List Random Node\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "383",
    "title": "Ransom Note",
    "titleSlug": "ransom-note",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ransom Note",
    "example_output": "# Expected output for Ransom Note",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ransom Note\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "384",
    "title": "Shuffle an Array",
    "titleSlug": "shuffle-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Design"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shuffle an Array",
    "example_output": "# Expected output for Shuffle an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shuffle an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "385",
    "title": "Mini Parser",
    "titleSlug": "mini-parser",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Mini Parser",
    "example_output": "# Expected output for Mini Parser",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Mini Parser\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "386",
    "title": "Lexicographical Numbers",
    "titleSlug": "lexicographical-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lexicographical Numbers",
    "example_output": "# Expected output for Lexicographical Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lexicographical Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "387",
    "title": "First Unique Character in a String",
    "titleSlug": "first-unique-character-in-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for First Unique Character in a String",
    "example_output": "# Expected output for First Unique Character in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"First Unique Character in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "388",
    "title": "Longest Absolute File Path",
    "titleSlug": "longest-absolute-file-path",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Absolute File Path",
    "example_output": "# Expected output for Longest Absolute File Path",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Absolute File Path\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "389",
    "title": "Find the Difference",
    "titleSlug": "find-the-difference",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Difference",
    "example_output": "# Expected output for Find the Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "390",
    "title": "Elimination Game",
    "titleSlug": "elimination-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Elimination Game",
    "example_output": "# Expected output for Elimination Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Elimination Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "391",
    "title": "Perfect Rectangle",
    "titleSlug": "perfect-rectangle",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Line Sweep"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Perfect Rectangle",
    "example_output": "# Expected output for Perfect Rectangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Perfect Rectangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "392",
    "title": "Is Subsequence",
    "titleSlug": "is-subsequence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Is Subsequence",
    "example_output": "# Expected output for Is Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Is Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "393",
    "title": "UTF-8 Validation",
    "titleSlug": "utf-8-validation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for UTF-8 Validation",
    "example_output": "# Expected output for UTF-8 Validation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"UTF-8 Validation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "394",
    "title": "Decode String",
    "titleSlug": "decode-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decode String",
    "example_output": "# Expected output for Decode String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decode String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "395",
    "title": "Longest Substring with At Least K Repeating Characters",
    "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Substring with At Least K Repeating Characters",
    "example_output": "# Expected output for Longest Substring with At Least K Repeating Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Substring with At Least K Repeating Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "396",
    "title": "Rotate Function",
    "titleSlug": "rotate-function",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rotate Function",
    "example_output": "# Expected output for Rotate Function",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rotate Function\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "397",
    "title": "Integer Replacement",
    "titleSlug": "integer-replacement",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Integer Replacement",
    "example_output": "# Expected output for Integer Replacement",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Integer Replacement\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "398",
    "title": "Random Pick Index",
    "titleSlug": "random-pick-index",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Reservoir Sampling"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Random Pick Index",
    "example_output": "# Expected output for Random Pick Index",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Random Pick Index\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "399",
    "title": "Evaluate Division",
    "titleSlug": "evaluate-division",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Evaluate Division",
    "example_output": "# Expected output for Evaluate Division",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Evaluate Division\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "400",
    "title": "Nth Digit",
    "titleSlug": "nth-digit",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Nth Digit",
    "example_output": "# Expected output for Nth Digit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Nth Digit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "401",
    "title": "Binary Watch",
    "titleSlug": "binary-watch",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Watch",
    "example_output": "# Expected output for Binary Watch",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Watch\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "402",
    "title": "Remove K Digits",
    "titleSlug": "remove-k-digits",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove K Digits",
    "example_output": "# Expected output for Remove K Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove K Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "403",
    "title": "Frog Jump",
    "titleSlug": "frog-jump",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Frog Jump",
    "example_output": "# Expected output for Frog Jump",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Frog Jump\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "404",
    "title": "Sum of Left Leaves",
    "titleSlug": "sum-of-left-leaves",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Left Leaves",
    "example_output": "# Expected output for Sum of Left Leaves",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Left Leaves\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "405",
    "title": "Convert a Number to Hexadecimal",
    "titleSlug": "convert-a-number-to-hexadecimal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert a Number to Hexadecimal",
    "example_output": "# Expected output for Convert a Number to Hexadecimal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert a Number to Hexadecimal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "406",
    "title": "Queue Reconstruction by Height",
    "titleSlug": "queue-reconstruction-by-height",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Queue Reconstruction by Height",
    "example_output": "# Expected output for Queue Reconstruction by Height",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Queue Reconstruction by Height\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "407",
    "title": "Trapping Rain Water II",
    "titleSlug": "trapping-rain-water-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Trapping Rain Water II",
    "example_output": "# Expected output for Trapping Rain Water II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Trapping Rain Water II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "408",
    "title": "Valid Word Abbreviation",
    "titleSlug": "valid-word-abbreviation",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Word Abbreviation",
    "example_output": "# Expected output for Valid Word Abbreviation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Word Abbreviation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "409",
    "title": "Longest Palindrome",
    "titleSlug": "longest-palindrome",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Palindrome",
    "example_output": "# Expected output for Longest Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Longest Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "410",
    "title": "Split Array Largest Sum",
    "titleSlug": "split-array-largest-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Array Largest Sum",
    "example_output": "# Expected output for Split Array Largest Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Array Largest Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "411",
    "title": "Minimum Unique Word Abbreviation",
    "titleSlug": "minimum-unique-word-abbreviation",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Unique Word Abbreviation",
    "example_output": "# Expected output for Minimum Unique Word Abbreviation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Unique Word Abbreviation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "412",
    "title": "Fizz Buzz",
    "titleSlug": "fizz-buzz",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fizz Buzz",
    "example_output": "# Expected output for Fizz Buzz",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fizz Buzz\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "413",
    "title": "Arithmetic Slices",
    "titleSlug": "arithmetic-slices",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Arithmetic Slices",
    "example_output": "# Expected output for Arithmetic Slices",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Arithmetic Slices\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "414",
    "title": "Third Maximum Number",
    "titleSlug": "third-maximum-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Third Maximum Number",
    "example_output": "# Expected output for Third Maximum Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Third Maximum Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "415",
    "title": "Add Strings",
    "titleSlug": "add-strings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Strings",
    "example_output": "# Expected output for Add Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "416",
    "title": "Partition Equal Subset Sum",
    "titleSlug": "partition-equal-subset-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition Equal Subset Sum",
    "example_output": "# Expected output for Partition Equal Subset Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition Equal Subset Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "417",
    "title": "Pacific Atlantic Water Flow",
    "titleSlug": "pacific-atlantic-water-flow",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pacific Atlantic Water Flow",
    "example_output": "# Expected output for Pacific Atlantic Water Flow",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pacific Atlantic Water Flow\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "418",
    "title": "Sentence Screen Fitting",
    "titleSlug": "sentence-screen-fitting",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sentence Screen Fitting",
    "example_output": "# Expected output for Sentence Screen Fitting",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sentence Screen Fitting\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "419",
    "title": "Battleships in a Board",
    "titleSlug": "battleships-in-a-board",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Battleships in a Board",
    "example_output": "# Expected output for Battleships in a Board",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Battleships in a Board\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "420",
    "title": "Strong Password Checker",
    "titleSlug": "strong-password-checker",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strong Password Checker",
    "example_output": "# Expected output for Strong Password Checker",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strong Password Checker\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "421",
    "title": "Maximum XOR of Two Numbers in an Array",
    "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum XOR of Two Numbers in an Array",
    "example_output": "# Expected output for Maximum XOR of Two Numbers in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum XOR of Two Numbers in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "422",
    "title": "Valid Word Square",
    "titleSlug": "valid-word-square",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Word Square",
    "example_output": "# Expected output for Valid Word Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Word Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "423",
    "title": "Reconstruct Original Digits from English",
    "titleSlug": "reconstruct-original-digits-from-english",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reconstruct Original Digits from English",
    "example_output": "# Expected output for Reconstruct Original Digits from English",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reconstruct Original Digits from English\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "424",
    "title": "Longest Repeating Character Replacement",
    "titleSlug": "longest-repeating-character-replacement",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Repeating Character Replacement",
    "example_output": "# Expected output for Longest Repeating Character Replacement",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Repeating Character Replacement\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "425",
    "title": "Word Squares",
    "titleSlug": "word-squares",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Squares",
    "example_output": "# Expected output for Word Squares",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Squares\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "426",
    "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
    "titleSlug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      },
      {
        "name": "Doubly-Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert Binary Search Tree to Sorted Doubly Linked List",
    "example_output": "# Expected output for Convert Binary Search Tree to Sorted Doubly Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert Binary Search Tree to Sorted Doubly Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "427",
    "title": "Construct Quad Tree",
    "titleSlug": "construct-quad-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Quad Tree",
    "example_output": "# Expected output for Construct Quad Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct Quad Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "428",
    "title": "Serialize and Deserialize N-ary Tree",
    "titleSlug": "serialize-and-deserialize-n-ary-tree",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Serialize and Deserialize N-ary Tree",
    "example_output": "# Expected output for Serialize and Deserialize N-ary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Serialize and Deserialize N-ary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "429",
    "title": "N-ary Tree Level Order Traversal",
    "titleSlug": "n-ary-tree-level-order-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for N-ary Tree Level Order Traversal",
    "example_output": "# Expected output for N-ary Tree Level Order Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"N-ary Tree Level Order Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "430",
    "title": "Flatten a Multilevel Doubly Linked List",
    "titleSlug": "flatten-a-multilevel-doubly-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Doubly-Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flatten a Multilevel Doubly Linked List",
    "example_output": "# Expected output for Flatten a Multilevel Doubly Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flatten a Multilevel Doubly Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "431",
    "title": "Encode N-ary Tree to Binary Tree",
    "titleSlug": "encode-n-ary-tree-to-binary-tree",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Encode N-ary Tree to Binary Tree",
    "example_output": "# Expected output for Encode N-ary Tree to Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Encode N-ary Tree to Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "432",
    "title": "All O`one Data Structure",
    "titleSlug": "all-oone-data-structure",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Doubly-Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All O`one Data Structure",
    "example_output": "# Expected output for All O`one Data Structure",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All O`one Data Structure\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "433",
    "title": "Minimum Genetic Mutation",
    "titleSlug": "minimum-genetic-mutation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Genetic Mutation",
    "example_output": "# Expected output for Minimum Genetic Mutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Genetic Mutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "434",
    "title": "Number of Segments in a String",
    "titleSlug": "number-of-segments-in-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Segments in a String",
    "example_output": "# Expected output for Number of Segments in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Segments in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "435",
    "title": "Non-overlapping Intervals",
    "titleSlug": "non-overlapping-intervals",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Non-overlapping Intervals",
    "example_output": "# Expected output for Non-overlapping Intervals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Non-overlapping Intervals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "436",
    "title": "Find Right Interval",
    "titleSlug": "find-right-interval",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Right Interval",
    "example_output": "# Expected output for Find Right Interval",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Right Interval\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "437",
    "title": "Path Sum III",
    "titleSlug": "path-sum-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path Sum III",
    "example_output": "# Expected output for Path Sum III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path Sum III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "438",
    "title": "Find All Anagrams in a String",
    "titleSlug": "find-all-anagrams-in-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All Anagrams in a String",
    "example_output": "# Expected output for Find All Anagrams in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All Anagrams in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "439",
    "title": "Ternary Expression Parser",
    "titleSlug": "ternary-expression-parser",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ternary Expression Parser",
    "example_output": "# Expected output for Ternary Expression Parser",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Ternary Expression Parser\"."
  },
  {
    "id": "440",
    "title": "K-th Smallest in Lexicographical Order",
    "titleSlug": "k-th-smallest-in-lexicographical-order",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K-th Smallest in Lexicographical Order",
    "example_output": "# Expected output for K-th Smallest in Lexicographical Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K-th Smallest in Lexicographical Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "441",
    "title": "Arranging Coins",
    "titleSlug": "arranging-coins",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Arranging Coins",
    "example_output": "# Expected output for Arranging Coins",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Arranging Coins\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "442",
    "title": "Find All Duplicates in an Array",
    "titleSlug": "find-all-duplicates-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All Duplicates in an Array",
    "example_output": "# Expected output for Find All Duplicates in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All Duplicates in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "443",
    "title": "String Compression",
    "titleSlug": "string-compression",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for String Compression",
    "example_output": "# Expected output for String Compression",
    "status": "TO_DO",
    "description": "Solve the problem titled \"String Compression\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "444",
    "title": "Sequence Reconstruction",
    "titleSlug": "sequence-reconstruction",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sequence Reconstruction",
    "example_output": "# Expected output for Sequence Reconstruction",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sequence Reconstruction\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "446",
    "title": "Arithmetic Slices II - Subsequence",
    "titleSlug": "arithmetic-slices-ii-subsequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Arithmetic Slices II - Subsequence",
    "example_output": "# Expected output for Arithmetic Slices II - Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Arithmetic Slices II - Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "447",
    "title": "Number of Boomerangs",
    "titleSlug": "number-of-boomerangs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Boomerangs",
    "example_output": "# Expected output for Number of Boomerangs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Boomerangs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "448",
    "title": "Find All Numbers Disappeared in an Array",
    "titleSlug": "find-all-numbers-disappeared-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All Numbers Disappeared in an Array",
    "example_output": "# Expected output for Find All Numbers Disappeared in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All Numbers Disappeared in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "449",
    "title": "Serialize and Deserialize BST",
    "titleSlug": "serialize-and-deserialize-bst",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Serialize and Deserialize BST",
    "example_output": "# Expected output for Serialize and Deserialize BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Serialize and Deserialize BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "450",
    "title": "Delete Node in a BST",
    "titleSlug": "delete-node-in-a-bst",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Node in a BST",
    "example_output": "# Expected output for Delete Node in a BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Node in a BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "451",
    "title": "Sort Characters By Frequency",
    "titleSlug": "sort-characters-by-frequency",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Bucket Sort"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Characters By Frequency",
    "example_output": "# Expected output for Sort Characters By Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Characters By Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "452",
    "title": "Minimum Number of Arrows to Burst Balloons",
    "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Arrows to Burst Balloons",
    "example_output": "# Expected output for Minimum Number of Arrows to Burst Balloons",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Arrows to Burst Balloons\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "453",
    "title": "Minimum Moves to Equal Array Elements",
    "titleSlug": "minimum-moves-to-equal-array-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Moves to Equal Array Elements",
    "example_output": "# Expected output for Minimum Moves to Equal Array Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Moves to Equal Array Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "454",
    "title": "4Sum II",
    "titleSlug": "4sum-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 4Sum II",
    "example_output": "# Expected output for 4Sum II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"4Sum II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "455",
    "title": "Assign Cookies",
    "titleSlug": "assign-cookies",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Assign Cookies",
    "example_output": "# Expected output for Assign Cookies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Assign Cookies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "456",
    "title": "132 Pattern",
    "titleSlug": "132-pattern",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 132 Pattern",
    "example_output": "# Expected output for 132 Pattern",
    "status": "TO_DO",
    "description": "Solve the problem titled \"132 Pattern\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "457",
    "title": "Circular Array Loop",
    "titleSlug": "circular-array-loop",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Circular Array Loop",
    "example_output": "# Expected output for Circular Array Loop",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Circular Array Loop\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "458",
    "title": "Poor Pigs",
    "titleSlug": "poor-pigs",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Poor Pigs",
    "example_output": "# Expected output for Poor Pigs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Poor Pigs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "459",
    "title": "Repeated Substring Pattern",
    "titleSlug": "repeated-substring-pattern",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Repeated Substring Pattern",
    "example_output": "# Expected output for Repeated Substring Pattern",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Repeated Substring Pattern\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "460",
    "title": "LFU Cache",
    "titleSlug": "lfu-cache",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Doubly-Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for LFU Cache",
    "example_output": "# Expected output for LFU Cache",
    "status": "TO_DO",
    "description": "Solve the problem titled \"LFU Cache\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "461",
    "title": "Hamming Distance",
    "titleSlug": "hamming-distance",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Hamming Distance",
    "example_output": "# Expected output for Hamming Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Hamming Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "462",
    "title": "Minimum Moves to Equal Array Elements II",
    "titleSlug": "minimum-moves-to-equal-array-elements-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Moves to Equal Array Elements II",
    "example_output": "# Expected output for Minimum Moves to Equal Array Elements II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Moves to Equal Array Elements II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "463",
    "title": "Island Perimeter",
    "titleSlug": "island-perimeter",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Island Perimeter",
    "example_output": "# Expected output for Island Perimeter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Island Perimeter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "464",
    "title": "Can I Win",
    "titleSlug": "can-i-win",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Game Theory"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Can I Win",
    "example_output": "# Expected output for Can I Win",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Can I Win\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "465",
    "title": "Optimal Account Balancing",
    "titleSlug": "optimal-account-balancing",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Optimal Account Balancing",
    "example_output": "# Expected output for Optimal Account Balancing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Optimal Account Balancing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "466",
    "title": "Count The Repetitions",
    "titleSlug": "count-the-repetitions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count The Repetitions",
    "example_output": "# Expected output for Count The Repetitions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count The Repetitions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "467",
    "title": "Unique Substrings in Wraparound String",
    "titleSlug": "unique-substrings-in-wraparound-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Substrings in Wraparound String",
    "example_output": "# Expected output for Unique Substrings in Wraparound String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Substrings in Wraparound String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "468",
    "title": "Validate IP Address",
    "titleSlug": "validate-ip-address",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Validate IP Address",
    "example_output": "# Expected output for Validate IP Address",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Validate IP Address\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "469",
    "title": "Convex Polygon",
    "titleSlug": "convex-polygon",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convex Polygon",
    "example_output": "# Expected output for Convex Polygon",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convex Polygon\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "470",
    "title": "Implement Rand10() Using Rand7()",
    "titleSlug": "implement-rand10-using-rand7",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Rejection Sampling"
      },
      {
        "name": "Randomized"
      },
      {
        "name": "Probability and Statistics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Implement Rand10() Using Rand7()",
    "example_output": "# Expected output for Implement Rand10() Using Rand7()",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Implement Rand10() Using Rand7()\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "471",
    "title": "Encode String with Shortest Length",
    "titleSlug": "encode-string-with-shortest-length",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Encode String with Shortest Length",
    "example_output": "# Expected output for Encode String with Shortest Length",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Encode String with Shortest Length\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "472",
    "title": "Concatenated Words",
    "titleSlug": "concatenated-words",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Concatenated Words",
    "example_output": "# Expected output for Concatenated Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Concatenated Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "473",
    "title": "Matchsticks to Square",
    "titleSlug": "matchsticks-to-square",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Matchsticks to Square",
    "example_output": "# Expected output for Matchsticks to Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Matchsticks to Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "474",
    "title": "Ones and Zeroes",
    "titleSlug": "ones-and-zeroes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ones and Zeroes",
    "example_output": "# Expected output for Ones and Zeroes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ones and Zeroes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "475",
    "title": "Heaters",
    "titleSlug": "heaters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Heaters",
    "example_output": "# Expected output for Heaters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Heaters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "476",
    "title": "Number Complement",
    "titleSlug": "number-complement",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number Complement",
    "example_output": "# Expected output for Number Complement",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number Complement\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "477",
    "title": "Total Hamming Distance",
    "titleSlug": "total-hamming-distance",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Total Hamming Distance",
    "example_output": "# Expected output for Total Hamming Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Total Hamming Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "478",
    "title": "Generate Random Point in a Circle",
    "titleSlug": "generate-random-point-in-a-circle",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Rejection Sampling"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Generate Random Point in a Circle",
    "example_output": "# Expected output for Generate Random Point in a Circle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Generate Random Point in a Circle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "479",
    "title": "Largest Palindrome Product",
    "titleSlug": "largest-palindrome-product",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Palindrome Product",
    "example_output": "# Expected output for Largest Palindrome Product",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Largest Palindrome Product\". Return the result based on the transformation rules involved."
  },
  {
    "id": "480",
    "title": "Sliding Window Median",
    "titleSlug": "sliding-window-median",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sliding Window Median",
    "example_output": "# Expected output for Sliding Window Median",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sliding Window Median\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "481",
    "title": "Magical String",
    "titleSlug": "magical-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Magical String",
    "example_output": "# Expected output for Magical String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Magical String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "482",
    "title": "License Key Formatting",
    "titleSlug": "license-key-formatting",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for License Key Formatting",
    "example_output": "# Expected output for License Key Formatting",
    "status": "TO_DO",
    "description": "Solve the problem titled \"License Key Formatting\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "483",
    "title": "Smallest Good Base",
    "titleSlug": "smallest-good-base",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Good Base",
    "example_output": "# Expected output for Smallest Good Base",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Good Base\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "484",
    "title": "Find Permutation",
    "titleSlug": "find-permutation",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Permutation",
    "example_output": "# Expected output for Find Permutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Permutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "485",
    "title": "Max Consecutive Ones",
    "titleSlug": "max-consecutive-ones",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Consecutive Ones",
    "example_output": "# Expected output for Max Consecutive Ones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Consecutive Ones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "486",
    "title": "Predict the Winner",
    "titleSlug": "predict-the-winner",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Predict the Winner",
    "example_output": "# Expected output for Predict the Winner",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Predict the Winner\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "487",
    "title": "Max Consecutive Ones II",
    "titleSlug": "max-consecutive-ones-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Consecutive Ones II",
    "example_output": "# Expected output for Max Consecutive Ones II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Consecutive Ones II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "488",
    "title": "Zuma Game",
    "titleSlug": "zuma-game",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Zuma Game",
    "example_output": "# Expected output for Zuma Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Zuma Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "489",
    "title": "Robot Room Cleaner",
    "titleSlug": "robot-room-cleaner",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Backtracking"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Robot Room Cleaner",
    "example_output": "# Expected output for Robot Room Cleaner",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Robot Room Cleaner\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "490",
    "title": "The Maze",
    "titleSlug": "the-maze",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Maze",
    "example_output": "# Expected output for The Maze",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Maze\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "491",
    "title": "Non-decreasing Subsequences",
    "titleSlug": "non-decreasing-subsequences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Non-decreasing Subsequences",
    "example_output": "# Expected output for Non-decreasing Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Non-decreasing Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "492",
    "title": "Construct the Rectangle",
    "titleSlug": "construct-the-rectangle",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct the Rectangle",
    "example_output": "# Expected output for Construct the Rectangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct the Rectangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "493",
    "title": "Reverse Pairs",
    "titleSlug": "reverse-pairs",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Pairs",
    "example_output": "# Expected output for Reverse Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "494",
    "title": "Target Sum",
    "titleSlug": "target-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Target Sum",
    "example_output": "# Expected output for Target Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Target Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "495",
    "title": "Teemo Attacking",
    "titleSlug": "teemo-attacking",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Teemo Attacking",
    "example_output": "# Expected output for Teemo Attacking",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Teemo Attacking\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "496",
    "title": "Next Greater Element I",
    "titleSlug": "next-greater-element-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Greater Element I",
    "example_output": "# Expected output for Next Greater Element I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Next Greater Element I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "497",
    "title": "Random Point in Non-overlapping Rectangles",
    "titleSlug": "random-point-in-non-overlapping-rectangles",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Reservoir Sampling"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Ordered Set"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Random Point in Non-overlapping Rectangles",
    "example_output": "# Expected output for Random Point in Non-overlapping Rectangles",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Random Point in Non-overlapping Rectangles\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "498",
    "title": "Diagonal Traverse",
    "titleSlug": "diagonal-traverse",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Diagonal Traverse",
    "example_output": "# Expected output for Diagonal Traverse",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Diagonal Traverse\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "499",
    "title": "The Maze III",
    "titleSlug": "the-maze-iii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Maze III",
    "example_output": "# Expected output for The Maze III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Maze III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "500",
    "title": "Keyboard Row",
    "titleSlug": "keyboard-row",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Keyboard Row",
    "example_output": "# Expected output for Keyboard Row",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Keyboard Row\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "501",
    "title": "Find Mode in Binary Search Tree",
    "titleSlug": "find-mode-in-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Mode in Binary Search Tree",
    "example_output": "# Expected output for Find Mode in Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Mode in Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "502",
    "title": "IPO",
    "titleSlug": "ipo",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for IPO",
    "example_output": "# Expected output for IPO",
    "status": "TO_DO",
    "description": "Solve the problem titled \"IPO\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "503",
    "title": "Next Greater Element II",
    "titleSlug": "next-greater-element-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Greater Element II",
    "example_output": "# Expected output for Next Greater Element II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Next Greater Element II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "504",
    "title": "Base 7",
    "titleSlug": "base-7",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Base 7",
    "example_output": "# Expected output for Base 7",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Base 7\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "505",
    "title": "The Maze II",
    "titleSlug": "the-maze-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Maze II",
    "example_output": "# Expected output for The Maze II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Maze II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "506",
    "title": "Relative Ranks",
    "titleSlug": "relative-ranks",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Relative Ranks",
    "example_output": "# Expected output for Relative Ranks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Relative Ranks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "507",
    "title": "Perfect Number",
    "titleSlug": "perfect-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Perfect Number",
    "example_output": "# Expected output for Perfect Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Perfect Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "508",
    "title": "Most Frequent Subtree Sum",
    "titleSlug": "most-frequent-subtree-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Frequent Subtree Sum",
    "example_output": "# Expected output for Most Frequent Subtree Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Frequent Subtree Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "509",
    "title": "Fibonacci Number",
    "titleSlug": "fibonacci-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fibonacci Number",
    "example_output": "# Expected output for Fibonacci Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fibonacci Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "510",
    "title": "Inorder Successor in BST II",
    "titleSlug": "inorder-successor-in-bst-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Inorder Successor in BST II",
    "example_output": "# Expected output for Inorder Successor in BST II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Inorder Successor in BST II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "511",
    "title": "Game Play Analysis I",
    "titleSlug": "game-play-analysis-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Game Play Analysis I",
    "example_output": "# Expected output for Game Play Analysis I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Game Play Analysis I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "512",
    "title": "Game Play Analysis II",
    "titleSlug": "game-play-analysis-ii",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Game Play Analysis II",
    "example_output": "# Expected output for Game Play Analysis II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Game Play Analysis II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "513",
    "title": "Find Bottom Left Tree Value",
    "titleSlug": "find-bottom-left-tree-value",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Bottom Left Tree Value",
    "example_output": "# Expected output for Find Bottom Left Tree Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Bottom Left Tree Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "514",
    "title": "Freedom Trail",
    "titleSlug": "freedom-trail",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Freedom Trail",
    "example_output": "# Expected output for Freedom Trail",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Freedom Trail\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "515",
    "title": "Find Largest Value in Each Tree Row",
    "titleSlug": "find-largest-value-in-each-tree-row",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Largest Value in Each Tree Row",
    "example_output": "# Expected output for Find Largest Value in Each Tree Row",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Largest Value in Each Tree Row\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "516",
    "title": "Longest Palindromic Subsequence",
    "titleSlug": "longest-palindromic-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Palindromic Subsequence",
    "example_output": "# Expected output for Longest Palindromic Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Palindromic Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "517",
    "title": "Super Washing Machines",
    "titleSlug": "super-washing-machines",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Super Washing Machines",
    "example_output": "# Expected output for Super Washing Machines",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Super Washing Machines\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "518",
    "title": "Coin Change II",
    "titleSlug": "coin-change-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Coin Change II",
    "example_output": "# Expected output for Coin Change II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Coin Change II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "519",
    "title": "Random Flip Matrix",
    "titleSlug": "random-flip-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Reservoir Sampling"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Random Flip Matrix",
    "example_output": "# Expected output for Random Flip Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Random Flip Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "520",
    "title": "Detect Capital",
    "titleSlug": "detect-capital",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Detect Capital",
    "example_output": "# Expected output for Detect Capital",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Detect Capital\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "521",
    "title": "Longest Uncommon Subsequence I",
    "titleSlug": "longest-uncommon-subsequence-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Uncommon Subsequence I",
    "example_output": "# Expected output for Longest Uncommon Subsequence I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Uncommon Subsequence I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "522",
    "title": "Longest Uncommon Subsequence II",
    "titleSlug": "longest-uncommon-subsequence-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Uncommon Subsequence II",
    "example_output": "# Expected output for Longest Uncommon Subsequence II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Uncommon Subsequence II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "523",
    "title": "Continuous Subarray Sum",
    "titleSlug": "continuous-subarray-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Continuous Subarray Sum",
    "example_output": "# Expected output for Continuous Subarray Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Continuous Subarray Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "524",
    "title": "Longest Word in Dictionary through Deleting",
    "titleSlug": "longest-word-in-dictionary-through-deleting",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Word in Dictionary through Deleting",
    "example_output": "# Expected output for Longest Word in Dictionary through Deleting",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Word in Dictionary through Deleting\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "525",
    "title": "Contiguous Array",
    "titleSlug": "contiguous-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Contiguous Array",
    "example_output": "# Expected output for Contiguous Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Contiguous Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "526",
    "title": "Beautiful Arrangement",
    "titleSlug": "beautiful-arrangement",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Beautiful Arrangement",
    "example_output": "# Expected output for Beautiful Arrangement",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Beautiful Arrangement\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "527",
    "title": "Word Abbreviation",
    "titleSlug": "word-abbreviation",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Abbreviation",
    "example_output": "# Expected output for Word Abbreviation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Abbreviation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "528",
    "title": "Random Pick with Weight",
    "titleSlug": "random-pick-with-weight",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Random Pick with Weight",
    "example_output": "# Expected output for Random Pick with Weight",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Random Pick with Weight\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "529",
    "title": "Minesweeper",
    "titleSlug": "minesweeper",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minesweeper",
    "example_output": "# Expected output for Minesweeper",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minesweeper\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "530",
    "title": "Minimum Absolute Difference in BST",
    "titleSlug": "minimum-absolute-difference-in-bst",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Absolute Difference in BST",
    "example_output": "# Expected output for Minimum Absolute Difference in BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Absolute Difference in BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "531",
    "title": "Lonely Pixel I",
    "titleSlug": "lonely-pixel-i",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lonely Pixel I",
    "example_output": "# Expected output for Lonely Pixel I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lonely Pixel I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "532",
    "title": "K-diff Pairs in an Array",
    "titleSlug": "k-diff-pairs-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K-diff Pairs in an Array",
    "example_output": "# Expected output for K-diff Pairs in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K-diff Pairs in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "533",
    "title": "Lonely Pixel II",
    "titleSlug": "lonely-pixel-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lonely Pixel II",
    "example_output": "# Expected output for Lonely Pixel II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lonely Pixel II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "534",
    "title": "Game Play Analysis III",
    "titleSlug": "game-play-analysis-iii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Game Play Analysis III",
    "example_output": "# Expected output for Game Play Analysis III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Game Play Analysis III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "535",
    "title": "Encode and Decode TinyURL",
    "titleSlug": "encode-and-decode-tinyurl",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Encode and Decode TinyURL",
    "example_output": "# Expected output for Encode and Decode TinyURL",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Encode and Decode TinyURL\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "536",
    "title": "Construct Binary Tree from String",
    "titleSlug": "construct-binary-tree-from-string",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Binary Tree from String",
    "example_output": "# Expected output for Construct Binary Tree from String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct Binary Tree from String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "537",
    "title": "Complex Number Multiplication",
    "titleSlug": "complex-number-multiplication",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Complex Number Multiplication",
    "example_output": "# Expected output for Complex Number Multiplication",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Complex Number Multiplication\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "538",
    "title": "Convert BST to Greater Tree",
    "titleSlug": "convert-bst-to-greater-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert BST to Greater Tree",
    "example_output": "# Expected output for Convert BST to Greater Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert BST to Greater Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "539",
    "title": "Minimum Time Difference",
    "titleSlug": "minimum-time-difference",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time Difference",
    "example_output": "# Expected output for Minimum Time Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "540",
    "title": "Single Element in a Sorted Array",
    "titleSlug": "single-element-in-a-sorted-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Single Element in a Sorted Array",
    "example_output": "# Expected output for Single Element in a Sorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Single Element in a Sorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "542",
    "title": "01 Matrix",
    "titleSlug": "01-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 01 Matrix",
    "example_output": "# Expected output for 01 Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"01 Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "543",
    "title": "Diameter of Binary Tree",
    "titleSlug": "diameter-of-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Diameter of Binary Tree",
    "example_output": "# Expected output for Diameter of Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Diameter of Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "544",
    "title": "Output Contest Matches",
    "titleSlug": "output-contest-matches",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Output Contest Matches",
    "example_output": "# Expected output for Output Contest Matches",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Output Contest Matches\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "545",
    "title": "Boundary of Binary Tree",
    "titleSlug": "boundary-of-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Boundary of Binary Tree",
    "example_output": "# Expected output for Boundary of Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Boundary of Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "546",
    "title": "Remove Boxes",
    "titleSlug": "remove-boxes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Boxes",
    "example_output": "# Expected output for Remove Boxes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Boxes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "547",
    "title": "Number of Provinces",
    "titleSlug": "number-of-provinces",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Provinces",
    "example_output": "# Expected output for Number of Provinces",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Provinces\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "548",
    "title": "Split Array with Equal Sum",
    "titleSlug": "split-array-with-equal-sum",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Array with Equal Sum",
    "example_output": "# Expected output for Split Array with Equal Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Array with Equal Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "549",
    "title": "Binary Tree Longest Consecutive Sequence II",
    "titleSlug": "binary-tree-longest-consecutive-sequence-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Longest Consecutive Sequence II",
    "example_output": "# Expected output for Binary Tree Longest Consecutive Sequence II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Longest Consecutive Sequence II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "550",
    "title": "Game Play Analysis IV",
    "titleSlug": "game-play-analysis-iv",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Game Play Analysis IV",
    "example_output": "# Expected output for Game Play Analysis IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Game Play Analysis IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "551",
    "title": "Student Attendance Record I",
    "titleSlug": "student-attendance-record-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Student Attendance Record I",
    "example_output": "# Expected output for Student Attendance Record I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Student Attendance Record I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "552",
    "title": "Student Attendance Record II",
    "titleSlug": "student-attendance-record-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Student Attendance Record II",
    "example_output": "# Expected output for Student Attendance Record II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Student Attendance Record II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "553",
    "title": "Optimal Division",
    "titleSlug": "optimal-division",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Optimal Division",
    "example_output": "# Expected output for Optimal Division",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Optimal Division\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "554",
    "title": "Brick Wall",
    "titleSlug": "brick-wall",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Brick Wall",
    "example_output": "# Expected output for Brick Wall",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Brick Wall\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "555",
    "title": "Split Concatenated Strings",
    "titleSlug": "split-concatenated-strings",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Concatenated Strings",
    "example_output": "# Expected output for Split Concatenated Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Concatenated Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "556",
    "title": "Next Greater Element III",
    "titleSlug": "next-greater-element-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Greater Element III",
    "example_output": "# Expected output for Next Greater Element III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Next Greater Element III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "557",
    "title": "Reverse Words in a String III",
    "titleSlug": "reverse-words-in-a-string-iii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Words in a String III",
    "example_output": "# Expected output for Reverse Words in a String III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Words in a String III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "558",
    "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
    "titleSlug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Logical OR of Two Binary Grids Represented as Quad-Trees",
    "example_output": "# Expected output for Logical OR of Two Binary Grids Represented as Quad-Trees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Logical OR of Two Binary Grids Represented as Quad-Trees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "559",
    "title": "Maximum Depth of N-ary Tree",
    "titleSlug": "maximum-depth-of-n-ary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Depth of N-ary Tree",
    "example_output": "# Expected output for Maximum Depth of N-ary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Depth of N-ary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "560",
    "title": "Subarray Sum Equals K",
    "titleSlug": "subarray-sum-equals-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subarray Sum Equals K",
    "example_output": "# Expected output for Subarray Sum Equals K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subarray Sum Equals K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "561",
    "title": "Array Partition",
    "titleSlug": "array-partition",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array Partition",
    "example_output": "# Expected output for Array Partition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array Partition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "562",
    "title": "Longest Line of Consecutive One in Matrix",
    "titleSlug": "longest-line-of-consecutive-one-in-matrix",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Line of Consecutive One in Matrix",
    "example_output": "# Expected output for Longest Line of Consecutive One in Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Longest Line of Consecutive One in Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "563",
    "title": "Binary Tree Tilt",
    "titleSlug": "binary-tree-tilt",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Tilt",
    "example_output": "# Expected output for Binary Tree Tilt",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Tilt\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "564",
    "title": "Find the Closest Palindrome",
    "titleSlug": "find-the-closest-palindrome",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Closest Palindrome",
    "example_output": "# Expected output for Find the Closest Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Find the Closest Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "565",
    "title": "Array Nesting",
    "titleSlug": "array-nesting",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array Nesting",
    "example_output": "# Expected output for Array Nesting",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array Nesting\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "566",
    "title": "Reshape the Matrix",
    "titleSlug": "reshape-the-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reshape the Matrix",
    "example_output": "# Expected output for Reshape the Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Reshape the Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "567",
    "title": "Permutation in String",
    "titleSlug": "permutation-in-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Permutation in String",
    "example_output": "# Expected output for Permutation in String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Permutation in String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "568",
    "title": "Maximum Vacation Days",
    "titleSlug": "maximum-vacation-days",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Vacation Days",
    "example_output": "# Expected output for Maximum Vacation Days",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Vacation Days\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "569",
    "title": "Median Employee Salary",
    "titleSlug": "median-employee-salary",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Median Employee Salary",
    "example_output": "# Expected output for Median Employee Salary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Median Employee Salary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "570",
    "title": "Managers with at Least 5 Direct Reports",
    "titleSlug": "managers-with-at-least-5-direct-reports",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Managers with at Least 5 Direct Reports",
    "example_output": "# Expected output for Managers with at Least 5 Direct Reports",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Managers with at Least 5 Direct Reports\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "571",
    "title": "Find Median Given Frequency of Numbers",
    "titleSlug": "find-median-given-frequency-of-numbers",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Median Given Frequency of Numbers",
    "example_output": "# Expected output for Find Median Given Frequency of Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Median Given Frequency of Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "572",
    "title": "Subtree of Another Tree",
    "titleSlug": "subtree-of-another-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "String Matching"
      },
      {
        "name": "Binary Tree"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subtree of Another Tree",
    "example_output": "# Expected output for Subtree of Another Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subtree of Another Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "573",
    "title": "Squirrel Simulation",
    "titleSlug": "squirrel-simulation",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Squirrel Simulation",
    "example_output": "# Expected output for Squirrel Simulation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Squirrel Simulation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "574",
    "title": "Winning Candidate",
    "titleSlug": "winning-candidate",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Winning Candidate",
    "example_output": "# Expected output for Winning Candidate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Winning Candidate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "575",
    "title": "Distribute Candies",
    "titleSlug": "distribute-candies",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distribute Candies",
    "example_output": "# Expected output for Distribute Candies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distribute Candies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "576",
    "title": "Out of Boundary Paths",
    "titleSlug": "out-of-boundary-paths",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Out of Boundary Paths",
    "example_output": "# Expected output for Out of Boundary Paths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Out of Boundary Paths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "577",
    "title": "Employee Bonus",
    "titleSlug": "employee-bonus",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Employee Bonus",
    "example_output": "# Expected output for Employee Bonus",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Employee Bonus\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "578",
    "title": "Get Highest Answer Rate Question",
    "titleSlug": "get-highest-answer-rate-question",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Get Highest Answer Rate Question",
    "example_output": "# Expected output for Get Highest Answer Rate Question",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Get Highest Answer Rate Question\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "579",
    "title": "Find Cumulative Salary of an Employee",
    "titleSlug": "find-cumulative-salary-of-an-employee",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Cumulative Salary of an Employee",
    "example_output": "# Expected output for Find Cumulative Salary of an Employee",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Cumulative Salary of an Employee\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "580",
    "title": "Count Student Number in Departments",
    "titleSlug": "count-student-number-in-departments",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Student Number in Departments",
    "example_output": "# Expected output for Count Student Number in Departments",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Student Number in Departments\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "581",
    "title": "Shortest Unsorted Continuous Subarray",
    "titleSlug": "shortest-unsorted-continuous-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Unsorted Continuous Subarray",
    "example_output": "# Expected output for Shortest Unsorted Continuous Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Unsorted Continuous Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "582",
    "title": "Kill Process",
    "titleSlug": "kill-process",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kill Process",
    "example_output": "# Expected output for Kill Process",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kill Process\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "583",
    "title": "Delete Operation for Two Strings",
    "titleSlug": "delete-operation-for-two-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Operation for Two Strings",
    "example_output": "# Expected output for Delete Operation for Two Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Operation for Two Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "584",
    "title": "Find Customer Referee",
    "titleSlug": "find-customer-referee",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Customer Referee",
    "example_output": "# Expected output for Find Customer Referee",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Customer Referee\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "585",
    "title": "Investments in 2016",
    "titleSlug": "investments-in-2016",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Investments in 2016",
    "example_output": "# Expected output for Investments in 2016",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Investments in 2016\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "586",
    "title": "Customer Placing the Largest Number of Orders",
    "titleSlug": "customer-placing-the-largest-number-of-orders",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Customer Placing the Largest Number of Orders",
    "example_output": "# Expected output for Customer Placing the Largest Number of Orders",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Customer Placing the Largest Number of Orders\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "587",
    "title": "Erect the Fence",
    "titleSlug": "erect-the-fence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Erect the Fence",
    "example_output": "# Expected output for Erect the Fence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Erect the Fence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "588",
    "title": "Design In-Memory File System",
    "titleSlug": "design-in-memory-file-system",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design In-Memory File System",
    "example_output": "# Expected output for Design In-Memory File System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design In-Memory File System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "589",
    "title": "N-ary Tree Preorder Traversal",
    "titleSlug": "n-ary-tree-preorder-traversal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for N-ary Tree Preorder Traversal",
    "example_output": "# Expected output for N-ary Tree Preorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"N-ary Tree Preorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "590",
    "title": "N-ary Tree Postorder Traversal",
    "titleSlug": "n-ary-tree-postorder-traversal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for N-ary Tree Postorder Traversal",
    "example_output": "# Expected output for N-ary Tree Postorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"N-ary Tree Postorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "591",
    "title": "Tag Validator",
    "titleSlug": "tag-validator",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tag Validator",
    "example_output": "# Expected output for Tag Validator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tag Validator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "592",
    "title": "Fraction Addition and Subtraction",
    "titleSlug": "fraction-addition-and-subtraction",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fraction Addition and Subtraction",
    "example_output": "# Expected output for Fraction Addition and Subtraction",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fraction Addition and Subtraction\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "593",
    "title": "Valid Square",
    "titleSlug": "valid-square",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Square",
    "example_output": "# Expected output for Valid Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "594",
    "title": "Longest Harmonious Subsequence",
    "titleSlug": "longest-harmonious-subsequence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Harmonious Subsequence",
    "example_output": "# Expected output for Longest Harmonious Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Harmonious Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "595",
    "title": "Big Countries",
    "titleSlug": "big-countries",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Big Countries",
    "example_output": "# Expected output for Big Countries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Big Countries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "596",
    "title": "Classes With at Least 5 Students",
    "titleSlug": "classes-with-at-least-5-students",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Classes With at Least 5 Students",
    "example_output": "# Expected output for Classes With at Least 5 Students",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Classes With at Least 5 Students\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "597",
    "title": "Friend Requests I: Overall Acceptance Rate",
    "titleSlug": "friend-requests-i-overall-acceptance-rate",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Friend Requests I: Overall Acceptance Rate",
    "example_output": "# Expected output for Friend Requests I: Overall Acceptance Rate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Friend Requests I: Overall Acceptance Rate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "598",
    "title": "Range Addition II",
    "titleSlug": "range-addition-ii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Addition II",
    "example_output": "# Expected output for Range Addition II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Addition II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "599",
    "title": "Minimum Index Sum of Two Lists",
    "titleSlug": "minimum-index-sum-of-two-lists",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Index Sum of Two Lists",
    "example_output": "# Expected output for Minimum Index Sum of Two Lists",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Index Sum of Two Lists\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "600",
    "title": "Non-negative Integers without Consecutive Ones",
    "titleSlug": "non-negative-integers-without-consecutive-ones",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Non-negative Integers without Consecutive Ones",
    "example_output": "# Expected output for Non-negative Integers without Consecutive Ones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Non-negative Integers without Consecutive Ones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "601",
    "title": "Human Traffic of Stadium",
    "titleSlug": "human-traffic-of-stadium",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Human Traffic of Stadium",
    "example_output": "# Expected output for Human Traffic of Stadium",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Human Traffic of Stadium\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "602",
    "title": "Friend Requests II: Who Has the Most Friends",
    "titleSlug": "friend-requests-ii-who-has-the-most-friends",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Friend Requests II: Who Has the Most Friends",
    "example_output": "# Expected output for Friend Requests II: Who Has the Most Friends",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Friend Requests II: Who Has the Most Friends\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "603",
    "title": "Consecutive Available Seats",
    "titleSlug": "consecutive-available-seats",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Consecutive Available Seats",
    "example_output": "# Expected output for Consecutive Available Seats",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Consecutive Available Seats\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "604",
    "title": "Design Compressed String Iterator",
    "titleSlug": "design-compressed-string-iterator",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Compressed String Iterator",
    "example_output": "# Expected output for Design Compressed String Iterator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Compressed String Iterator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "605",
    "title": "Can Place Flowers",
    "titleSlug": "can-place-flowers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Can Place Flowers",
    "example_output": "# Expected output for Can Place Flowers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Can Place Flowers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "606",
    "title": "Construct String from Binary Tree",
    "titleSlug": "construct-string-from-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct String from Binary Tree",
    "example_output": "# Expected output for Construct String from Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct String from Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "607",
    "title": "Sales Person",
    "titleSlug": "sales-person",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sales Person",
    "example_output": "# Expected output for Sales Person",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sales Person\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "608",
    "title": "Tree Node",
    "titleSlug": "tree-node",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tree Node",
    "example_output": "# Expected output for Tree Node",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tree Node\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "609",
    "title": "Find Duplicate File in System",
    "titleSlug": "find-duplicate-file-in-system",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Duplicate File in System",
    "example_output": "# Expected output for Find Duplicate File in System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Duplicate File in System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "610",
    "title": "Triangle Judgement",
    "titleSlug": "triangle-judgement",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Triangle Judgement",
    "example_output": "# Expected output for Triangle Judgement",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Triangle Judgement\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "611",
    "title": "Valid Triangle Number",
    "titleSlug": "valid-triangle-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Triangle Number",
    "example_output": "# Expected output for Valid Triangle Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Triangle Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "612",
    "title": "Shortest Distance in a Plane",
    "titleSlug": "shortest-distance-in-a-plane",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Distance in a Plane",
    "example_output": "# Expected output for Shortest Distance in a Plane",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Distance in a Plane\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "613",
    "title": "Shortest Distance in a Line",
    "titleSlug": "shortest-distance-in-a-line",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Distance in a Line",
    "example_output": "# Expected output for Shortest Distance in a Line",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Distance in a Line\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "614",
    "title": "Second Degree Follower",
    "titleSlug": "second-degree-follower",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Second Degree Follower",
    "example_output": "# Expected output for Second Degree Follower",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Second Degree Follower\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "615",
    "title": "Average Salary: Departments VS Company",
    "titleSlug": "average-salary-departments-vs-company",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Average Salary: Departments VS Company",
    "example_output": "# Expected output for Average Salary: Departments VS Company",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Average Salary: Departments VS Company\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "616",
    "title": "Add Bold Tag in String",
    "titleSlug": "add-bold-tag-in-string",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Bold Tag in String",
    "example_output": "# Expected output for Add Bold Tag in String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Bold Tag in String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "617",
    "title": "Merge Two Binary Trees",
    "titleSlug": "merge-two-binary-trees",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Two Binary Trees",
    "example_output": "# Expected output for Merge Two Binary Trees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge Two Binary Trees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "618",
    "title": "Students Report By Geography",
    "titleSlug": "students-report-by-geography",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Students Report By Geography",
    "example_output": "# Expected output for Students Report By Geography",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Students Report By Geography\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "619",
    "title": "Biggest Single Number",
    "titleSlug": "biggest-single-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Biggest Single Number",
    "example_output": "# Expected output for Biggest Single Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Biggest Single Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "620",
    "title": "Not Boring Movies",
    "titleSlug": "not-boring-movies",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Not Boring Movies",
    "example_output": "# Expected output for Not Boring Movies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Not Boring Movies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "621",
    "title": "Task Scheduler",
    "titleSlug": "task-scheduler",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Task Scheduler",
    "example_output": "# Expected output for Task Scheduler",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Task Scheduler\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "622",
    "title": "Design Circular Queue",
    "titleSlug": "design-circular-queue",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Circular Queue",
    "example_output": "# Expected output for Design Circular Queue",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Circular Queue\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "623",
    "title": "Add One Row to Tree",
    "titleSlug": "add-one-row-to-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add One Row to Tree",
    "example_output": "# Expected output for Add One Row to Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add One Row to Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "624",
    "title": "Maximum Distance in Arrays",
    "titleSlug": "maximum-distance-in-arrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Distance in Arrays",
    "example_output": "# Expected output for Maximum Distance in Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Distance in Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "625",
    "title": "Minimum Factorization",
    "titleSlug": "minimum-factorization",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Factorization",
    "example_output": "# Expected output for Minimum Factorization",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Factorization\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "626",
    "title": "Exchange Seats",
    "titleSlug": "exchange-seats",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Exchange Seats",
    "example_output": "# Expected output for Exchange Seats",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Exchange Seats\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "627",
    "title": "Swap Salary",
    "titleSlug": "swap-salary",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Swap Salary",
    "example_output": "# Expected output for Swap Salary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Swap Salary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "628",
    "title": "Maximum Product of Three Numbers",
    "titleSlug": "maximum-product-of-three-numbers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product of Three Numbers",
    "example_output": "# Expected output for Maximum Product of Three Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product of Three Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "629",
    "title": "K Inverse Pairs Array",
    "titleSlug": "k-inverse-pairs-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K Inverse Pairs Array",
    "example_output": "# Expected output for K Inverse Pairs Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K Inverse Pairs Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "630",
    "title": "Course Schedule III",
    "titleSlug": "course-schedule-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Course Schedule III",
    "example_output": "# Expected output for Course Schedule III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Course Schedule III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "631",
    "title": "Design Excel Sum Formula",
    "titleSlug": "design-excel-sum-formula",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Design"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Excel Sum Formula",
    "example_output": "# Expected output for Design Excel Sum Formula",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Excel Sum Formula\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "632",
    "title": "Smallest Range Covering Elements from K Lists",
    "titleSlug": "smallest-range-covering-elements-from-k-lists",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Range Covering Elements from K Lists",
    "example_output": "# Expected output for Smallest Range Covering Elements from K Lists",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Range Covering Elements from K Lists\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "633",
    "title": "Sum of Square Numbers",
    "titleSlug": "sum-of-square-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Square Numbers",
    "example_output": "# Expected output for Sum of Square Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Square Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "634",
    "title": "Find the Derangement of An Array",
    "titleSlug": "find-the-derangement-of-an-array",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Derangement of An Array",
    "example_output": "# Expected output for Find the Derangement of An Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Derangement of An Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "635",
    "title": "Design Log Storage System",
    "titleSlug": "design-log-storage-system",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Log Storage System",
    "example_output": "# Expected output for Design Log Storage System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Log Storage System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "636",
    "title": "Exclusive Time of Functions",
    "titleSlug": "exclusive-time-of-functions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Exclusive Time of Functions",
    "example_output": "# Expected output for Exclusive Time of Functions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Exclusive Time of Functions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "637",
    "title": "Average of Levels in Binary Tree",
    "titleSlug": "average-of-levels-in-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Average of Levels in Binary Tree",
    "example_output": "# Expected output for Average of Levels in Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Average of Levels in Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "638",
    "title": "Shopping Offers",
    "titleSlug": "shopping-offers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shopping Offers",
    "example_output": "# Expected output for Shopping Offers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shopping Offers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "639",
    "title": "Decode Ways II",
    "titleSlug": "decode-ways-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decode Ways II",
    "example_output": "# Expected output for Decode Ways II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decode Ways II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "640",
    "title": "Solve the Equation",
    "titleSlug": "solve-the-equation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Solve the Equation",
    "example_output": "# Expected output for Solve the Equation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Solve the Equation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "641",
    "title": "Design Circular Deque",
    "titleSlug": "design-circular-deque",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Circular Deque",
    "example_output": "# Expected output for Design Circular Deque",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Circular Deque\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "642",
    "title": "Design Search Autocomplete System",
    "titleSlug": "design-search-autocomplete-system",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Search Autocomplete System",
    "example_output": "# Expected output for Design Search Autocomplete System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Search Autocomplete System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "643",
    "title": "Maximum Average Subarray I",
    "titleSlug": "maximum-average-subarray-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Average Subarray I",
    "example_output": "# Expected output for Maximum Average Subarray I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Average Subarray I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "644",
    "title": "Maximum Average Subarray II",
    "titleSlug": "maximum-average-subarray-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Average Subarray II",
    "example_output": "# Expected output for Maximum Average Subarray II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Average Subarray II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "645",
    "title": "Set Mismatch",
    "titleSlug": "set-mismatch",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Set Mismatch",
    "example_output": "# Expected output for Set Mismatch",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Set Mismatch\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "646",
    "title": "Maximum Length of Pair Chain",
    "titleSlug": "maximum-length-of-pair-chain",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Length of Pair Chain",
    "example_output": "# Expected output for Maximum Length of Pair Chain",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Length of Pair Chain\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "647",
    "title": "Palindromic Substrings",
    "titleSlug": "palindromic-substrings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindromic Substrings",
    "example_output": "# Expected output for Palindromic Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Palindromic Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "648",
    "title": "Replace Words",
    "titleSlug": "replace-words",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Replace Words",
    "example_output": "# Expected output for Replace Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Replace Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "649",
    "title": "Dota2 Senate",
    "titleSlug": "dota2-senate",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Dota2 Senate",
    "example_output": "# Expected output for Dota2 Senate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Dota2 Senate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "650",
    "title": "2 Keys Keyboard",
    "titleSlug": "2-keys-keyboard",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 2 Keys Keyboard",
    "example_output": "# Expected output for 2 Keys Keyboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"2 Keys Keyboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "651",
    "title": "4 Keys Keyboard",
    "titleSlug": "4-keys-keyboard",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 4 Keys Keyboard",
    "example_output": "# Expected output for 4 Keys Keyboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"4 Keys Keyboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "652",
    "title": "Find Duplicate Subtrees",
    "titleSlug": "find-duplicate-subtrees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Duplicate Subtrees",
    "example_output": "# Expected output for Find Duplicate Subtrees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Duplicate Subtrees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "654",
    "title": "Maximum Binary Tree",
    "titleSlug": "maximum-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Binary Tree",
    "example_output": "# Expected output for Maximum Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "655",
    "title": "Print Binary Tree",
    "titleSlug": "print-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Print Binary Tree",
    "example_output": "# Expected output for Print Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Print Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "656",
    "title": "Coin Path",
    "titleSlug": "coin-path",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Coin Path",
    "example_output": "# Expected output for Coin Path",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Coin Path\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "657",
    "title": "Robot Return to Origin",
    "titleSlug": "robot-return-to-origin",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Robot Return to Origin",
    "example_output": "# Expected output for Robot Return to Origin",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Robot Return to Origin\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "658",
    "title": "Find K Closest Elements",
    "titleSlug": "find-k-closest-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find K Closest Elements",
    "example_output": "# Expected output for Find K Closest Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find K Closest Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "659",
    "title": "Split Array into Consecutive Subsequences",
    "titleSlug": "split-array-into-consecutive-subsequences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Array into Consecutive Subsequences",
    "example_output": "# Expected output for Split Array into Consecutive Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Array into Consecutive Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "660",
    "title": "Remove 9",
    "titleSlug": "remove-9",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove 9",
    "example_output": "# Expected output for Remove 9",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove 9\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "661",
    "title": "Image Smoother",
    "titleSlug": "image-smoother",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Image Smoother",
    "example_output": "# Expected output for Image Smoother",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Image Smoother\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "662",
    "title": "Maximum Width of Binary Tree",
    "titleSlug": "maximum-width-of-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Width of Binary Tree",
    "example_output": "# Expected output for Maximum Width of Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Width of Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "663",
    "title": "Equal Tree Partition",
    "titleSlug": "equal-tree-partition",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Equal Tree Partition",
    "example_output": "# Expected output for Equal Tree Partition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Equal Tree Partition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "664",
    "title": "Strange Printer",
    "titleSlug": "strange-printer",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strange Printer",
    "example_output": "# Expected output for Strange Printer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strange Printer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "665",
    "title": "Non-decreasing Array",
    "titleSlug": "non-decreasing-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Non-decreasing Array",
    "example_output": "# Expected output for Non-decreasing Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Non-decreasing Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "666",
    "title": "Path Sum IV",
    "titleSlug": "path-sum-iv",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path Sum IV",
    "example_output": "# Expected output for Path Sum IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path Sum IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "667",
    "title": "Beautiful Arrangement II",
    "titleSlug": "beautiful-arrangement-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Beautiful Arrangement II",
    "example_output": "# Expected output for Beautiful Arrangement II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Beautiful Arrangement II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "668",
    "title": "Kth Smallest Number in Multiplication Table",
    "titleSlug": "kth-smallest-number-in-multiplication-table",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Smallest Number in Multiplication Table",
    "example_output": "# Expected output for Kth Smallest Number in Multiplication Table",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Smallest Number in Multiplication Table\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "669",
    "title": "Trim a Binary Search Tree",
    "titleSlug": "trim-a-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Trim a Binary Search Tree",
    "example_output": "# Expected output for Trim a Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Trim a Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "670",
    "title": "Maximum Swap",
    "titleSlug": "maximum-swap",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Swap",
    "example_output": "# Expected output for Maximum Swap",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Swap\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "671",
    "title": "Second Minimum Node In a Binary Tree",
    "titleSlug": "second-minimum-node-in-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Second Minimum Node In a Binary Tree",
    "example_output": "# Expected output for Second Minimum Node In a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Second Minimum Node In a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "672",
    "title": "Bulb Switcher II",
    "titleSlug": "bulb-switcher-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bulb Switcher II",
    "example_output": "# Expected output for Bulb Switcher II",
    "status": "TO_DO",
    "description": "Given a number of bulbs or switches, solve the problem titled \"Bulb Switcher II\" by simulating the toggling operations and returning the correct result."
  },
  {
    "id": "673",
    "title": "Number of Longest Increasing Subsequence",
    "titleSlug": "number-of-longest-increasing-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Longest Increasing Subsequence",
    "example_output": "# Expected output for Number of Longest Increasing Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Longest Increasing Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "674",
    "title": "Longest Continuous Increasing Subsequence",
    "titleSlug": "longest-continuous-increasing-subsequence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Continuous Increasing Subsequence",
    "example_output": "# Expected output for Longest Continuous Increasing Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Continuous Increasing Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "675",
    "title": "Cut Off Trees for Golf Event",
    "titleSlug": "cut-off-trees-for-golf-event",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cut Off Trees for Golf Event",
    "example_output": "# Expected output for Cut Off Trees for Golf Event",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cut Off Trees for Golf Event\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "676",
    "title": "Implement Magic Dictionary",
    "titleSlug": "implement-magic-dictionary",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Implement Magic Dictionary",
    "example_output": "# Expected output for Implement Magic Dictionary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Implement Magic Dictionary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "677",
    "title": "Map Sum Pairs",
    "titleSlug": "map-sum-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Map Sum Pairs",
    "example_output": "# Expected output for Map Sum Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Map Sum Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "678",
    "title": "Valid Parenthesis String",
    "titleSlug": "valid-parenthesis-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Parenthesis String",
    "example_output": "# Expected output for Valid Parenthesis String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Parenthesis String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "679",
    "title": "24 Game",
    "titleSlug": "24-game",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 24 Game",
    "example_output": "# Expected output for 24 Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"24 Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "681",
    "title": "Next Closest Time",
    "titleSlug": "next-closest-time",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Closest Time",
    "example_output": "# Expected output for Next Closest Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Next Closest Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "682",
    "title": "Baseball Game",
    "titleSlug": "baseball-game",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Baseball Game",
    "example_output": "# Expected output for Baseball Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Baseball Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "683",
    "title": "K Empty Slots",
    "titleSlug": "k-empty-slots",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K Empty Slots",
    "example_output": "# Expected output for K Empty Slots",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K Empty Slots\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "684",
    "title": "Redundant Connection",
    "titleSlug": "redundant-connection",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Redundant Connection",
    "example_output": "# Expected output for Redundant Connection",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Redundant Connection\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "685",
    "title": "Redundant Connection II",
    "titleSlug": "redundant-connection-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Redundant Connection II",
    "example_output": "# Expected output for Redundant Connection II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Redundant Connection II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "686",
    "title": "Repeated String Match",
    "titleSlug": "repeated-string-match",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Repeated String Match",
    "example_output": "# Expected output for Repeated String Match",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Repeated String Match\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "687",
    "title": "Longest Univalue Path",
    "titleSlug": "longest-univalue-path",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Univalue Path",
    "example_output": "# Expected output for Longest Univalue Path",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Univalue Path\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "688",
    "title": "Knight Probability in Chessboard",
    "titleSlug": "knight-probability-in-chessboard",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Knight Probability in Chessboard",
    "example_output": "# Expected output for Knight Probability in Chessboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Knight Probability in Chessboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "689",
    "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
    "titleSlug": "maximum-sum-of-3-non-overlapping-subarrays",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum of 3 Non-Overlapping Subarrays",
    "example_output": "# Expected output for Maximum Sum of 3 Non-Overlapping Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum of 3 Non-Overlapping Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "690",
    "title": "Employee Importance",
    "titleSlug": "employee-importance",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Employee Importance",
    "example_output": "# Expected output for Employee Importance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Employee Importance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "691",
    "title": "Stickers to Spell Word",
    "titleSlug": "stickers-to-spell-word",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stickers to Spell Word",
    "example_output": "# Expected output for Stickers to Spell Word",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stickers to Spell Word\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "692",
    "title": "Top K Frequent Words",
    "titleSlug": "top-k-frequent-words",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Bucket Sort"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Top K Frequent Words",
    "example_output": "# Expected output for Top K Frequent Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Top K Frequent Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "693",
    "title": "Binary Number with Alternating Bits",
    "titleSlug": "binary-number-with-alternating-bits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Number with Alternating Bits",
    "example_output": "# Expected output for Binary Number with Alternating Bits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Number with Alternating Bits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "694",
    "title": "Number of Distinct Islands",
    "titleSlug": "number-of-distinct-islands",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Distinct Islands",
    "example_output": "# Expected output for Number of Distinct Islands",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Distinct Islands\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "695",
    "title": "Max Area of Island",
    "titleSlug": "max-area-of-island",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Area of Island",
    "example_output": "# Expected output for Max Area of Island",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Area of Island\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "696",
    "title": "Count Binary Substrings",
    "titleSlug": "count-binary-substrings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Binary Substrings",
    "example_output": "# Expected output for Count Binary Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Binary Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "697",
    "title": "Degree of an Array",
    "titleSlug": "degree-of-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Degree of an Array",
    "example_output": "# Expected output for Degree of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Degree of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "698",
    "title": "Partition to K Equal Sum Subsets",
    "titleSlug": "partition-to-k-equal-sum-subsets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition to K Equal Sum Subsets",
    "example_output": "# Expected output for Partition to K Equal Sum Subsets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition to K Equal Sum Subsets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "699",
    "title": "Falling Squares",
    "titleSlug": "falling-squares",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Falling Squares",
    "example_output": "# Expected output for Falling Squares",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Falling Squares\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "700",
    "title": "Search in a Binary Search Tree",
    "titleSlug": "search-in-a-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Search in a Binary Search Tree",
    "example_output": "# Expected output for Search in a Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Search in a Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "701",
    "title": "Insert into a Binary Search Tree",
    "titleSlug": "insert-into-a-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Insert into a Binary Search Tree",
    "example_output": "# Expected output for Insert into a Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Insert into a Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "702",
    "title": "Search in a Sorted Array of Unknown Size",
    "titleSlug": "search-in-a-sorted-array-of-unknown-size",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Search in a Sorted Array of Unknown Size",
    "example_output": "# Expected output for Search in a Sorted Array of Unknown Size",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Search in a Sorted Array of Unknown Size\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "703",
    "title": "Kth Largest Element in a Stream",
    "titleSlug": "kth-largest-element-in-a-stream",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Binary Tree"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Largest Element in a Stream",
    "example_output": "# Expected output for Kth Largest Element in a Stream",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Largest Element in a Stream\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "704",
    "title": "Binary Search",
    "titleSlug": "binary-search",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Search",
    "example_output": "# Expected output for Binary Search",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Search\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "705",
    "title": "Design HashSet",
    "titleSlug": "design-hashset",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design HashSet",
    "example_output": "# Expected output for Design HashSet",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design HashSet\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "706",
    "title": "Design HashMap",
    "titleSlug": "design-hashmap",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design HashMap",
    "example_output": "# Expected output for Design HashMap",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design HashMap\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "707",
    "title": "Design Linked List",
    "titleSlug": "design-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Linked List",
    "example_output": "# Expected output for Design Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "708",
    "title": "Insert into a Sorted Circular Linked List",
    "titleSlug": "insert-into-a-sorted-circular-linked-list",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Insert into a Sorted Circular Linked List",
    "example_output": "# Expected output for Insert into a Sorted Circular Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Insert into a Sorted Circular Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "709",
    "title": "To Lower Case",
    "titleSlug": "to-lower-case",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for To Lower Case",
    "example_output": "# Expected output for To Lower Case",
    "status": "TO_DO",
    "description": "Solve the problem titled \"To Lower Case\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "710",
    "title": "Random Pick with Blacklist",
    "titleSlug": "random-pick-with-blacklist",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Random Pick with Blacklist",
    "example_output": "# Expected output for Random Pick with Blacklist",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Random Pick with Blacklist\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "711",
    "title": "Number of Distinct Islands II",
    "titleSlug": "number-of-distinct-islands-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Distinct Islands II",
    "example_output": "# Expected output for Number of Distinct Islands II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Distinct Islands II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "712",
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum ASCII Delete Sum for Two Strings",
    "example_output": "# Expected output for Minimum ASCII Delete Sum for Two Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum ASCII Delete Sum for Two Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "713",
    "title": "Subarray Product Less Than K",
    "titleSlug": "subarray-product-less-than-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subarray Product Less Than K",
    "example_output": "# Expected output for Subarray Product Less Than K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subarray Product Less Than K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "714",
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Time to Buy and Sell Stock with Transaction Fee",
    "example_output": "# Expected output for Best Time to Buy and Sell Stock with Transaction Fee",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Time to Buy and Sell Stock with Transaction Fee\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "715",
    "title": "Range Module",
    "titleSlug": "range-module",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Module",
    "example_output": "# Expected output for Range Module",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Module\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "716",
    "title": "Max Stack",
    "titleSlug": "max-stack",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Doubly-Linked List"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Stack",
    "example_output": "# Expected output for Max Stack",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Stack\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "717",
    "title": "1-bit and 2-bit Characters",
    "titleSlug": "1-bit-and-2-bit-characters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 1-bit and 2-bit Characters",
    "example_output": "# Expected output for 1-bit and 2-bit Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"1-bit and 2-bit Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "718",
    "title": "Maximum Length of Repeated Subarray",
    "titleSlug": "maximum-length-of-repeated-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Length of Repeated Subarray",
    "example_output": "# Expected output for Maximum Length of Repeated Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Length of Repeated Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "719",
    "title": "Find K-th Smallest Pair Distance",
    "titleSlug": "find-k-th-smallest-pair-distance",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find K-th Smallest Pair Distance",
    "example_output": "# Expected output for Find K-th Smallest Pair Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find K-th Smallest Pair Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "720",
    "title": "Longest Word in Dictionary",
    "titleSlug": "longest-word-in-dictionary",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Word in Dictionary",
    "example_output": "# Expected output for Longest Word in Dictionary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Word in Dictionary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "721",
    "title": "Accounts Merge",
    "titleSlug": "accounts-merge",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Accounts Merge",
    "example_output": "# Expected output for Accounts Merge",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Accounts Merge\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "722",
    "title": "Remove Comments",
    "titleSlug": "remove-comments",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Comments",
    "example_output": "# Expected output for Remove Comments",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Comments\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "723",
    "title": "Candy Crush",
    "titleSlug": "candy-crush",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Candy Crush",
    "example_output": "# Expected output for Candy Crush",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Candy Crush\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "724",
    "title": "Find Pivot Index",
    "titleSlug": "find-pivot-index",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Pivot Index",
    "example_output": "# Expected output for Find Pivot Index",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Pivot Index\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "725",
    "title": "Split Linked List in Parts",
    "titleSlug": "split-linked-list-in-parts",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Linked List in Parts",
    "example_output": "# Expected output for Split Linked List in Parts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Linked List in Parts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "726",
    "title": "Number of Atoms",
    "titleSlug": "number-of-atoms",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Atoms",
    "example_output": "# Expected output for Number of Atoms",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Atoms\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "727",
    "title": "Minimum Window Subsequence",
    "titleSlug": "minimum-window-subsequence",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Window Subsequence",
    "example_output": "# Expected output for Minimum Window Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Window Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "728",
    "title": "Self Dividing Numbers",
    "titleSlug": "self-dividing-numbers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Self Dividing Numbers",
    "example_output": "# Expected output for Self Dividing Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Self Dividing Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "729",
    "title": "My Calendar I",
    "titleSlug": "my-calendar-i",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for My Calendar I",
    "example_output": "# Expected output for My Calendar I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"My Calendar I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "730",
    "title": "Count Different Palindromic Subsequences",
    "titleSlug": "count-different-palindromic-subsequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Different Palindromic Subsequences",
    "example_output": "# Expected output for Count Different Palindromic Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Different Palindromic Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "731",
    "title": "My Calendar II",
    "titleSlug": "my-calendar-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for My Calendar II",
    "example_output": "# Expected output for My Calendar II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"My Calendar II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "732",
    "title": "My Calendar III",
    "titleSlug": "my-calendar-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for My Calendar III",
    "example_output": "# Expected output for My Calendar III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"My Calendar III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "733",
    "title": "Flood Fill",
    "titleSlug": "flood-fill",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flood Fill",
    "example_output": "# Expected output for Flood Fill",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flood Fill\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "734",
    "title": "Sentence Similarity",
    "titleSlug": "sentence-similarity",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sentence Similarity",
    "example_output": "# Expected output for Sentence Similarity",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sentence Similarity\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "735",
    "title": "Asteroid Collision",
    "titleSlug": "asteroid-collision",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Asteroid Collision",
    "example_output": "# Expected output for Asteroid Collision",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Asteroid Collision\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "736",
    "title": "Parse Lisp Expression",
    "titleSlug": "parse-lisp-expression",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Parse Lisp Expression",
    "example_output": "# Expected output for Parse Lisp Expression",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Parse Lisp Expression\"."
  },
  {
    "id": "737",
    "title": "Sentence Similarity II",
    "titleSlug": "sentence-similarity-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sentence Similarity II",
    "example_output": "# Expected output for Sentence Similarity II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sentence Similarity II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "738",
    "title": "Monotone Increasing Digits",
    "titleSlug": "monotone-increasing-digits",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Monotone Increasing Digits",
    "example_output": "# Expected output for Monotone Increasing Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Monotone Increasing Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "739",
    "title": "Daily Temperatures",
    "titleSlug": "daily-temperatures",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Daily Temperatures",
    "example_output": "# Expected output for Daily Temperatures",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Daily Temperatures\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "740",
    "title": "Delete and Earn",
    "titleSlug": "delete-and-earn",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete and Earn",
    "example_output": "# Expected output for Delete and Earn",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete and Earn\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "741",
    "title": "Cherry Pickup",
    "titleSlug": "cherry-pickup",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cherry Pickup",
    "example_output": "# Expected output for Cherry Pickup",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cherry Pickup\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "742",
    "title": "Closest Leaf in a Binary Tree",
    "titleSlug": "closest-leaf-in-a-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Leaf in a Binary Tree",
    "example_output": "# Expected output for Closest Leaf in a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Leaf in a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "743",
    "title": "Network Delay Time",
    "titleSlug": "network-delay-time",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Network Delay Time",
    "example_output": "# Expected output for Network Delay Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Network Delay Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "744",
    "title": "Find Smallest Letter Greater Than Target",
    "titleSlug": "find-smallest-letter-greater-than-target",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Smallest Letter Greater Than Target",
    "example_output": "# Expected output for Find Smallest Letter Greater Than Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Smallest Letter Greater Than Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "745",
    "title": "Prefix and Suffix Search",
    "titleSlug": "prefix-and-suffix-search",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Prefix and Suffix Search",
    "example_output": "# Expected output for Prefix and Suffix Search",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Prefix and Suffix Search\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "746",
    "title": "Min Cost Climbing Stairs",
    "titleSlug": "min-cost-climbing-stairs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Min Cost Climbing Stairs",
    "example_output": "# Expected output for Min Cost Climbing Stairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Min Cost Climbing Stairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "747",
    "title": "Largest Number At Least Twice of Others",
    "titleSlug": "largest-number-at-least-twice-of-others",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Number At Least Twice of Others",
    "example_output": "# Expected output for Largest Number At Least Twice of Others",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Number At Least Twice of Others\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "748",
    "title": "Shortest Completing Word",
    "titleSlug": "shortest-completing-word",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Completing Word",
    "example_output": "# Expected output for Shortest Completing Word",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Completing Word\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "749",
    "title": "Contain Virus",
    "titleSlug": "contain-virus",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Contain Virus",
    "example_output": "# Expected output for Contain Virus",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Contain Virus\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "750",
    "title": "Number Of Corner Rectangles",
    "titleSlug": "number-of-corner-rectangles",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number Of Corner Rectangles",
    "example_output": "# Expected output for Number Of Corner Rectangles",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number Of Corner Rectangles\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "751",
    "title": "IP to CIDR",
    "titleSlug": "ip-to-cidr",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for IP to CIDR",
    "example_output": "# Expected output for IP to CIDR",
    "status": "TO_DO",
    "description": "Solve the problem titled \"IP to CIDR\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "752",
    "title": "Open the Lock",
    "titleSlug": "open-the-lock",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Open the Lock",
    "example_output": "# Expected output for Open the Lock",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Open the Lock\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "753",
    "title": "Cracking the Safe",
    "titleSlug": "cracking-the-safe",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Eulerian Circuit"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cracking the Safe",
    "example_output": "# Expected output for Cracking the Safe",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cracking the Safe\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "754",
    "title": "Reach a Number",
    "titleSlug": "reach-a-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reach a Number",
    "example_output": "# Expected output for Reach a Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reach a Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "755",
    "title": "Pour Water",
    "titleSlug": "pour-water",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pour Water",
    "example_output": "# Expected output for Pour Water",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pour Water\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "756",
    "title": "Pyramid Transition Matrix",
    "titleSlug": "pyramid-transition-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pyramid Transition Matrix",
    "example_output": "# Expected output for Pyramid Transition Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Pyramid Transition Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "757",
    "title": "Set Intersection Size At Least Two",
    "titleSlug": "set-intersection-size-at-least-two",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Set Intersection Size At Least Two",
    "example_output": "# Expected output for Set Intersection Size At Least Two",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Set Intersection Size At Least Two\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "758",
    "title": "Bold Words in String",
    "titleSlug": "bold-words-in-string",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bold Words in String",
    "example_output": "# Expected output for Bold Words in String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bold Words in String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "759",
    "title": "Employee Free Time",
    "titleSlug": "employee-free-time",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Line Sweep"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Employee Free Time",
    "example_output": "# Expected output for Employee Free Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Employee Free Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "760",
    "title": "Find Anagram Mappings",
    "titleSlug": "find-anagram-mappings",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Anagram Mappings",
    "example_output": "# Expected output for Find Anagram Mappings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Anagram Mappings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "761",
    "title": "Special Binary String",
    "titleSlug": "special-binary-string",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Special Binary String",
    "example_output": "# Expected output for Special Binary String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Special Binary String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "762",
    "title": "Prime Number of Set Bits in Binary Representation",
    "titleSlug": "prime-number-of-set-bits-in-binary-representation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Prime Number of Set Bits in Binary Representation",
    "example_output": "# Expected output for Prime Number of Set Bits in Binary Representation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Prime Number of Set Bits in Binary Representation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "763",
    "title": "Partition Labels",
    "titleSlug": "partition-labels",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition Labels",
    "example_output": "# Expected output for Partition Labels",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition Labels\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "764",
    "title": "Largest Plus Sign",
    "titleSlug": "largest-plus-sign",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Plus Sign",
    "example_output": "# Expected output for Largest Plus Sign",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Plus Sign\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "765",
    "title": "Couples Holding Hands",
    "titleSlug": "couples-holding-hands",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Greedy"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Couples Holding Hands",
    "example_output": "# Expected output for Couples Holding Hands",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Couples Holding Hands\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "766",
    "title": "Toeplitz Matrix",
    "titleSlug": "toeplitz-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Toeplitz Matrix",
    "example_output": "# Expected output for Toeplitz Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Toeplitz Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "767",
    "title": "Reorganize String",
    "titleSlug": "reorganize-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reorganize String",
    "example_output": "# Expected output for Reorganize String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reorganize String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "768",
    "title": "Max Chunks To Make Sorted II",
    "titleSlug": "max-chunks-to-make-sorted-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Chunks To Make Sorted II",
    "example_output": "# Expected output for Max Chunks To Make Sorted II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Chunks To Make Sorted II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "769",
    "title": "Max Chunks To Make Sorted",
    "titleSlug": "max-chunks-to-make-sorted",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Chunks To Make Sorted",
    "example_output": "# Expected output for Max Chunks To Make Sorted",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Chunks To Make Sorted\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "770",
    "title": "Basic Calculator IV",
    "titleSlug": "basic-calculator-iv",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Basic Calculator IV",
    "example_output": "# Expected output for Basic Calculator IV",
    "status": "TO_DO",
    "description": "Implement a calculator that supports the logic described in \"Basic Calculator IV\". The calculator may need to parse expressions and compute results."
  },
  {
    "id": "771",
    "title": "Jewels and Stones",
    "titleSlug": "jewels-and-stones",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jewels and Stones",
    "example_output": "# Expected output for Jewels and Stones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Jewels and Stones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "772",
    "title": "Basic Calculator III",
    "titleSlug": "basic-calculator-iii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Basic Calculator III",
    "example_output": "# Expected output for Basic Calculator III",
    "status": "TO_DO",
    "description": "Implement a calculator that supports the logic described in \"Basic Calculator III\". The calculator may need to parse expressions and compute results."
  },
  {
    "id": "773",
    "title": "Sliding Puzzle",
    "titleSlug": "sliding-puzzle",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sliding Puzzle",
    "example_output": "# Expected output for Sliding Puzzle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sliding Puzzle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "774",
    "title": "Minimize Max Distance to Gas Station",
    "titleSlug": "minimize-max-distance-to-gas-station",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Max Distance to Gas Station",
    "example_output": "# Expected output for Minimize Max Distance to Gas Station",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Max Distance to Gas Station\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "775",
    "title": "Global and Local Inversions",
    "titleSlug": "global-and-local-inversions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Global and Local Inversions",
    "example_output": "# Expected output for Global and Local Inversions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Global and Local Inversions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "776",
    "title": "Split BST",
    "titleSlug": "split-bst",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split BST",
    "example_output": "# Expected output for Split BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "777",
    "title": "Swap Adjacent in LR String",
    "titleSlug": "swap-adjacent-in-lr-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Swap Adjacent in LR String",
    "example_output": "# Expected output for Swap Adjacent in LR String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Swap Adjacent in LR String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "778",
    "title": "Swim in Rising Water",
    "titleSlug": "swim-in-rising-water",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Swim in Rising Water",
    "example_output": "# Expected output for Swim in Rising Water",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Swim in Rising Water\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "779",
    "title": "K-th Symbol in Grammar",
    "titleSlug": "k-th-symbol-in-grammar",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K-th Symbol in Grammar",
    "example_output": "# Expected output for K-th Symbol in Grammar",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K-th Symbol in Grammar\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "780",
    "title": "Reaching Points",
    "titleSlug": "reaching-points",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reaching Points",
    "example_output": "# Expected output for Reaching Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reaching Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "781",
    "title": "Rabbits in Forest",
    "titleSlug": "rabbits-in-forest",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rabbits in Forest",
    "example_output": "# Expected output for Rabbits in Forest",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rabbits in Forest\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "782",
    "title": "Transform to Chessboard",
    "titleSlug": "transform-to-chessboard",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Transform to Chessboard",
    "example_output": "# Expected output for Transform to Chessboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Transform to Chessboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "783",
    "title": "Minimum Distance Between BST Nodes",
    "titleSlug": "minimum-distance-between-bst-nodes",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Distance Between BST Nodes",
    "example_output": "# Expected output for Minimum Distance Between BST Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Distance Between BST Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "784",
    "title": "Letter Case Permutation",
    "titleSlug": "letter-case-permutation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Letter Case Permutation",
    "example_output": "# Expected output for Letter Case Permutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Letter Case Permutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "785",
    "title": "Is Graph Bipartite?",
    "titleSlug": "is-graph-bipartite",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Is Graph Bipartite?",
    "example_output": "# Expected output for Is Graph Bipartite?",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Is Graph Bipartite?\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "786",
    "title": "K-th Smallest Prime Fraction",
    "titleSlug": "k-th-smallest-prime-fraction",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K-th Smallest Prime Fraction",
    "example_output": "# Expected output for K-th Smallest Prime Fraction",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K-th Smallest Prime Fraction\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "787",
    "title": "Cheapest Flights Within K Stops",
    "titleSlug": "cheapest-flights-within-k-stops",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cheapest Flights Within K Stops",
    "example_output": "# Expected output for Cheapest Flights Within K Stops",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cheapest Flights Within K Stops\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "788",
    "title": "Rotated Digits",
    "titleSlug": "rotated-digits",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rotated Digits",
    "example_output": "# Expected output for Rotated Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rotated Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "789",
    "title": "Escape The Ghosts",
    "titleSlug": "escape-the-ghosts",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Escape The Ghosts",
    "example_output": "# Expected output for Escape The Ghosts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Escape The Ghosts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "790",
    "title": "Domino and Tromino Tiling",
    "titleSlug": "domino-and-tromino-tiling",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Domino and Tromino Tiling",
    "example_output": "# Expected output for Domino and Tromino Tiling",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Domino and Tromino Tiling\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "791",
    "title": "Custom Sort String",
    "titleSlug": "custom-sort-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Custom Sort String",
    "example_output": "# Expected output for Custom Sort String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Custom Sort String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "792",
    "title": "Number of Matching Subsequences",
    "titleSlug": "number-of-matching-subsequences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Matching Subsequences",
    "example_output": "# Expected output for Number of Matching Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Matching Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "793",
    "title": "Preimage Size of Factorial Zeroes Function",
    "titleSlug": "preimage-size-of-factorial-zeroes-function",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Preimage Size of Factorial Zeroes Function",
    "example_output": "# Expected output for Preimage Size of Factorial Zeroes Function",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Preimage Size of Factorial Zeroes Function\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "794",
    "title": "Valid Tic-Tac-Toe State",
    "titleSlug": "valid-tic-tac-toe-state",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Tic-Tac-Toe State",
    "example_output": "# Expected output for Valid Tic-Tac-Toe State",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Tic-Tac-Toe State\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "795",
    "title": "Number of Subarrays with Bounded Maximum",
    "titleSlug": "number-of-subarrays-with-bounded-maximum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Subarrays with Bounded Maximum",
    "example_output": "# Expected output for Number of Subarrays with Bounded Maximum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Subarrays with Bounded Maximum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "796",
    "title": "Rotate String",
    "titleSlug": "rotate-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rotate String",
    "example_output": "# Expected output for Rotate String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rotate String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "797",
    "title": "All Paths From Source to Target",
    "titleSlug": "all-paths-from-source-to-target",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Backtracking"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All Paths From Source to Target",
    "example_output": "# Expected output for All Paths From Source to Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All Paths From Source to Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "798",
    "title": "Smallest Rotation with Highest Score",
    "titleSlug": "smallest-rotation-with-highest-score",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Rotation with Highest Score",
    "example_output": "# Expected output for Smallest Rotation with Highest Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Rotation with Highest Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "799",
    "title": "Champagne Tower",
    "titleSlug": "champagne-tower",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Champagne Tower",
    "example_output": "# Expected output for Champagne Tower",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Champagne Tower\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "800",
    "title": "Similar RGB Color",
    "titleSlug": "similar-rgb-color",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Similar RGB Color",
    "example_output": "# Expected output for Similar RGB Color",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Similar RGB Color\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "801",
    "title": "Minimum Swaps To Make Sequences Increasing",
    "titleSlug": "minimum-swaps-to-make-sequences-increasing",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Swaps To Make Sequences Increasing",
    "example_output": "# Expected output for Minimum Swaps To Make Sequences Increasing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Swaps To Make Sequences Increasing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "802",
    "title": "Find Eventual Safe States",
    "titleSlug": "find-eventual-safe-states",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Eventual Safe States",
    "example_output": "# Expected output for Find Eventual Safe States",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Eventual Safe States\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "803",
    "title": "Bricks Falling When Hit",
    "titleSlug": "bricks-falling-when-hit",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bricks Falling When Hit",
    "example_output": "# Expected output for Bricks Falling When Hit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bricks Falling When Hit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "804",
    "title": "Unique Morse Code Words",
    "titleSlug": "unique-morse-code-words",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Morse Code Words",
    "example_output": "# Expected output for Unique Morse Code Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Morse Code Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "805",
    "title": "Split Array With Same Average",
    "titleSlug": "split-array-with-same-average",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Array With Same Average",
    "example_output": "# Expected output for Split Array With Same Average",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Array With Same Average\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "806",
    "title": "Number of Lines To Write String",
    "titleSlug": "number-of-lines-to-write-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Lines To Write String",
    "example_output": "# Expected output for Number of Lines To Write String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Lines To Write String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "807",
    "title": "Max Increase to Keep City Skyline",
    "titleSlug": "max-increase-to-keep-city-skyline",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Increase to Keep City Skyline",
    "example_output": "# Expected output for Max Increase to Keep City Skyline",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Increase to Keep City Skyline\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "808",
    "title": "Soup Servings",
    "titleSlug": "soup-servings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Probability and Statistics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Soup Servings",
    "example_output": "# Expected output for Soup Servings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Soup Servings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "809",
    "title": "Expressive Words",
    "titleSlug": "expressive-words",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Expressive Words",
    "example_output": "# Expected output for Expressive Words",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Expressive Words\"."
  },
  {
    "id": "810",
    "title": "Chalkboard XOR Game",
    "titleSlug": "chalkboard-xor-game",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Chalkboard XOR Game",
    "example_output": "# Expected output for Chalkboard XOR Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Chalkboard XOR Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "811",
    "title": "Subdomain Visit Count",
    "titleSlug": "subdomain-visit-count",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subdomain Visit Count",
    "example_output": "# Expected output for Subdomain Visit Count",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subdomain Visit Count\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "812",
    "title": "Largest Triangle Area",
    "titleSlug": "largest-triangle-area",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Triangle Area",
    "example_output": "# Expected output for Largest Triangle Area",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Triangle Area\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "813",
    "title": "Largest Sum of Averages",
    "titleSlug": "largest-sum-of-averages",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Sum of Averages",
    "example_output": "# Expected output for Largest Sum of Averages",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Sum of Averages\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "814",
    "title": "Binary Tree Pruning",
    "titleSlug": "binary-tree-pruning",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Pruning",
    "example_output": "# Expected output for Binary Tree Pruning",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Pruning\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "815",
    "title": "Bus Routes",
    "titleSlug": "bus-routes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bus Routes",
    "example_output": "# Expected output for Bus Routes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bus Routes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "816",
    "title": "Ambiguous Coordinates",
    "titleSlug": "ambiguous-coordinates",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ambiguous Coordinates",
    "example_output": "# Expected output for Ambiguous Coordinates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ambiguous Coordinates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "817",
    "title": "Linked List Components",
    "titleSlug": "linked-list-components",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Linked List Components",
    "example_output": "# Expected output for Linked List Components",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Linked List Components\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "818",
    "title": "Race Car",
    "titleSlug": "race-car",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Race Car",
    "example_output": "# Expected output for Race Car",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Race Car\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "819",
    "title": "Most Common Word",
    "titleSlug": "most-common-word",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Common Word",
    "example_output": "# Expected output for Most Common Word",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Common Word\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "820",
    "title": "Short Encoding of Words",
    "titleSlug": "short-encoding-of-words",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Short Encoding of Words",
    "example_output": "# Expected output for Short Encoding of Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Short Encoding of Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "821",
    "title": "Shortest Distance to a Character",
    "titleSlug": "shortest-distance-to-a-character",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Distance to a Character",
    "example_output": "# Expected output for Shortest Distance to a Character",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Distance to a Character\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "822",
    "title": "Card Flipping Game",
    "titleSlug": "card-flipping-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Card Flipping Game",
    "example_output": "# Expected output for Card Flipping Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Card Flipping Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "823",
    "title": "Binary Trees With Factors",
    "titleSlug": "binary-trees-with-factors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Trees With Factors",
    "example_output": "# Expected output for Binary Trees With Factors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Trees With Factors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "824",
    "title": "Goat Latin",
    "titleSlug": "goat-latin",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Goat Latin",
    "example_output": "# Expected output for Goat Latin",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Goat Latin\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "825",
    "title": "Friends Of Appropriate Ages",
    "titleSlug": "friends-of-appropriate-ages",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Friends Of Appropriate Ages",
    "example_output": "# Expected output for Friends Of Appropriate Ages",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Friends Of Appropriate Ages\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "826",
    "title": "Most Profit Assigning Work",
    "titleSlug": "most-profit-assigning-work",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Profit Assigning Work",
    "example_output": "# Expected output for Most Profit Assigning Work",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Profit Assigning Work\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "827",
    "title": "Making A Large Island",
    "titleSlug": "making-a-large-island",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Making A Large Island",
    "example_output": "# Expected output for Making A Large Island",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Making A Large Island\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "828",
    "title": "Count Unique Characters of All Substrings of a Given String",
    "titleSlug": "count-unique-characters-of-all-substrings-of-a-given-string",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Unique Characters of All Substrings of a Given String",
    "example_output": "# Expected output for Count Unique Characters of All Substrings of a Given String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Unique Characters of All Substrings of a Given String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "829",
    "title": "Consecutive Numbers Sum",
    "titleSlug": "consecutive-numbers-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Consecutive Numbers Sum",
    "example_output": "# Expected output for Consecutive Numbers Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Consecutive Numbers Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "830",
    "title": "Positions of Large Groups",
    "titleSlug": "positions-of-large-groups",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Positions of Large Groups",
    "example_output": "# Expected output for Positions of Large Groups",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Positions of Large Groups\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "831",
    "title": "Masking Personal Information",
    "titleSlug": "masking-personal-information",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Masking Personal Information",
    "example_output": "# Expected output for Masking Personal Information",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Masking Personal Information\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "832",
    "title": "Flipping an Image",
    "titleSlug": "flipping-an-image",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flipping an Image",
    "example_output": "# Expected output for Flipping an Image",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flipping an Image\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "833",
    "title": "Find And Replace in String",
    "titleSlug": "find-and-replace-in-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find And Replace in String",
    "example_output": "# Expected output for Find And Replace in String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find And Replace in String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "834",
    "title": "Sum of Distances in Tree",
    "titleSlug": "sum-of-distances-in-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Distances in Tree",
    "example_output": "# Expected output for Sum of Distances in Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Distances in Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "835",
    "title": "Image Overlap",
    "titleSlug": "image-overlap",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Image Overlap",
    "example_output": "# Expected output for Image Overlap",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Image Overlap\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "836",
    "title": "Rectangle Overlap",
    "titleSlug": "rectangle-overlap",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rectangle Overlap",
    "example_output": "# Expected output for Rectangle Overlap",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rectangle Overlap\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "837",
    "title": "New 21 Game",
    "titleSlug": "new-21-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Probability and Statistics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for New 21 Game",
    "example_output": "# Expected output for New 21 Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"New 21 Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "838",
    "title": "Push Dominoes",
    "titleSlug": "push-dominoes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Push Dominoes",
    "example_output": "# Expected output for Push Dominoes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Push Dominoes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "839",
    "title": "Similar String Groups",
    "titleSlug": "similar-string-groups",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Similar String Groups",
    "example_output": "# Expected output for Similar String Groups",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Similar String Groups\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "840",
    "title": "Magic Squares In Grid",
    "titleSlug": "magic-squares-in-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Magic Squares In Grid",
    "example_output": "# Expected output for Magic Squares In Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Magic Squares In Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "841",
    "title": "Keys and Rooms",
    "titleSlug": "keys-and-rooms",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Keys and Rooms",
    "example_output": "# Expected output for Keys and Rooms",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Keys and Rooms\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "842",
    "title": "Split Array into Fibonacci Sequence",
    "titleSlug": "split-array-into-fibonacci-sequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Array into Fibonacci Sequence",
    "example_output": "# Expected output for Split Array into Fibonacci Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Array into Fibonacci Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "843",
    "title": "Guess the Word",
    "titleSlug": "guess-the-word",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Interactive"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Guess the Word",
    "example_output": "# Expected output for Guess the Word",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Guess the Word\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "844",
    "title": "Backspace String Compare",
    "titleSlug": "backspace-string-compare",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Backspace String Compare",
    "example_output": "# Expected output for Backspace String Compare",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Backspace String Compare\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "845",
    "title": "Longest Mountain in Array",
    "titleSlug": "longest-mountain-in-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Mountain in Array",
    "example_output": "# Expected output for Longest Mountain in Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Mountain in Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "846",
    "title": "Hand of Straights",
    "titleSlug": "hand-of-straights",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Hand of Straights",
    "example_output": "# Expected output for Hand of Straights",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Hand of Straights\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "847",
    "title": "Shortest Path Visiting All Nodes",
    "titleSlug": "shortest-path-visiting-all-nodes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Path Visiting All Nodes",
    "example_output": "# Expected output for Shortest Path Visiting All Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Path Visiting All Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "848",
    "title": "Shifting Letters",
    "titleSlug": "shifting-letters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shifting Letters",
    "example_output": "# Expected output for Shifting Letters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shifting Letters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "849",
    "title": "Maximize Distance to Closest Person",
    "titleSlug": "maximize-distance-to-closest-person",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Distance to Closest Person",
    "example_output": "# Expected output for Maximize Distance to Closest Person",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Distance to Closest Person\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "850",
    "title": "Rectangle Area II",
    "titleSlug": "rectangle-area-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Line Sweep"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rectangle Area II",
    "example_output": "# Expected output for Rectangle Area II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rectangle Area II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "851",
    "title": "Loud and Rich",
    "titleSlug": "loud-and-rich",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Loud and Rich",
    "example_output": "# Expected output for Loud and Rich",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Loud and Rich\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "852",
    "title": "Peak Index in a Mountain Array",
    "titleSlug": "peak-index-in-a-mountain-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Peak Index in a Mountain Array",
    "example_output": "# Expected output for Peak Index in a Mountain Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Peak Index in a Mountain Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "853",
    "title": "Car Fleet",
    "titleSlug": "car-fleet",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Car Fleet",
    "example_output": "# Expected output for Car Fleet",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Car Fleet\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "854",
    "title": "K-Similar Strings",
    "titleSlug": "k-similar-strings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K-Similar Strings",
    "example_output": "# Expected output for K-Similar Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K-Similar Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "855",
    "title": "Exam Room",
    "titleSlug": "exam-room",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Exam Room",
    "example_output": "# Expected output for Exam Room",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Exam Room\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "856",
    "title": "Score of Parentheses",
    "titleSlug": "score-of-parentheses",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Score of Parentheses",
    "example_output": "# Expected output for Score of Parentheses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Score of Parentheses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "857",
    "title": "Minimum Cost to Hire K Workers",
    "titleSlug": "minimum-cost-to-hire-k-workers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Hire K Workers",
    "example_output": "# Expected output for Minimum Cost to Hire K Workers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Hire K Workers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "858",
    "title": "Mirror Reflection",
    "titleSlug": "mirror-reflection",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Mirror Reflection",
    "example_output": "# Expected output for Mirror Reflection",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Mirror Reflection\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "859",
    "title": "Buddy Strings",
    "titleSlug": "buddy-strings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Buddy Strings",
    "example_output": "# Expected output for Buddy Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Buddy Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "860",
    "title": "Lemonade Change",
    "titleSlug": "lemonade-change",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lemonade Change",
    "example_output": "# Expected output for Lemonade Change",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lemonade Change\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "861",
    "title": "Score After Flipping Matrix",
    "titleSlug": "score-after-flipping-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Score After Flipping Matrix",
    "example_output": "# Expected output for Score After Flipping Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Score After Flipping Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "862",
    "title": "Shortest Subarray with Sum at Least K",
    "titleSlug": "shortest-subarray-with-sum-at-least-k",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Subarray with Sum at Least K",
    "example_output": "# Expected output for Shortest Subarray with Sum at Least K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Subarray with Sum at Least K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "863",
    "title": "All Nodes Distance K in Binary Tree",
    "titleSlug": "all-nodes-distance-k-in-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All Nodes Distance K in Binary Tree",
    "example_output": "# Expected output for All Nodes Distance K in Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All Nodes Distance K in Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "864",
    "title": "Shortest Path to Get All Keys",
    "titleSlug": "shortest-path-to-get-all-keys",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Path to Get All Keys",
    "example_output": "# Expected output for Shortest Path to Get All Keys",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Path to Get All Keys\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "865",
    "title": "Smallest Subtree with all the Deepest Nodes",
    "titleSlug": "smallest-subtree-with-all-the-deepest-nodes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Subtree with all the Deepest Nodes",
    "example_output": "# Expected output for Smallest Subtree with all the Deepest Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Subtree with all the Deepest Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "866",
    "title": "Prime Palindrome",
    "titleSlug": "prime-palindrome",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Prime Palindrome",
    "example_output": "# Expected output for Prime Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Prime Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "867",
    "title": "Transpose Matrix",
    "titleSlug": "transpose-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Transpose Matrix",
    "example_output": "# Expected output for Transpose Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Transpose Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "868",
    "title": "Binary Gap",
    "titleSlug": "binary-gap",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Gap",
    "example_output": "# Expected output for Binary Gap",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Gap\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "869",
    "title": "Reordered Power of 2",
    "titleSlug": "reordered-power-of-2",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reordered Power of 2",
    "example_output": "# Expected output for Reordered Power of 2",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reordered Power of 2\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "870",
    "title": "Advantage Shuffle",
    "titleSlug": "advantage-shuffle",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Advantage Shuffle",
    "example_output": "# Expected output for Advantage Shuffle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Advantage Shuffle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "871",
    "title": "Minimum Number of Refueling Stops",
    "titleSlug": "minimum-number-of-refueling-stops",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Refueling Stops",
    "example_output": "# Expected output for Minimum Number of Refueling Stops",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Refueling Stops\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "872",
    "title": "Leaf-Similar Trees",
    "titleSlug": "leaf-similar-trees",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Leaf-Similar Trees",
    "example_output": "# Expected output for Leaf-Similar Trees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Leaf-Similar Trees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "873",
    "title": "Length of Longest Fibonacci Subsequence",
    "titleSlug": "length-of-longest-fibonacci-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Length of Longest Fibonacci Subsequence",
    "example_output": "# Expected output for Length of Longest Fibonacci Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Length of Longest Fibonacci Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "874",
    "title": "Walking Robot Simulation",
    "titleSlug": "walking-robot-simulation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Walking Robot Simulation",
    "example_output": "# Expected output for Walking Robot Simulation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Walking Robot Simulation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "875",
    "title": "Koko Eating Bananas",
    "titleSlug": "koko-eating-bananas",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Koko Eating Bananas",
    "example_output": "# Expected output for Koko Eating Bananas",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Koko Eating Bananas\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "876",
    "title": "Middle of the Linked List",
    "titleSlug": "middle-of-the-linked-list",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Middle of the Linked List",
    "example_output": "# Expected output for Middle of the Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Middle of the Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "877",
    "title": "Stone Game",
    "titleSlug": "stone-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game",
    "example_output": "# Expected output for Stone Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "878",
    "title": "Nth Magical Number",
    "titleSlug": "nth-magical-number",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Nth Magical Number",
    "example_output": "# Expected output for Nth Magical Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Nth Magical Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "879",
    "title": "Profitable Schemes",
    "titleSlug": "profitable-schemes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Profitable Schemes",
    "example_output": "# Expected output for Profitable Schemes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Profitable Schemes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "880",
    "title": "Decoded String at Index",
    "titleSlug": "decoded-string-at-index",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decoded String at Index",
    "example_output": "# Expected output for Decoded String at Index",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decoded String at Index\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "881",
    "title": "Boats to Save People",
    "titleSlug": "boats-to-save-people",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Boats to Save People",
    "example_output": "# Expected output for Boats to Save People",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Boats to Save People\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "882",
    "title": "Reachable Nodes In Subdivided Graph",
    "titleSlug": "reachable-nodes-in-subdivided-graph",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reachable Nodes In Subdivided Graph",
    "example_output": "# Expected output for Reachable Nodes In Subdivided Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reachable Nodes In Subdivided Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "883",
    "title": "Projection Area of 3D Shapes",
    "titleSlug": "projection-area-of-3d-shapes",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Projection Area of 3D Shapes",
    "example_output": "# Expected output for Projection Area of 3D Shapes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Projection Area of 3D Shapes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "884",
    "title": "Uncommon Words from Two Sentences",
    "titleSlug": "uncommon-words-from-two-sentences",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Uncommon Words from Two Sentences",
    "example_output": "# Expected output for Uncommon Words from Two Sentences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Uncommon Words from Two Sentences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "885",
    "title": "Spiral Matrix III",
    "titleSlug": "spiral-matrix-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Spiral Matrix III",
    "example_output": "# Expected output for Spiral Matrix III",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Spiral Matrix III\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "886",
    "title": "Possible Bipartition",
    "titleSlug": "possible-bipartition",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Possible Bipartition",
    "example_output": "# Expected output for Possible Bipartition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Possible Bipartition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "887",
    "title": "Super Egg Drop",
    "titleSlug": "super-egg-drop",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Super Egg Drop",
    "example_output": "# Expected output for Super Egg Drop",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Super Egg Drop\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "888",
    "title": "Fair Candy Swap",
    "titleSlug": "fair-candy-swap",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fair Candy Swap",
    "example_output": "# Expected output for Fair Candy Swap",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fair Candy Swap\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "889",
    "title": "Construct Binary Tree from Preorder and Postorder Traversal",
    "titleSlug": "construct-binary-tree-from-preorder-and-postorder-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Binary Tree from Preorder and Postorder Traversal",
    "example_output": "# Expected output for Construct Binary Tree from Preorder and Postorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct Binary Tree from Preorder and Postorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "890",
    "title": "Find and Replace Pattern",
    "titleSlug": "find-and-replace-pattern",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find and Replace Pattern",
    "example_output": "# Expected output for Find and Replace Pattern",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find and Replace Pattern\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "891",
    "title": "Sum of Subsequence Widths",
    "titleSlug": "sum-of-subsequence-widths",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Subsequence Widths",
    "example_output": "# Expected output for Sum of Subsequence Widths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Subsequence Widths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "892",
    "title": "Surface Area of 3D Shapes",
    "titleSlug": "surface-area-of-3d-shapes",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Surface Area of 3D Shapes",
    "example_output": "# Expected output for Surface Area of 3D Shapes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Surface Area of 3D Shapes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "893",
    "title": "Groups of Special-Equivalent Strings",
    "titleSlug": "groups-of-special-equivalent-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Groups of Special-Equivalent Strings",
    "example_output": "# Expected output for Groups of Special-Equivalent Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Groups of Special-Equivalent Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "894",
    "title": "All Possible Full Binary Trees",
    "titleSlug": "all-possible-full-binary-trees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All Possible Full Binary Trees",
    "example_output": "# Expected output for All Possible Full Binary Trees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All Possible Full Binary Trees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "895",
    "title": "Maximum Frequency Stack",
    "titleSlug": "maximum-frequency-stack",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Frequency Stack",
    "example_output": "# Expected output for Maximum Frequency Stack",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Frequency Stack\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "896",
    "title": "Monotonic Array",
    "titleSlug": "monotonic-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Monotonic Array",
    "example_output": "# Expected output for Monotonic Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Monotonic Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "897",
    "title": "Increasing Order Search Tree",
    "titleSlug": "increasing-order-search-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Increasing Order Search Tree",
    "example_output": "# Expected output for Increasing Order Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Increasing Order Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "898",
    "title": "Bitwise ORs of Subarrays",
    "titleSlug": "bitwise-ors-of-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bitwise ORs of Subarrays",
    "example_output": "# Expected output for Bitwise ORs of Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bitwise ORs of Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "899",
    "title": "Orderly Queue",
    "titleSlug": "orderly-queue",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Orderly Queue",
    "example_output": "# Expected output for Orderly Queue",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Orderly Queue\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "900",
    "title": "RLE Iterator",
    "titleSlug": "rle-iterator",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for RLE Iterator",
    "example_output": "# Expected output for RLE Iterator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"RLE Iterator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "901",
    "title": "Online Stock Span",
    "titleSlug": "online-stock-span",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Online Stock Span",
    "example_output": "# Expected output for Online Stock Span",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Online Stock Span\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "902",
    "title": "Numbers At Most N Given Digit Set",
    "titleSlug": "numbers-at-most-n-given-digit-set",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Numbers At Most N Given Digit Set",
    "example_output": "# Expected output for Numbers At Most N Given Digit Set",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Numbers At Most N Given Digit Set\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "903",
    "title": "Valid Permutations for DI Sequence",
    "titleSlug": "valid-permutations-for-di-sequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Permutations for DI Sequence",
    "example_output": "# Expected output for Valid Permutations for DI Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Permutations for DI Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "904",
    "title": "Fruit Into Baskets",
    "titleSlug": "fruit-into-baskets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fruit Into Baskets",
    "example_output": "# Expected output for Fruit Into Baskets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fruit Into Baskets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "905",
    "title": "Sort Array By Parity",
    "titleSlug": "sort-array-by-parity",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Array By Parity",
    "example_output": "# Expected output for Sort Array By Parity",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Array By Parity\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "906",
    "title": "Super Palindromes",
    "titleSlug": "super-palindromes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Super Palindromes",
    "example_output": "# Expected output for Super Palindromes",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Super Palindromes\". Return the result based on the transformation rules involved."
  },
  {
    "id": "907",
    "title": "Sum of Subarray Minimums",
    "titleSlug": "sum-of-subarray-minimums",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Subarray Minimums",
    "example_output": "# Expected output for Sum of Subarray Minimums",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Subarray Minimums\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "908",
    "title": "Smallest Range I",
    "titleSlug": "smallest-range-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Range I",
    "example_output": "# Expected output for Smallest Range I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Range I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "909",
    "title": "Snakes and Ladders",
    "titleSlug": "snakes-and-ladders",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Snakes and Ladders",
    "example_output": "# Expected output for Snakes and Ladders",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Snakes and Ladders\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "910",
    "title": "Smallest Range II",
    "titleSlug": "smallest-range-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Range II",
    "example_output": "# Expected output for Smallest Range II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Range II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "911",
    "title": "Online Election",
    "titleSlug": "online-election",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Online Election",
    "example_output": "# Expected output for Online Election",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Online Election\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "912",
    "title": "Sort an Array",
    "titleSlug": "sort-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Bucket Sort"
      },
      {
        "name": "Radix Sort"
      },
      {
        "name": "Counting Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort an Array",
    "example_output": "# Expected output for Sort an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "913",
    "title": "Cat and Mouse",
    "titleSlug": "cat-and-mouse",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cat and Mouse",
    "example_output": "# Expected output for Cat and Mouse",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cat and Mouse\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "914",
    "title": "X of a Kind in a Deck of Cards",
    "titleSlug": "x-of-a-kind-in-a-deck-of-cards",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for X of a Kind in a Deck of Cards",
    "example_output": "# Expected output for X of a Kind in a Deck of Cards",
    "status": "TO_DO",
    "description": "Solve the problem titled \"X of a Kind in a Deck of Cards\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "915",
    "title": "Partition Array into Disjoint Intervals",
    "titleSlug": "partition-array-into-disjoint-intervals",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition Array into Disjoint Intervals",
    "example_output": "# Expected output for Partition Array into Disjoint Intervals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition Array into Disjoint Intervals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "916",
    "title": "Word Subsets",
    "titleSlug": "word-subsets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Word Subsets",
    "example_output": "# Expected output for Word Subsets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Word Subsets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "917",
    "title": "Reverse Only Letters",
    "titleSlug": "reverse-only-letters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Only Letters",
    "example_output": "# Expected output for Reverse Only Letters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Only Letters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "918",
    "title": "Maximum Sum Circular Subarray",
    "titleSlug": "maximum-sum-circular-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum Circular Subarray",
    "example_output": "# Expected output for Maximum Sum Circular Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum Circular Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "919",
    "title": "Complete Binary Tree Inserter",
    "titleSlug": "complete-binary-tree-inserter",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Complete Binary Tree Inserter",
    "example_output": "# Expected output for Complete Binary Tree Inserter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Complete Binary Tree Inserter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "920",
    "title": "Number of Music Playlists",
    "titleSlug": "number-of-music-playlists",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Music Playlists",
    "example_output": "# Expected output for Number of Music Playlists",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Music Playlists\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "921",
    "title": "Minimum Add to Make Parentheses Valid",
    "titleSlug": "minimum-add-to-make-parentheses-valid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Add to Make Parentheses Valid",
    "example_output": "# Expected output for Minimum Add to Make Parentheses Valid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Add to Make Parentheses Valid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "922",
    "title": "Sort Array By Parity II",
    "titleSlug": "sort-array-by-parity-ii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Array By Parity II",
    "example_output": "# Expected output for Sort Array By Parity II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Array By Parity II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "923",
    "title": "3Sum With Multiplicity",
    "titleSlug": "3sum-with-multiplicity",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for 3Sum With Multiplicity",
    "example_output": "# Expected output for 3Sum With Multiplicity",
    "status": "TO_DO",
    "description": "Solve the problem titled \"3Sum With Multiplicity\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "924",
    "title": "Minimize Malware Spread",
    "titleSlug": "minimize-malware-spread",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Malware Spread",
    "example_output": "# Expected output for Minimize Malware Spread",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Malware Spread\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "925",
    "title": "Long Pressed Name",
    "titleSlug": "long-pressed-name",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Long Pressed Name",
    "example_output": "# Expected output for Long Pressed Name",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Long Pressed Name\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "926",
    "title": "Flip String to Monotone Increasing",
    "titleSlug": "flip-string-to-monotone-increasing",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flip String to Monotone Increasing",
    "example_output": "# Expected output for Flip String to Monotone Increasing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flip String to Monotone Increasing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "927",
    "title": "Three Equal Parts",
    "titleSlug": "three-equal-parts",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Three Equal Parts",
    "example_output": "# Expected output for Three Equal Parts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Three Equal Parts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "928",
    "title": "Minimize Malware Spread II",
    "titleSlug": "minimize-malware-spread-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Malware Spread II",
    "example_output": "# Expected output for Minimize Malware Spread II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Malware Spread II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "929",
    "title": "Unique Email Addresses",
    "titleSlug": "unique-email-addresses",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Email Addresses",
    "example_output": "# Expected output for Unique Email Addresses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Email Addresses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "930",
    "title": "Binary Subarrays With Sum",
    "titleSlug": "binary-subarrays-with-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Subarrays With Sum",
    "example_output": "# Expected output for Binary Subarrays With Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Subarrays With Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "931",
    "title": "Minimum Falling Path Sum",
    "titleSlug": "minimum-falling-path-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Falling Path Sum",
    "example_output": "# Expected output for Minimum Falling Path Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Falling Path Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "932",
    "title": "Beautiful Array",
    "titleSlug": "beautiful-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Divide and Conquer"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Beautiful Array",
    "example_output": "# Expected output for Beautiful Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Beautiful Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "933",
    "title": "Number of Recent Calls",
    "titleSlug": "number-of-recent-calls",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Recent Calls",
    "example_output": "# Expected output for Number of Recent Calls",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Recent Calls\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "934",
    "title": "Shortest Bridge",
    "titleSlug": "shortest-bridge",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Bridge",
    "example_output": "# Expected output for Shortest Bridge",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Bridge\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "935",
    "title": "Knight Dialer",
    "titleSlug": "knight-dialer",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Knight Dialer",
    "example_output": "# Expected output for Knight Dialer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Knight Dialer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "936",
    "title": "Stamping The Sequence",
    "titleSlug": "stamping-the-sequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stamping The Sequence",
    "example_output": "# Expected output for Stamping The Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stamping The Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "937",
    "title": "Reorder Data in Log Files",
    "titleSlug": "reorder-data-in-log-files",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reorder Data in Log Files",
    "example_output": "# Expected output for Reorder Data in Log Files",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reorder Data in Log Files\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "938",
    "title": "Range Sum of BST",
    "titleSlug": "range-sum-of-bst",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Sum of BST",
    "example_output": "# Expected output for Range Sum of BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Sum of BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "939",
    "title": "Minimum Area Rectangle",
    "titleSlug": "minimum-area-rectangle",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Area Rectangle",
    "example_output": "# Expected output for Minimum Area Rectangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Area Rectangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "940",
    "title": "Distinct Subsequences II",
    "titleSlug": "distinct-subsequences-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distinct Subsequences II",
    "example_output": "# Expected output for Distinct Subsequences II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distinct Subsequences II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "941",
    "title": "Valid Mountain Array",
    "titleSlug": "valid-mountain-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Mountain Array",
    "example_output": "# Expected output for Valid Mountain Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Mountain Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "942",
    "title": "DI String Match",
    "titleSlug": "di-string-match",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for DI String Match",
    "example_output": "# Expected output for DI String Match",
    "status": "TO_DO",
    "description": "Solve the problem titled \"DI String Match\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "943",
    "title": "Find the Shortest Superstring",
    "titleSlug": "find-the-shortest-superstring",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Shortest Superstring",
    "example_output": "# Expected output for Find the Shortest Superstring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Shortest Superstring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "944",
    "title": "Delete Columns to Make Sorted",
    "titleSlug": "delete-columns-to-make-sorted",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Columns to Make Sorted",
    "example_output": "# Expected output for Delete Columns to Make Sorted",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Columns to Make Sorted\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "945",
    "title": "Minimum Increment to Make Array Unique",
    "titleSlug": "minimum-increment-to-make-array-unique",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Increment to Make Array Unique",
    "example_output": "# Expected output for Minimum Increment to Make Array Unique",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Increment to Make Array Unique\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "946",
    "title": "Validate Stack Sequences",
    "titleSlug": "validate-stack-sequences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Validate Stack Sequences",
    "example_output": "# Expected output for Validate Stack Sequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Validate Stack Sequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "947",
    "title": "Most Stones Removed with Same Row or Column",
    "titleSlug": "most-stones-removed-with-same-row-or-column",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Stones Removed with Same Row or Column",
    "example_output": "# Expected output for Most Stones Removed with Same Row or Column",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Stones Removed with Same Row or Column\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "948",
    "title": "Bag of Tokens",
    "titleSlug": "bag-of-tokens",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bag of Tokens",
    "example_output": "# Expected output for Bag of Tokens",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bag of Tokens\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "949",
    "title": "Largest Time for Given Digits",
    "titleSlug": "largest-time-for-given-digits",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Time for Given Digits",
    "example_output": "# Expected output for Largest Time for Given Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Time for Given Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "950",
    "title": "Reveal Cards In Increasing Order",
    "titleSlug": "reveal-cards-in-increasing-order",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reveal Cards In Increasing Order",
    "example_output": "# Expected output for Reveal Cards In Increasing Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reveal Cards In Increasing Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "951",
    "title": "Flip Equivalent Binary Trees",
    "titleSlug": "flip-equivalent-binary-trees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flip Equivalent Binary Trees",
    "example_output": "# Expected output for Flip Equivalent Binary Trees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flip Equivalent Binary Trees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "952",
    "title": "Largest Component Size by Common Factor",
    "titleSlug": "largest-component-size-by-common-factor",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Component Size by Common Factor",
    "example_output": "# Expected output for Largest Component Size by Common Factor",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Component Size by Common Factor\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "953",
    "title": "Verifying an Alien Dictionary",
    "titleSlug": "verifying-an-alien-dictionary",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Verifying an Alien Dictionary",
    "example_output": "# Expected output for Verifying an Alien Dictionary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Verifying an Alien Dictionary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "954",
    "title": "Array of Doubled Pairs",
    "titleSlug": "array-of-doubled-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array of Doubled Pairs",
    "example_output": "# Expected output for Array of Doubled Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array of Doubled Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "955",
    "title": "Delete Columns to Make Sorted II",
    "titleSlug": "delete-columns-to-make-sorted-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Columns to Make Sorted II",
    "example_output": "# Expected output for Delete Columns to Make Sorted II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Columns to Make Sorted II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "956",
    "title": "Tallest Billboard",
    "titleSlug": "tallest-billboard",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tallest Billboard",
    "example_output": "# Expected output for Tallest Billboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tallest Billboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "957",
    "title": "Prison Cells After N Days",
    "titleSlug": "prison-cells-after-n-days",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Prison Cells After N Days",
    "example_output": "# Expected output for Prison Cells After N Days",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Prison Cells After N Days\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "958",
    "title": "Check Completeness of a Binary Tree",
    "titleSlug": "check-completeness-of-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check Completeness of a Binary Tree",
    "example_output": "# Expected output for Check Completeness of a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check Completeness of a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "959",
    "title": "Regions Cut By Slashes",
    "titleSlug": "regions-cut-by-slashes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Regions Cut By Slashes",
    "example_output": "# Expected output for Regions Cut By Slashes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Regions Cut By Slashes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "960",
    "title": "Delete Columns to Make Sorted III",
    "titleSlug": "delete-columns-to-make-sorted-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Columns to Make Sorted III",
    "example_output": "# Expected output for Delete Columns to Make Sorted III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Columns to Make Sorted III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "961",
    "title": "N-Repeated Element in Size 2N Array",
    "titleSlug": "n-repeated-element-in-size-2n-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for N-Repeated Element in Size 2N Array",
    "example_output": "# Expected output for N-Repeated Element in Size 2N Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"N-Repeated Element in Size 2N Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "962",
    "title": "Maximum Width Ramp",
    "titleSlug": "maximum-width-ramp",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Width Ramp",
    "example_output": "# Expected output for Maximum Width Ramp",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Width Ramp\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "963",
    "title": "Minimum Area Rectangle II",
    "titleSlug": "minimum-area-rectangle-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Area Rectangle II",
    "example_output": "# Expected output for Minimum Area Rectangle II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Area Rectangle II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "964",
    "title": "Least Operators to Express Number",
    "titleSlug": "least-operators-to-express-number",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Least Operators to Express Number",
    "example_output": "# Expected output for Least Operators to Express Number",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Least Operators to Express Number\"."
  },
  {
    "id": "965",
    "title": "Univalued Binary Tree",
    "titleSlug": "univalued-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Univalued Binary Tree",
    "example_output": "# Expected output for Univalued Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Univalued Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "966",
    "title": "Vowel Spellchecker",
    "titleSlug": "vowel-spellchecker",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Vowel Spellchecker",
    "example_output": "# Expected output for Vowel Spellchecker",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Vowel Spellchecker\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "967",
    "title": "Numbers With Same Consecutive Differences",
    "titleSlug": "numbers-with-same-consecutive-differences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Backtracking"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Numbers With Same Consecutive Differences",
    "example_output": "# Expected output for Numbers With Same Consecutive Differences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Numbers With Same Consecutive Differences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "968",
    "title": "Binary Tree Cameras",
    "titleSlug": "binary-tree-cameras",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Cameras",
    "example_output": "# Expected output for Binary Tree Cameras",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Cameras\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "969",
    "title": "Pancake Sorting",
    "titleSlug": "pancake-sorting",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pancake Sorting",
    "example_output": "# Expected output for Pancake Sorting",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pancake Sorting\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "970",
    "title": "Powerful Integers",
    "titleSlug": "powerful-integers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Powerful Integers",
    "example_output": "# Expected output for Powerful Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Powerful Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "971",
    "title": "Flip Binary Tree To Match Preorder Traversal",
    "titleSlug": "flip-binary-tree-to-match-preorder-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flip Binary Tree To Match Preorder Traversal",
    "example_output": "# Expected output for Flip Binary Tree To Match Preorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flip Binary Tree To Match Preorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "972",
    "title": "Equal Rational Numbers",
    "titleSlug": "equal-rational-numbers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Equal Rational Numbers",
    "example_output": "# Expected output for Equal Rational Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Equal Rational Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "973",
    "title": "K Closest Points to Origin",
    "titleSlug": "k-closest-points-to-origin",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Quickselect"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K Closest Points to Origin",
    "example_output": "# Expected output for K Closest Points to Origin",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K Closest Points to Origin\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "974",
    "title": "Subarray Sums Divisible by K",
    "titleSlug": "subarray-sums-divisible-by-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subarray Sums Divisible by K",
    "example_output": "# Expected output for Subarray Sums Divisible by K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subarray Sums Divisible by K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "975",
    "title": "Odd Even Jump",
    "titleSlug": "odd-even-jump",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Odd Even Jump",
    "example_output": "# Expected output for Odd Even Jump",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Odd Even Jump\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "976",
    "title": "Largest Perimeter Triangle",
    "titleSlug": "largest-perimeter-triangle",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Perimeter Triangle",
    "example_output": "# Expected output for Largest Perimeter Triangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Perimeter Triangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "977",
    "title": "Squares of a Sorted Array",
    "titleSlug": "squares-of-a-sorted-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Squares of a Sorted Array",
    "example_output": "# Expected output for Squares of a Sorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Squares of a Sorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "978",
    "title": "Longest Turbulent Subarray",
    "titleSlug": "longest-turbulent-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Turbulent Subarray",
    "example_output": "# Expected output for Longest Turbulent Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Turbulent Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "979",
    "title": "Distribute Coins in Binary Tree",
    "titleSlug": "distribute-coins-in-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distribute Coins in Binary Tree",
    "example_output": "# Expected output for Distribute Coins in Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distribute Coins in Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "980",
    "title": "Unique Paths III",
    "titleSlug": "unique-paths-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Paths III",
    "example_output": "# Expected output for Unique Paths III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Paths III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "981",
    "title": "Time Based Key-Value Store",
    "titleSlug": "time-based-key-value-store",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Time Based Key-Value Store",
    "example_output": "# Expected output for Time Based Key-Value Store",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Time Based Key-Value Store\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "982",
    "title": "Triples with Bitwise AND Equal To Zero",
    "titleSlug": "triples-with-bitwise-and-equal-to-zero",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Triples with Bitwise AND Equal To Zero",
    "example_output": "# Expected output for Triples with Bitwise AND Equal To Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Triples with Bitwise AND Equal To Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "983",
    "title": "Minimum Cost For Tickets",
    "titleSlug": "minimum-cost-for-tickets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost For Tickets",
    "example_output": "# Expected output for Minimum Cost For Tickets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost For Tickets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "984",
    "title": "String Without AAA or BBB",
    "titleSlug": "string-without-aaa-or-bbb",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for String Without AAA or BBB",
    "example_output": "# Expected output for String Without AAA or BBB",
    "status": "TO_DO",
    "description": "Solve the problem titled \"String Without AAA or BBB\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "985",
    "title": "Sum of Even Numbers After Queries",
    "titleSlug": "sum-of-even-numbers-after-queries",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Even Numbers After Queries",
    "example_output": "# Expected output for Sum of Even Numbers After Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Even Numbers After Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "986",
    "title": "Interval List Intersections",
    "titleSlug": "interval-list-intersections",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Line Sweep"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Interval List Intersections",
    "example_output": "# Expected output for Interval List Intersections",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Interval List Intersections\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "987",
    "title": "Vertical Order Traversal of a Binary Tree",
    "titleSlug": "vertical-order-traversal-of-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Vertical Order Traversal of a Binary Tree",
    "example_output": "# Expected output for Vertical Order Traversal of a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Vertical Order Traversal of a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "988",
    "title": "Smallest String Starting From Leaf",
    "titleSlug": "smallest-string-starting-from-leaf",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest String Starting From Leaf",
    "example_output": "# Expected output for Smallest String Starting From Leaf",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest String Starting From Leaf\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "989",
    "title": "Add to Array-Form of Integer",
    "titleSlug": "add-to-array-form-of-integer",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add to Array-Form of Integer",
    "example_output": "# Expected output for Add to Array-Form of Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add to Array-Form of Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "990",
    "title": "Satisfiability of Equality Equations",
    "titleSlug": "satisfiability-of-equality-equations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Satisfiability of Equality Equations",
    "example_output": "# Expected output for Satisfiability of Equality Equations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Satisfiability of Equality Equations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "991",
    "title": "Broken Calculator",
    "titleSlug": "broken-calculator",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Broken Calculator",
    "example_output": "# Expected output for Broken Calculator",
    "status": "TO_DO",
    "description": "Implement a calculator that supports the logic described in \"Broken Calculator\". The calculator may need to parse expressions and compute results."
  },
  {
    "id": "992",
    "title": "Subarrays with K Different Integers",
    "titleSlug": "subarrays-with-k-different-integers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subarrays with K Different Integers",
    "example_output": "# Expected output for Subarrays with K Different Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subarrays with K Different Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "993",
    "title": "Cousins in Binary Tree",
    "titleSlug": "cousins-in-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cousins in Binary Tree",
    "example_output": "# Expected output for Cousins in Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cousins in Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "994",
    "title": "Rotting Oranges",
    "titleSlug": "rotting-oranges",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rotting Oranges",
    "example_output": "# Expected output for Rotting Oranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rotting Oranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "995",
    "title": "Minimum Number of K Consecutive Bit Flips",
    "titleSlug": "minimum-number-of-k-consecutive-bit-flips",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of K Consecutive Bit Flips",
    "example_output": "# Expected output for Minimum Number of K Consecutive Bit Flips",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of K Consecutive Bit Flips\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "996",
    "title": "Number of Squareful Arrays",
    "titleSlug": "number-of-squareful-arrays",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Squareful Arrays",
    "example_output": "# Expected output for Number of Squareful Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Squareful Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "997",
    "title": "Find the Town Judge",
    "titleSlug": "find-the-town-judge",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Town Judge",
    "example_output": "# Expected output for Find the Town Judge",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Town Judge\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "998",
    "title": "Maximum Binary Tree II",
    "titleSlug": "maximum-binary-tree-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Binary Tree II",
    "example_output": "# Expected output for Maximum Binary Tree II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Binary Tree II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "999",
    "title": "Available Captures for Rook",
    "titleSlug": "available-captures-for-rook",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Available Captures for Rook",
    "example_output": "# Expected output for Available Captures for Rook",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Available Captures for Rook\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1000",
    "title": "Minimum Cost to Merge Stones",
    "titleSlug": "minimum-cost-to-merge-stones",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Merge Stones",
    "example_output": "# Expected output for Minimum Cost to Merge Stones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Merge Stones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1001",
    "title": "Grid Illumination",
    "titleSlug": "grid-illumination",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Grid Illumination",
    "example_output": "# Expected output for Grid Illumination",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Grid Illumination\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1002",
    "title": "Find Common Characters",
    "titleSlug": "find-common-characters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Common Characters",
    "example_output": "# Expected output for Find Common Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Common Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1003",
    "title": "Check If Word Is Valid After Substitutions",
    "titleSlug": "check-if-word-is-valid-after-substitutions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If Word Is Valid After Substitutions",
    "example_output": "# Expected output for Check If Word Is Valid After Substitutions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If Word Is Valid After Substitutions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1004",
    "title": "Max Consecutive Ones III",
    "titleSlug": "max-consecutive-ones-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Consecutive Ones III",
    "example_output": "# Expected output for Max Consecutive Ones III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Consecutive Ones III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1005",
    "title": "Maximize Sum Of Array After K Negations",
    "titleSlug": "maximize-sum-of-array-after-k-negations",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Sum Of Array After K Negations",
    "example_output": "# Expected output for Maximize Sum Of Array After K Negations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Sum Of Array After K Negations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1006",
    "title": "Clumsy Factorial",
    "titleSlug": "clumsy-factorial",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Clumsy Factorial",
    "example_output": "# Expected output for Clumsy Factorial",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Clumsy Factorial\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1007",
    "title": "Minimum Domino Rotations For Equal Row",
    "titleSlug": "minimum-domino-rotations-for-equal-row",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Domino Rotations For Equal Row",
    "example_output": "# Expected output for Minimum Domino Rotations For Equal Row",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Domino Rotations For Equal Row\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1008",
    "title": "Construct Binary Search Tree from Preorder Traversal",
    "titleSlug": "construct-binary-search-tree-from-preorder-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Binary Search Tree from Preorder Traversal",
    "example_output": "# Expected output for Construct Binary Search Tree from Preorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct Binary Search Tree from Preorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1009",
    "title": "Complement of Base 10 Integer",
    "titleSlug": "complement-of-base-10-integer",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Complement of Base 10 Integer",
    "example_output": "# Expected output for Complement of Base 10 Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Complement of Base 10 Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1010",
    "title": "Pairs of Songs With Total Durations Divisible by 60",
    "titleSlug": "pairs-of-songs-with-total-durations-divisible-by-60",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pairs of Songs With Total Durations Divisible by 60",
    "example_output": "# Expected output for Pairs of Songs With Total Durations Divisible by 60",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pairs of Songs With Total Durations Divisible by 60\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1011",
    "title": "Capacity To Ship Packages Within D Days",
    "titleSlug": "capacity-to-ship-packages-within-d-days",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Capacity To Ship Packages Within D Days",
    "example_output": "# Expected output for Capacity To Ship Packages Within D Days",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Capacity To Ship Packages Within D Days\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1012",
    "title": "Numbers With Repeated Digits",
    "titleSlug": "numbers-with-repeated-digits",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Numbers With Repeated Digits",
    "example_output": "# Expected output for Numbers With Repeated Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Numbers With Repeated Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1013",
    "title": "Partition Array Into Three Parts With Equal Sum",
    "titleSlug": "partition-array-into-three-parts-with-equal-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition Array Into Three Parts With Equal Sum",
    "example_output": "# Expected output for Partition Array Into Three Parts With Equal Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition Array Into Three Parts With Equal Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1014",
    "title": "Best Sightseeing Pair",
    "titleSlug": "best-sightseeing-pair",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Sightseeing Pair",
    "example_output": "# Expected output for Best Sightseeing Pair",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Sightseeing Pair\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1015",
    "title": "Smallest Integer Divisible by K",
    "titleSlug": "smallest-integer-divisible-by-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Integer Divisible by K",
    "example_output": "# Expected output for Smallest Integer Divisible by K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Integer Divisible by K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1016",
    "title": "Binary String With Substrings Representing 1 To N",
    "titleSlug": "binary-string-with-substrings-representing-1-to-n",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary String With Substrings Representing 1 To N",
    "example_output": "# Expected output for Binary String With Substrings Representing 1 To N",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary String With Substrings Representing 1 To N\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1017",
    "title": "Convert to Base -2",
    "titleSlug": "convert-to-base-2",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert to Base -2",
    "example_output": "# Expected output for Convert to Base -2",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert to Base -2\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1018",
    "title": "Binary Prefix Divisible By 5",
    "titleSlug": "binary-prefix-divisible-by-5",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Prefix Divisible By 5",
    "example_output": "# Expected output for Binary Prefix Divisible By 5",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Prefix Divisible By 5\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1019",
    "title": "Next Greater Node In Linked List",
    "titleSlug": "next-greater-node-in-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Greater Node In Linked List",
    "example_output": "# Expected output for Next Greater Node In Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Next Greater Node In Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1020",
    "title": "Number of Enclaves",
    "titleSlug": "number-of-enclaves",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Enclaves",
    "example_output": "# Expected output for Number of Enclaves",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Enclaves\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1021",
    "title": "Remove Outermost Parentheses",
    "titleSlug": "remove-outermost-parentheses",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Outermost Parentheses",
    "example_output": "# Expected output for Remove Outermost Parentheses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Outermost Parentheses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1022",
    "title": "Sum of Root To Leaf Binary Numbers",
    "titleSlug": "sum-of-root-to-leaf-binary-numbers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Root To Leaf Binary Numbers",
    "example_output": "# Expected output for Sum of Root To Leaf Binary Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Root To Leaf Binary Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1023",
    "title": "Camelcase Matching",
    "titleSlug": "camelcase-matching",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Camelcase Matching",
    "example_output": "# Expected output for Camelcase Matching",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Camelcase Matching\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1024",
    "title": "Video Stitching",
    "titleSlug": "video-stitching",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Video Stitching",
    "example_output": "# Expected output for Video Stitching",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Video Stitching\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1025",
    "title": "Divisor Game",
    "titleSlug": "divisor-game",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divisor Game",
    "example_output": "# Expected output for Divisor Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divisor Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1026",
    "title": "Maximum Difference Between Node and Ancestor",
    "titleSlug": "maximum-difference-between-node-and-ancestor",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Difference Between Node and Ancestor",
    "example_output": "# Expected output for Maximum Difference Between Node and Ancestor",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Difference Between Node and Ancestor\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1027",
    "title": "Longest Arithmetic Subsequence",
    "titleSlug": "longest-arithmetic-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Arithmetic Subsequence",
    "example_output": "# Expected output for Longest Arithmetic Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Arithmetic Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1028",
    "title": "Recover a Tree From Preorder Traversal",
    "titleSlug": "recover-a-tree-from-preorder-traversal",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Recover a Tree From Preorder Traversal",
    "example_output": "# Expected output for Recover a Tree From Preorder Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Recover a Tree From Preorder Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1029",
    "title": "Two City Scheduling",
    "titleSlug": "two-city-scheduling",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Two City Scheduling",
    "example_output": "# Expected output for Two City Scheduling",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Two City Scheduling\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1030",
    "title": "Matrix Cells in Distance Order",
    "titleSlug": "matrix-cells-in-distance-order",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Matrix Cells in Distance Order",
    "example_output": "# Expected output for Matrix Cells in Distance Order",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Matrix Cells in Distance Order\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1031",
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "titleSlug": "maximum-sum-of-two-non-overlapping-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum of Two Non-Overlapping Subarrays",
    "example_output": "# Expected output for Maximum Sum of Two Non-Overlapping Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum of Two Non-Overlapping Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1032",
    "title": "Stream of Characters",
    "titleSlug": "stream-of-characters",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stream of Characters",
    "example_output": "# Expected output for Stream of Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stream of Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1033",
    "title": "Moving Stones Until Consecutive",
    "titleSlug": "moving-stones-until-consecutive",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Brainteaser"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Moving Stones Until Consecutive",
    "example_output": "# Expected output for Moving Stones Until Consecutive",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Moving Stones Until Consecutive\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1034",
    "title": "Coloring A Border",
    "titleSlug": "coloring-a-border",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Coloring A Border",
    "example_output": "# Expected output for Coloring A Border",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Coloring A Border\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1035",
    "title": "Uncrossed Lines",
    "titleSlug": "uncrossed-lines",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Uncrossed Lines",
    "example_output": "# Expected output for Uncrossed Lines",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Uncrossed Lines\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1036",
    "title": "Escape a Large Maze",
    "titleSlug": "escape-a-large-maze",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Escape a Large Maze",
    "example_output": "# Expected output for Escape a Large Maze",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Escape a Large Maze\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1037",
    "title": "Valid Boomerang",
    "titleSlug": "valid-boomerang",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Boomerang",
    "example_output": "# Expected output for Valid Boomerang",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Boomerang\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1038",
    "title": "Binary Search Tree to Greater Sum Tree",
    "titleSlug": "binary-search-tree-to-greater-sum-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Search Tree to Greater Sum Tree",
    "example_output": "# Expected output for Binary Search Tree to Greater Sum Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Search Tree to Greater Sum Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1039",
    "title": "Minimum Score Triangulation of Polygon",
    "titleSlug": "minimum-score-triangulation-of-polygon",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Score Triangulation of Polygon",
    "example_output": "# Expected output for Minimum Score Triangulation of Polygon",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Score Triangulation of Polygon\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1040",
    "title": "Moving Stones Until Consecutive II",
    "titleSlug": "moving-stones-until-consecutive-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Moving Stones Until Consecutive II",
    "example_output": "# Expected output for Moving Stones Until Consecutive II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Moving Stones Until Consecutive II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1041",
    "title": "Robot Bounded In Circle",
    "titleSlug": "robot-bounded-in-circle",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Robot Bounded In Circle",
    "example_output": "# Expected output for Robot Bounded In Circle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Robot Bounded In Circle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1042",
    "title": "Flower Planting With No Adjacent",
    "titleSlug": "flower-planting-with-no-adjacent",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flower Planting With No Adjacent",
    "example_output": "# Expected output for Flower Planting With No Adjacent",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flower Planting With No Adjacent\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1043",
    "title": "Partition Array for Maximum Sum",
    "titleSlug": "partition-array-for-maximum-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition Array for Maximum Sum",
    "example_output": "# Expected output for Partition Array for Maximum Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition Array for Maximum Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1044",
    "title": "Longest Duplicate Substring",
    "titleSlug": "longest-duplicate-substring",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Suffix Array"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Duplicate Substring",
    "example_output": "# Expected output for Longest Duplicate Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Duplicate Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1045",
    "title": "Customers Who Bought All Products",
    "titleSlug": "customers-who-bought-all-products",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Customers Who Bought All Products",
    "example_output": "# Expected output for Customers Who Bought All Products",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Customers Who Bought All Products\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1046",
    "title": "Last Stone Weight",
    "titleSlug": "last-stone-weight",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Last Stone Weight",
    "example_output": "# Expected output for Last Stone Weight",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Last Stone Weight\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1047",
    "title": "Remove All Adjacent Duplicates In String",
    "titleSlug": "remove-all-adjacent-duplicates-in-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove All Adjacent Duplicates In String",
    "example_output": "# Expected output for Remove All Adjacent Duplicates In String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove All Adjacent Duplicates In String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1048",
    "title": "Longest String Chain",
    "titleSlug": "longest-string-chain",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest String Chain",
    "example_output": "# Expected output for Longest String Chain",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest String Chain\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1049",
    "title": "Last Stone Weight II",
    "titleSlug": "last-stone-weight-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Last Stone Weight II",
    "example_output": "# Expected output for Last Stone Weight II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Last Stone Weight II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1050",
    "title": "Actors and Directors Who Cooperated At Least Three Times",
    "titleSlug": "actors-and-directors-who-cooperated-at-least-three-times",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Actors and Directors Who Cooperated At Least Three Times",
    "example_output": "# Expected output for Actors and Directors Who Cooperated At Least Three Times",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Actors and Directors Who Cooperated At Least Three Times\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1051",
    "title": "Height Checker",
    "titleSlug": "height-checker",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Height Checker",
    "example_output": "# Expected output for Height Checker",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Height Checker\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1052",
    "title": "Grumpy Bookstore Owner",
    "titleSlug": "grumpy-bookstore-owner",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Grumpy Bookstore Owner",
    "example_output": "# Expected output for Grumpy Bookstore Owner",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Grumpy Bookstore Owner\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1053",
    "title": "Previous Permutation With One Swap",
    "titleSlug": "previous-permutation-with-one-swap",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Previous Permutation With One Swap",
    "example_output": "# Expected output for Previous Permutation With One Swap",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Previous Permutation With One Swap\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1054",
    "title": "Distant Barcodes",
    "titleSlug": "distant-barcodes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distant Barcodes",
    "example_output": "# Expected output for Distant Barcodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distant Barcodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1055",
    "title": "Shortest Way to Form String",
    "titleSlug": "shortest-way-to-form-string",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Way to Form String",
    "example_output": "# Expected output for Shortest Way to Form String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Way to Form String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1056",
    "title": "Confusing Number",
    "titleSlug": "confusing-number",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Confusing Number",
    "example_output": "# Expected output for Confusing Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Confusing Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1057",
    "title": "Campus Bikes",
    "titleSlug": "campus-bikes",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Campus Bikes",
    "example_output": "# Expected output for Campus Bikes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Campus Bikes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1058",
    "title": "Minimize Rounding Error to Meet Target",
    "titleSlug": "minimize-rounding-error-to-meet-target",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Rounding Error to Meet Target",
    "example_output": "# Expected output for Minimize Rounding Error to Meet Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Rounding Error to Meet Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1059",
    "title": "All Paths from Source Lead to Destination",
    "titleSlug": "all-paths-from-source-lead-to-destination",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All Paths from Source Lead to Destination",
    "example_output": "# Expected output for All Paths from Source Lead to Destination",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All Paths from Source Lead to Destination\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1060",
    "title": "Missing Element in Sorted Array",
    "titleSlug": "missing-element-in-sorted-array",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Missing Element in Sorted Array",
    "example_output": "# Expected output for Missing Element in Sorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Missing Element in Sorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1061",
    "title": "Lexicographically Smallest Equivalent String",
    "titleSlug": "lexicographically-smallest-equivalent-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lexicographically Smallest Equivalent String",
    "example_output": "# Expected output for Lexicographically Smallest Equivalent String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lexicographically Smallest Equivalent String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1062",
    "title": "Longest Repeating Substring",
    "titleSlug": "longest-repeating-substring",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Suffix Array"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Repeating Substring",
    "example_output": "# Expected output for Longest Repeating Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Repeating Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1063",
    "title": "Number of Valid Subarrays",
    "titleSlug": "number-of-valid-subarrays",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Valid Subarrays",
    "example_output": "# Expected output for Number of Valid Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Valid Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1064",
    "title": "Fixed Point",
    "titleSlug": "fixed-point",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fixed Point",
    "example_output": "# Expected output for Fixed Point",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fixed Point\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1065",
    "title": "Index Pairs of a String",
    "titleSlug": "index-pairs-of-a-string",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Index Pairs of a String",
    "example_output": "# Expected output for Index Pairs of a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Index Pairs of a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1066",
    "title": "Campus Bikes II",
    "titleSlug": "campus-bikes-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Campus Bikes II",
    "example_output": "# Expected output for Campus Bikes II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Campus Bikes II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1067",
    "title": "Digit Count in Range",
    "titleSlug": "digit-count-in-range",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Digit Count in Range",
    "example_output": "# Expected output for Digit Count in Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Digit Count in Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1068",
    "title": "Product Sales Analysis I",
    "titleSlug": "product-sales-analysis-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product Sales Analysis I",
    "example_output": "# Expected output for Product Sales Analysis I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product Sales Analysis I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1069",
    "title": "Product Sales Analysis II",
    "titleSlug": "product-sales-analysis-ii",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product Sales Analysis II",
    "example_output": "# Expected output for Product Sales Analysis II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product Sales Analysis II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1070",
    "title": "Product Sales Analysis III",
    "titleSlug": "product-sales-analysis-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product Sales Analysis III",
    "example_output": "# Expected output for Product Sales Analysis III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product Sales Analysis III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1071",
    "title": "Greatest Common Divisor of Strings",
    "titleSlug": "greatest-common-divisor-of-strings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Greatest Common Divisor of Strings",
    "example_output": "# Expected output for Greatest Common Divisor of Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Greatest Common Divisor of Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1072",
    "title": "Flip Columns For Maximum Number of Equal Rows",
    "titleSlug": "flip-columns-for-maximum-number-of-equal-rows",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flip Columns For Maximum Number of Equal Rows",
    "example_output": "# Expected output for Flip Columns For Maximum Number of Equal Rows",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flip Columns For Maximum Number of Equal Rows\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1073",
    "title": "Adding Two Negabinary Numbers",
    "titleSlug": "adding-two-negabinary-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Adding Two Negabinary Numbers",
    "example_output": "# Expected output for Adding Two Negabinary Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Adding Two Negabinary Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1074",
    "title": "Number of Submatrices That Sum to Target",
    "titleSlug": "number-of-submatrices-that-sum-to-target",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Submatrices That Sum to Target",
    "example_output": "# Expected output for Number of Submatrices That Sum to Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Submatrices That Sum to Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1075",
    "title": "Project Employees I",
    "titleSlug": "project-employees-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Project Employees I",
    "example_output": "# Expected output for Project Employees I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Project Employees I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1076",
    "title": "Project Employees II",
    "titleSlug": "project-employees-ii",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Project Employees II",
    "example_output": "# Expected output for Project Employees II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Project Employees II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1077",
    "title": "Project Employees III",
    "titleSlug": "project-employees-iii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Project Employees III",
    "example_output": "# Expected output for Project Employees III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Project Employees III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1078",
    "title": "Occurrences After Bigram",
    "titleSlug": "occurrences-after-bigram",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Occurrences After Bigram",
    "example_output": "# Expected output for Occurrences After Bigram",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Occurrences After Bigram\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1079",
    "title": "Letter Tile Possibilities",
    "titleSlug": "letter-tile-possibilities",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Letter Tile Possibilities",
    "example_output": "# Expected output for Letter Tile Possibilities",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Letter Tile Possibilities\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1080",
    "title": "Insufficient Nodes in Root to Leaf Paths",
    "titleSlug": "insufficient-nodes-in-root-to-leaf-paths",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Insufficient Nodes in Root to Leaf Paths",
    "example_output": "# Expected output for Insufficient Nodes in Root to Leaf Paths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Insufficient Nodes in Root to Leaf Paths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1081",
    "title": "Smallest Subsequence of Distinct Characters",
    "titleSlug": "smallest-subsequence-of-distinct-characters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Subsequence of Distinct Characters",
    "example_output": "# Expected output for Smallest Subsequence of Distinct Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Subsequence of Distinct Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1082",
    "title": "Sales Analysis I",
    "titleSlug": "sales-analysis-i",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sales Analysis I",
    "example_output": "# Expected output for Sales Analysis I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sales Analysis I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1083",
    "title": "Sales Analysis II",
    "titleSlug": "sales-analysis-ii",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sales Analysis II",
    "example_output": "# Expected output for Sales Analysis II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sales Analysis II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1084",
    "title": "Sales Analysis III",
    "titleSlug": "sales-analysis-iii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sales Analysis III",
    "example_output": "# Expected output for Sales Analysis III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sales Analysis III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1085",
    "title": "Sum of Digits in the Minimum Number",
    "titleSlug": "sum-of-digits-in-the-minimum-number",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Digits in the Minimum Number",
    "example_output": "# Expected output for Sum of Digits in the Minimum Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Digits in the Minimum Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1086",
    "title": "High Five",
    "titleSlug": "high-five",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for High Five",
    "example_output": "# Expected output for High Five",
    "status": "TO_DO",
    "description": "Solve the problem titled \"High Five\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1087",
    "title": "Brace Expansion",
    "titleSlug": "brace-expansion",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Brace Expansion",
    "example_output": "# Expected output for Brace Expansion",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Brace Expansion\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1088",
    "title": "Confusing Number II",
    "titleSlug": "confusing-number-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Confusing Number II",
    "example_output": "# Expected output for Confusing Number II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Confusing Number II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1089",
    "title": "Duplicate Zeros",
    "titleSlug": "duplicate-zeros",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Duplicate Zeros",
    "example_output": "# Expected output for Duplicate Zeros",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Duplicate Zeros\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1090",
    "title": "Largest Values From Labels",
    "titleSlug": "largest-values-from-labels",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Values From Labels",
    "example_output": "# Expected output for Largest Values From Labels",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Values From Labels\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1091",
    "title": "Shortest Path in Binary Matrix",
    "titleSlug": "shortest-path-in-binary-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Path in Binary Matrix",
    "example_output": "# Expected output for Shortest Path in Binary Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Shortest Path in Binary Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1092",
    "title": "Shortest Common Supersequence ",
    "titleSlug": "shortest-common-supersequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Common Supersequence ",
    "example_output": "# Expected output for Shortest Common Supersequence ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Common Supersequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1093",
    "title": "Statistics from a Large Sample",
    "titleSlug": "statistics-from-a-large-sample",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Probability and Statistics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Statistics from a Large Sample",
    "example_output": "# Expected output for Statistics from a Large Sample",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Statistics from a Large Sample\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1094",
    "title": "Car Pooling",
    "titleSlug": "car-pooling",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Car Pooling",
    "example_output": "# Expected output for Car Pooling",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Car Pooling\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1095",
    "title": "Find in Mountain Array",
    "titleSlug": "find-in-mountain-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find in Mountain Array",
    "example_output": "# Expected output for Find in Mountain Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find in Mountain Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1096",
    "title": "Brace Expansion II",
    "titleSlug": "brace-expansion-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Brace Expansion II",
    "example_output": "# Expected output for Brace Expansion II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Brace Expansion II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1097",
    "title": "Game Play Analysis V",
    "titleSlug": "game-play-analysis-v",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Game Play Analysis V",
    "example_output": "# Expected output for Game Play Analysis V",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Game Play Analysis V\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1098",
    "title": "Unpopular Books",
    "titleSlug": "unpopular-books",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unpopular Books",
    "example_output": "# Expected output for Unpopular Books",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unpopular Books\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1100",
    "title": "Find K-Length Substrings With No Repeated Characters",
    "titleSlug": "find-k-length-substrings-with-no-repeated-characters",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find K-Length Substrings With No Repeated Characters",
    "example_output": "# Expected output for Find K-Length Substrings With No Repeated Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find K-Length Substrings With No Repeated Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1101",
    "title": "The Earliest Moment When Everyone Become Friends",
    "titleSlug": "the-earliest-moment-when-everyone-become-friends",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Earliest Moment When Everyone Become Friends",
    "example_output": "# Expected output for The Earliest Moment When Everyone Become Friends",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Earliest Moment When Everyone Become Friends\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1102",
    "title": "Path With Maximum Minimum Value",
    "titleSlug": "path-with-maximum-minimum-value",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path With Maximum Minimum Value",
    "example_output": "# Expected output for Path With Maximum Minimum Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path With Maximum Minimum Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1103",
    "title": "Distribute Candies to People",
    "titleSlug": "distribute-candies-to-people",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distribute Candies to People",
    "example_output": "# Expected output for Distribute Candies to People",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distribute Candies to People\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1104",
    "title": "Path In Zigzag Labelled Binary Tree",
    "titleSlug": "path-in-zigzag-labelled-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path In Zigzag Labelled Binary Tree",
    "example_output": "# Expected output for Path In Zigzag Labelled Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path In Zigzag Labelled Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1105",
    "title": "Filling Bookcase Shelves",
    "titleSlug": "filling-bookcase-shelves",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Filling Bookcase Shelves",
    "example_output": "# Expected output for Filling Bookcase Shelves",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Filling Bookcase Shelves\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1106",
    "title": "Parsing A Boolean Expression",
    "titleSlug": "parsing-a-boolean-expression",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Parsing A Boolean Expression",
    "example_output": "# Expected output for Parsing A Boolean Expression",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Parsing A Boolean Expression\"."
  },
  {
    "id": "1107",
    "title": "New Users Daily Count",
    "titleSlug": "new-users-daily-count",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for New Users Daily Count",
    "example_output": "# Expected output for New Users Daily Count",
    "status": "TO_DO",
    "description": "Solve the problem titled \"New Users Daily Count\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1108",
    "title": "Defanging an IP Address",
    "titleSlug": "defanging-an-ip-address",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Defanging an IP Address",
    "example_output": "# Expected output for Defanging an IP Address",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Defanging an IP Address\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1109",
    "title": "Corporate Flight Bookings",
    "titleSlug": "corporate-flight-bookings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Corporate Flight Bookings",
    "example_output": "# Expected output for Corporate Flight Bookings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Corporate Flight Bookings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1110",
    "title": "Delete Nodes And Return Forest",
    "titleSlug": "delete-nodes-and-return-forest",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Nodes And Return Forest",
    "example_output": "# Expected output for Delete Nodes And Return Forest",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Nodes And Return Forest\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1111",
    "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
    "titleSlug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Nesting Depth of Two Valid Parentheses Strings",
    "example_output": "# Expected output for Maximum Nesting Depth of Two Valid Parentheses Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Nesting Depth of Two Valid Parentheses Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1112",
    "title": "Highest Grade For Each Student",
    "titleSlug": "highest-grade-for-each-student",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Highest Grade For Each Student",
    "example_output": "# Expected output for Highest Grade For Each Student",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Highest Grade For Each Student\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1113",
    "title": "Reported Posts",
    "titleSlug": "reported-posts",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reported Posts",
    "example_output": "# Expected output for Reported Posts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reported Posts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1114",
    "title": "Print in Order",
    "titleSlug": "print-in-order",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Print in Order",
    "example_output": "# Expected output for Print in Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Print in Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1115",
    "title": "Print FooBar Alternately",
    "titleSlug": "print-foobar-alternately",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Print FooBar Alternately",
    "example_output": "# Expected output for Print FooBar Alternately",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Print FooBar Alternately\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1116",
    "title": "Print Zero Even Odd",
    "titleSlug": "print-zero-even-odd",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Print Zero Even Odd",
    "example_output": "# Expected output for Print Zero Even Odd",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Print Zero Even Odd\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1117",
    "title": "Building H2O",
    "titleSlug": "building-h2o",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Building H2O",
    "example_output": "# Expected output for Building H2O",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Building H2O\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1118",
    "title": "Number of Days in a Month",
    "titleSlug": "number-of-days-in-a-month",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Days in a Month",
    "example_output": "# Expected output for Number of Days in a Month",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Days in a Month\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1119",
    "title": "Remove Vowels from a String",
    "titleSlug": "remove-vowels-from-a-string",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Vowels from a String",
    "example_output": "# Expected output for Remove Vowels from a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Vowels from a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1120",
    "title": "Maximum Average Subtree",
    "titleSlug": "maximum-average-subtree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Average Subtree",
    "example_output": "# Expected output for Maximum Average Subtree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Average Subtree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1121",
    "title": "Divide Array Into Increasing Sequences",
    "titleSlug": "divide-array-into-increasing-sequences",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Array Into Increasing Sequences",
    "example_output": "# Expected output for Divide Array Into Increasing Sequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide Array Into Increasing Sequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1122",
    "title": "Relative Sort Array",
    "titleSlug": "relative-sort-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Relative Sort Array",
    "example_output": "# Expected output for Relative Sort Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Relative Sort Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1123",
    "title": "Lowest Common Ancestor of Deepest Leaves",
    "titleSlug": "lowest-common-ancestor-of-deepest-leaves",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lowest Common Ancestor of Deepest Leaves",
    "example_output": "# Expected output for Lowest Common Ancestor of Deepest Leaves",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lowest Common Ancestor of Deepest Leaves\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1124",
    "title": "Longest Well-Performing Interval",
    "titleSlug": "longest-well-performing-interval",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Well-Performing Interval",
    "example_output": "# Expected output for Longest Well-Performing Interval",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Well-Performing Interval\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1125",
    "title": "Smallest Sufficient Team",
    "titleSlug": "smallest-sufficient-team",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Sufficient Team",
    "example_output": "# Expected output for Smallest Sufficient Team",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Sufficient Team\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1126",
    "title": "Active Businesses",
    "titleSlug": "active-businesses",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Active Businesses",
    "example_output": "# Expected output for Active Businesses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Active Businesses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1127",
    "title": "User Purchase Platform",
    "titleSlug": "user-purchase-platform",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for User Purchase Platform",
    "example_output": "# Expected output for User Purchase Platform",
    "status": "TO_DO",
    "description": "Solve the problem titled \"User Purchase Platform\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1128",
    "title": "Number of Equivalent Domino Pairs",
    "titleSlug": "number-of-equivalent-domino-pairs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Equivalent Domino Pairs",
    "example_output": "# Expected output for Number of Equivalent Domino Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Equivalent Domino Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1129",
    "title": "Shortest Path with Alternating Colors",
    "titleSlug": "shortest-path-with-alternating-colors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Path with Alternating Colors",
    "example_output": "# Expected output for Shortest Path with Alternating Colors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Path with Alternating Colors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1130",
    "title": "Minimum Cost Tree From Leaf Values",
    "titleSlug": "minimum-cost-tree-from-leaf-values",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost Tree From Leaf Values",
    "example_output": "# Expected output for Minimum Cost Tree From Leaf Values",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost Tree From Leaf Values\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1131",
    "title": "Maximum of Absolute Value Expression",
    "titleSlug": "maximum-of-absolute-value-expression",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum of Absolute Value Expression",
    "example_output": "# Expected output for Maximum of Absolute Value Expression",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Maximum of Absolute Value Expression\"."
  },
  {
    "id": "1132",
    "title": "Reported Posts II",
    "titleSlug": "reported-posts-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reported Posts II",
    "example_output": "# Expected output for Reported Posts II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reported Posts II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1133",
    "title": "Largest Unique Number",
    "titleSlug": "largest-unique-number",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Unique Number",
    "example_output": "# Expected output for Largest Unique Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Unique Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1134",
    "title": "Armstrong Number",
    "titleSlug": "armstrong-number",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Armstrong Number",
    "example_output": "# Expected output for Armstrong Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Armstrong Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1135",
    "title": "Connecting Cities With Minimum Cost",
    "titleSlug": "connecting-cities-with-minimum-cost",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Minimum Spanning Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Connecting Cities With Minimum Cost",
    "example_output": "# Expected output for Connecting Cities With Minimum Cost",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Connecting Cities With Minimum Cost\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1136",
    "title": "Parallel Courses",
    "titleSlug": "parallel-courses",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Parallel Courses",
    "example_output": "# Expected output for Parallel Courses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Parallel Courses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1137",
    "title": "N-th Tribonacci Number",
    "titleSlug": "n-th-tribonacci-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for N-th Tribonacci Number",
    "example_output": "# Expected output for N-th Tribonacci Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"N-th Tribonacci Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1138",
    "title": "Alphabet Board Path",
    "titleSlug": "alphabet-board-path",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Alphabet Board Path",
    "example_output": "# Expected output for Alphabet Board Path",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Alphabet Board Path\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1139",
    "title": "Largest 1-Bordered Square",
    "titleSlug": "largest-1-bordered-square",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest 1-Bordered Square",
    "example_output": "# Expected output for Largest 1-Bordered Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest 1-Bordered Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1140",
    "title": "Stone Game II",
    "titleSlug": "stone-game-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game II",
    "example_output": "# Expected output for Stone Game II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1141",
    "title": "User Activity for the Past 30 Days I",
    "titleSlug": "user-activity-for-the-past-30-days-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for User Activity for the Past 30 Days I",
    "example_output": "# Expected output for User Activity for the Past 30 Days I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"User Activity for the Past 30 Days I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1142",
    "title": "User Activity for the Past 30 Days II",
    "titleSlug": "user-activity-for-the-past-30-days-ii",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for User Activity for the Past 30 Days II",
    "example_output": "# Expected output for User Activity for the Past 30 Days II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"User Activity for the Past 30 Days II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1143",
    "title": "Longest Common Subsequence",
    "titleSlug": "longest-common-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Common Subsequence",
    "example_output": "# Expected output for Longest Common Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Common Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1144",
    "title": "Decrease Elements To Make Array Zigzag",
    "titleSlug": "decrease-elements-to-make-array-zigzag",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decrease Elements To Make Array Zigzag",
    "example_output": "# Expected output for Decrease Elements To Make Array Zigzag",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decrease Elements To Make Array Zigzag\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1145",
    "title": "Binary Tree Coloring Game",
    "titleSlug": "binary-tree-coloring-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Tree Coloring Game",
    "example_output": "# Expected output for Binary Tree Coloring Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Tree Coloring Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1146",
    "title": "Snapshot Array",
    "titleSlug": "snapshot-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Snapshot Array",
    "example_output": "# Expected output for Snapshot Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Snapshot Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1147",
    "title": "Longest Chunked Palindrome Decomposition",
    "titleSlug": "longest-chunked-palindrome-decomposition",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Chunked Palindrome Decomposition",
    "example_output": "# Expected output for Longest Chunked Palindrome Decomposition",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Longest Chunked Palindrome Decomposition\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1148",
    "title": "Article Views I",
    "titleSlug": "article-views-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Article Views I",
    "example_output": "# Expected output for Article Views I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Article Views I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1149",
    "title": "Article Views II",
    "titleSlug": "article-views-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Article Views II",
    "example_output": "# Expected output for Article Views II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Article Views II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1150",
    "title": "Check If a Number Is Majority Element in a Sorted Array",
    "titleSlug": "check-if-a-number-is-majority-element-in-a-sorted-array",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If a Number Is Majority Element in a Sorted Array",
    "example_output": "# Expected output for Check If a Number Is Majority Element in a Sorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If a Number Is Majority Element in a Sorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1151",
    "title": "Minimum Swaps to Group All 1's Together",
    "titleSlug": "minimum-swaps-to-group-all-1s-together",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Swaps to Group All 1's Together",
    "example_output": "# Expected output for Minimum Swaps to Group All 1's Together",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Swaps to Group All 1's Together\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1152",
    "title": "Analyze User Website Visit Pattern",
    "titleSlug": "analyze-user-website-visit-pattern",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Analyze User Website Visit Pattern",
    "example_output": "# Expected output for Analyze User Website Visit Pattern",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Analyze User Website Visit Pattern\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1153",
    "title": "String Transforms Into Another String",
    "titleSlug": "string-transforms-into-another-string",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for String Transforms Into Another String",
    "example_output": "# Expected output for String Transforms Into Another String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"String Transforms Into Another String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1154",
    "title": "Day of the Year",
    "titleSlug": "day-of-the-year",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Day of the Year",
    "example_output": "# Expected output for Day of the Year",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Day of the Year\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1155",
    "title": "Number of Dice Rolls With Target Sum",
    "titleSlug": "number-of-dice-rolls-with-target-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Dice Rolls With Target Sum",
    "example_output": "# Expected output for Number of Dice Rolls With Target Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Dice Rolls With Target Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1156",
    "title": "Swap For Longest Repeated Character Substring",
    "titleSlug": "swap-for-longest-repeated-character-substring",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Swap For Longest Repeated Character Substring",
    "example_output": "# Expected output for Swap For Longest Repeated Character Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Swap For Longest Repeated Character Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1157",
    "title": "Online Majority Element In Subarray",
    "titleSlug": "online-majority-element-in-subarray",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Online Majority Element In Subarray",
    "example_output": "# Expected output for Online Majority Element In Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Online Majority Element In Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1158",
    "title": "Market Analysis I",
    "titleSlug": "market-analysis-i",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Market Analysis I",
    "example_output": "# Expected output for Market Analysis I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Market Analysis I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1159",
    "title": "Market Analysis II",
    "titleSlug": "market-analysis-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Market Analysis II",
    "example_output": "# Expected output for Market Analysis II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Market Analysis II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1160",
    "title": "Find Words That Can Be Formed by Characters",
    "titleSlug": "find-words-that-can-be-formed-by-characters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Words That Can Be Formed by Characters",
    "example_output": "# Expected output for Find Words That Can Be Formed by Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Words That Can Be Formed by Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1161",
    "title": "Maximum Level Sum of a Binary Tree",
    "titleSlug": "maximum-level-sum-of-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Level Sum of a Binary Tree",
    "example_output": "# Expected output for Maximum Level Sum of a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Level Sum of a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1162",
    "title": "As Far from Land as Possible",
    "titleSlug": "as-far-from-land-as-possible",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for As Far from Land as Possible",
    "example_output": "# Expected output for As Far from Land as Possible",
    "status": "TO_DO",
    "description": "Solve the problem titled \"As Far from Land as Possible\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1163",
    "title": "Last Substring in Lexicographical Order",
    "titleSlug": "last-substring-in-lexicographical-order",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Last Substring in Lexicographical Order",
    "example_output": "# Expected output for Last Substring in Lexicographical Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Last Substring in Lexicographical Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1164",
    "title": "Product Price at a Given Date",
    "titleSlug": "product-price-at-a-given-date",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product Price at a Given Date",
    "example_output": "# Expected output for Product Price at a Given Date",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product Price at a Given Date\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1165",
    "title": "Single-Row Keyboard",
    "titleSlug": "single-row-keyboard",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Single-Row Keyboard",
    "example_output": "# Expected output for Single-Row Keyboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Single-Row Keyboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1166",
    "title": "Design File System",
    "titleSlug": "design-file-system",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design File System",
    "example_output": "# Expected output for Design File System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design File System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1167",
    "title": "Minimum Cost to Connect Sticks",
    "titleSlug": "minimum-cost-to-connect-sticks",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Connect Sticks",
    "example_output": "# Expected output for Minimum Cost to Connect Sticks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Connect Sticks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1168",
    "title": "Optimize Water Distribution in a Village",
    "titleSlug": "optimize-water-distribution-in-a-village",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Minimum Spanning Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Optimize Water Distribution in a Village",
    "example_output": "# Expected output for Optimize Water Distribution in a Village",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Optimize Water Distribution in a Village\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1169",
    "title": "Invalid Transactions",
    "titleSlug": "invalid-transactions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Invalid Transactions",
    "example_output": "# Expected output for Invalid Transactions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Invalid Transactions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1170",
    "title": "Compare Strings by Frequency of the Smallest Character",
    "titleSlug": "compare-strings-by-frequency-of-the-smallest-character",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Compare Strings by Frequency of the Smallest Character",
    "example_output": "# Expected output for Compare Strings by Frequency of the Smallest Character",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Compare Strings by Frequency of the Smallest Character\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1171",
    "title": "Remove Zero Sum Consecutive Nodes from Linked List",
    "titleSlug": "remove-zero-sum-consecutive-nodes-from-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Zero Sum Consecutive Nodes from Linked List",
    "example_output": "# Expected output for Remove Zero Sum Consecutive Nodes from Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Zero Sum Consecutive Nodes from Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1172",
    "title": "Dinner Plate Stacks",
    "titleSlug": "dinner-plate-stacks",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Dinner Plate Stacks",
    "example_output": "# Expected output for Dinner Plate Stacks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Dinner Plate Stacks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1173",
    "title": "Immediate Food Delivery I",
    "titleSlug": "immediate-food-delivery-i",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Immediate Food Delivery I",
    "example_output": "# Expected output for Immediate Food Delivery I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Immediate Food Delivery I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1174",
    "title": "Immediate Food Delivery II",
    "titleSlug": "immediate-food-delivery-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Immediate Food Delivery II",
    "example_output": "# Expected output for Immediate Food Delivery II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Immediate Food Delivery II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1175",
    "title": "Prime Arrangements",
    "titleSlug": "prime-arrangements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Prime Arrangements",
    "example_output": "# Expected output for Prime Arrangements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Prime Arrangements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1176",
    "title": "Diet Plan Performance",
    "titleSlug": "diet-plan-performance",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Diet Plan Performance",
    "example_output": "# Expected output for Diet Plan Performance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Diet Plan Performance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1177",
    "title": "Can Make Palindrome from Substring",
    "titleSlug": "can-make-palindrome-from-substring",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Can Make Palindrome from Substring",
    "example_output": "# Expected output for Can Make Palindrome from Substring",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Can Make Palindrome from Substring\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1178",
    "title": "Number of Valid Words for Each Puzzle",
    "titleSlug": "number-of-valid-words-for-each-puzzle",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Valid Words for Each Puzzle",
    "example_output": "# Expected output for Number of Valid Words for Each Puzzle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Valid Words for Each Puzzle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1179",
    "title": "Reformat Department Table",
    "titleSlug": "reformat-department-table",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reformat Department Table",
    "example_output": "# Expected output for Reformat Department Table",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reformat Department Table\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1180",
    "title": "Count Substrings with Only One Distinct Letter",
    "titleSlug": "count-substrings-with-only-one-distinct-letter",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Substrings with Only One Distinct Letter",
    "example_output": "# Expected output for Count Substrings with Only One Distinct Letter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Substrings with Only One Distinct Letter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1181",
    "title": "Before and After Puzzle",
    "titleSlug": "before-and-after-puzzle",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Before and After Puzzle",
    "example_output": "# Expected output for Before and After Puzzle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Before and After Puzzle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1182",
    "title": "Shortest Distance to Target Color",
    "titleSlug": "shortest-distance-to-target-color",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Distance to Target Color",
    "example_output": "# Expected output for Shortest Distance to Target Color",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Distance to Target Color\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1183",
    "title": "Maximum Number of Ones",
    "titleSlug": "maximum-number-of-ones",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Ones",
    "example_output": "# Expected output for Maximum Number of Ones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Ones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1184",
    "title": "Distance Between Bus Stops",
    "titleSlug": "distance-between-bus-stops",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distance Between Bus Stops",
    "example_output": "# Expected output for Distance Between Bus Stops",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distance Between Bus Stops\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1185",
    "title": "Day of the Week",
    "titleSlug": "day-of-the-week",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Day of the Week",
    "example_output": "# Expected output for Day of the Week",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Day of the Week\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1186",
    "title": "Maximum Subarray Sum with One Deletion",
    "titleSlug": "maximum-subarray-sum-with-one-deletion",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Subarray Sum with One Deletion",
    "example_output": "# Expected output for Maximum Subarray Sum with One Deletion",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Subarray Sum with One Deletion\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1187",
    "title": "Make Array Strictly Increasing",
    "titleSlug": "make-array-strictly-increasing",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Array Strictly Increasing",
    "example_output": "# Expected output for Make Array Strictly Increasing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Array Strictly Increasing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1188",
    "title": "Design Bounded Blocking Queue",
    "titleSlug": "design-bounded-blocking-queue",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Bounded Blocking Queue",
    "example_output": "# Expected output for Design Bounded Blocking Queue",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Bounded Blocking Queue\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1189",
    "title": "Maximum Number of Balloons",
    "titleSlug": "maximum-number-of-balloons",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Balloons",
    "example_output": "# Expected output for Maximum Number of Balloons",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Balloons\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1190",
    "title": "Reverse Substrings Between Each Pair of Parentheses",
    "titleSlug": "reverse-substrings-between-each-pair-of-parentheses",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Substrings Between Each Pair of Parentheses",
    "example_output": "# Expected output for Reverse Substrings Between Each Pair of Parentheses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Substrings Between Each Pair of Parentheses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1191",
    "title": "K-Concatenation Maximum Sum",
    "titleSlug": "k-concatenation-maximum-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K-Concatenation Maximum Sum",
    "example_output": "# Expected output for K-Concatenation Maximum Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K-Concatenation Maximum Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1192",
    "title": "Critical Connections in a Network",
    "titleSlug": "critical-connections-in-a-network",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Biconnected Component"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Critical Connections in a Network",
    "example_output": "# Expected output for Critical Connections in a Network",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Critical Connections in a Network\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1193",
    "title": "Monthly Transactions I",
    "titleSlug": "monthly-transactions-i",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Monthly Transactions I",
    "example_output": "# Expected output for Monthly Transactions I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Monthly Transactions I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1194",
    "title": "Tournament Winners",
    "titleSlug": "tournament-winners",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tournament Winners",
    "example_output": "# Expected output for Tournament Winners",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tournament Winners\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1195",
    "title": "Fizz Buzz Multithreaded",
    "titleSlug": "fizz-buzz-multithreaded",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fizz Buzz Multithreaded",
    "example_output": "# Expected output for Fizz Buzz Multithreaded",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fizz Buzz Multithreaded\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1196",
    "title": "How Many Apples Can You Put into the Basket",
    "titleSlug": "how-many-apples-can-you-put-into-the-basket",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for How Many Apples Can You Put into the Basket",
    "example_output": "# Expected output for How Many Apples Can You Put into the Basket",
    "status": "TO_DO",
    "description": "Solve the problem titled \"How Many Apples Can You Put into the Basket\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1197",
    "title": "Minimum Knight Moves",
    "titleSlug": "minimum-knight-moves",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Knight Moves",
    "example_output": "# Expected output for Minimum Knight Moves",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Knight Moves\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1198",
    "title": "Find Smallest Common Element in All Rows",
    "titleSlug": "find-smallest-common-element-in-all-rows",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Smallest Common Element in All Rows",
    "example_output": "# Expected output for Find Smallest Common Element in All Rows",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Smallest Common Element in All Rows\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1199",
    "title": "Minimum Time to Build Blocks",
    "titleSlug": "minimum-time-to-build-blocks",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Build Blocks",
    "example_output": "# Expected output for Minimum Time to Build Blocks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Build Blocks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1200",
    "title": "Minimum Absolute Difference",
    "titleSlug": "minimum-absolute-difference",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Absolute Difference",
    "example_output": "# Expected output for Minimum Absolute Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Absolute Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1201",
    "title": "Ugly Number III",
    "titleSlug": "ugly-number-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ugly Number III",
    "example_output": "# Expected output for Ugly Number III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ugly Number III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1202",
    "title": "Smallest String With Swaps",
    "titleSlug": "smallest-string-with-swaps",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest String With Swaps",
    "example_output": "# Expected output for Smallest String With Swaps",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest String With Swaps\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1203",
    "title": "Sort Items by Groups Respecting Dependencies",
    "titleSlug": "sort-items-by-groups-respecting-dependencies",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Items by Groups Respecting Dependencies",
    "example_output": "# Expected output for Sort Items by Groups Respecting Dependencies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Items by Groups Respecting Dependencies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1204",
    "title": "Last Person to Fit in the Bus",
    "titleSlug": "last-person-to-fit-in-the-bus",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Last Person to Fit in the Bus",
    "example_output": "# Expected output for Last Person to Fit in the Bus",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Last Person to Fit in the Bus\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1205",
    "title": "Monthly Transactions II",
    "titleSlug": "monthly-transactions-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Monthly Transactions II",
    "example_output": "# Expected output for Monthly Transactions II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Monthly Transactions II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1206",
    "title": "Design Skiplist",
    "titleSlug": "design-skiplist",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Skiplist",
    "example_output": "# Expected output for Design Skiplist",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Skiplist\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1207",
    "title": "Unique Number of Occurrences",
    "titleSlug": "unique-number-of-occurrences",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Number of Occurrences",
    "example_output": "# Expected output for Unique Number of Occurrences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Number of Occurrences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1208",
    "title": "Get Equal Substrings Within Budget",
    "titleSlug": "get-equal-substrings-within-budget",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Get Equal Substrings Within Budget",
    "example_output": "# Expected output for Get Equal Substrings Within Budget",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Get Equal Substrings Within Budget\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1209",
    "title": "Remove All Adjacent Duplicates in String II",
    "titleSlug": "remove-all-adjacent-duplicates-in-string-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove All Adjacent Duplicates in String II",
    "example_output": "# Expected output for Remove All Adjacent Duplicates in String II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove All Adjacent Duplicates in String II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1210",
    "title": "Minimum Moves to Reach Target with Rotations",
    "titleSlug": "minimum-moves-to-reach-target-with-rotations",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Moves to Reach Target with Rotations",
    "example_output": "# Expected output for Minimum Moves to Reach Target with Rotations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Moves to Reach Target with Rotations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1211",
    "title": "Queries Quality and Percentage",
    "titleSlug": "queries-quality-and-percentage",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Queries Quality and Percentage",
    "example_output": "# Expected output for Queries Quality and Percentage",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Queries Quality and Percentage\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1212",
    "title": "Team Scores in Football Tournament",
    "titleSlug": "team-scores-in-football-tournament",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Team Scores in Football Tournament",
    "example_output": "# Expected output for Team Scores in Football Tournament",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Team Scores in Football Tournament\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1213",
    "title": "Intersection of Three Sorted Arrays",
    "titleSlug": "intersection-of-three-sorted-arrays",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Intersection of Three Sorted Arrays",
    "example_output": "# Expected output for Intersection of Three Sorted Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Intersection of Three Sorted Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1215",
    "title": "Stepping Numbers",
    "titleSlug": "stepping-numbers",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stepping Numbers",
    "example_output": "# Expected output for Stepping Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stepping Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1217",
    "title": "Minimum Cost to Move Chips to The Same Position",
    "titleSlug": "minimum-cost-to-move-chips-to-the-same-position",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Move Chips to The Same Position",
    "example_output": "# Expected output for Minimum Cost to Move Chips to The Same Position",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Move Chips to The Same Position\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1218",
    "title": "Longest Arithmetic Subsequence of Given Difference",
    "titleSlug": "longest-arithmetic-subsequence-of-given-difference",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Arithmetic Subsequence of Given Difference",
    "example_output": "# Expected output for Longest Arithmetic Subsequence of Given Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Arithmetic Subsequence of Given Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1219",
    "title": "Path with Maximum Gold",
    "titleSlug": "path-with-maximum-gold",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path with Maximum Gold",
    "example_output": "# Expected output for Path with Maximum Gold",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path with Maximum Gold\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1220",
    "title": "Count Vowels Permutation",
    "titleSlug": "count-vowels-permutation",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Vowels Permutation",
    "example_output": "# Expected output for Count Vowels Permutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Vowels Permutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1221",
    "title": "Split a String in Balanced Strings",
    "titleSlug": "split-a-string-in-balanced-strings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split a String in Balanced Strings",
    "example_output": "# Expected output for Split a String in Balanced Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split a String in Balanced Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1222",
    "title": "Queens That Can Attack the King",
    "titleSlug": "queens-that-can-attack-the-king",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Queens That Can Attack the King",
    "example_output": "# Expected output for Queens That Can Attack the King",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Queens That Can Attack the King\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1223",
    "title": "Dice Roll Simulation",
    "titleSlug": "dice-roll-simulation",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Dice Roll Simulation",
    "example_output": "# Expected output for Dice Roll Simulation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Dice Roll Simulation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1224",
    "title": "Maximum Equal Frequency",
    "titleSlug": "maximum-equal-frequency",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Equal Frequency",
    "example_output": "# Expected output for Maximum Equal Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Equal Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1225",
    "title": "Report Contiguous Dates",
    "titleSlug": "report-contiguous-dates",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Report Contiguous Dates",
    "example_output": "# Expected output for Report Contiguous Dates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Report Contiguous Dates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1226",
    "title": "The Dining Philosophers",
    "titleSlug": "the-dining-philosophers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Dining Philosophers",
    "example_output": "# Expected output for The Dining Philosophers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Dining Philosophers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1227",
    "title": "Airplane Seat Assignment Probability",
    "titleSlug": "airplane-seat-assignment-probability",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Probability and Statistics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Airplane Seat Assignment Probability",
    "example_output": "# Expected output for Airplane Seat Assignment Probability",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Airplane Seat Assignment Probability\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1228",
    "title": "Missing Number In Arithmetic Progression",
    "titleSlug": "missing-number-in-arithmetic-progression",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Missing Number In Arithmetic Progression",
    "example_output": "# Expected output for Missing Number In Arithmetic Progression",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Missing Number In Arithmetic Progression\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1229",
    "title": "Meeting Scheduler",
    "titleSlug": "meeting-scheduler",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Meeting Scheduler",
    "example_output": "# Expected output for Meeting Scheduler",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Meeting Scheduler\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1230",
    "title": "Toss Strange Coins",
    "titleSlug": "toss-strange-coins",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Probability and Statistics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Toss Strange Coins",
    "example_output": "# Expected output for Toss Strange Coins",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Toss Strange Coins\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1231",
    "title": "Divide Chocolate",
    "titleSlug": "divide-chocolate",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Chocolate",
    "example_output": "# Expected output for Divide Chocolate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide Chocolate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1232",
    "title": "Check If It Is a Straight Line",
    "titleSlug": "check-if-it-is-a-straight-line",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If It Is a Straight Line",
    "example_output": "# Expected output for Check If It Is a Straight Line",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If It Is a Straight Line\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1233",
    "title": "Remove Sub-Folders from the Filesystem",
    "titleSlug": "remove-sub-folders-from-the-filesystem",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Sub-Folders from the Filesystem",
    "example_output": "# Expected output for Remove Sub-Folders from the Filesystem",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Sub-Folders from the Filesystem\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1234",
    "title": "Replace the Substring for Balanced String",
    "titleSlug": "replace-the-substring-for-balanced-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Replace the Substring for Balanced String",
    "example_output": "# Expected output for Replace the Substring for Balanced String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Replace the Substring for Balanced String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1235",
    "title": "Maximum Profit in Job Scheduling",
    "titleSlug": "maximum-profit-in-job-scheduling",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Profit in Job Scheduling",
    "example_output": "# Expected output for Maximum Profit in Job Scheduling",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Profit in Job Scheduling\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1236",
    "title": "Web Crawler",
    "titleSlug": "web-crawler",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Web Crawler",
    "example_output": "# Expected output for Web Crawler",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Web Crawler\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1237",
    "title": "Find Positive Integer Solution for a Given Equation",
    "titleSlug": "find-positive-integer-solution-for-a-given-equation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Positive Integer Solution for a Given Equation",
    "example_output": "# Expected output for Find Positive Integer Solution for a Given Equation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Positive Integer Solution for a Given Equation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1238",
    "title": "Circular Permutation in Binary Representation",
    "titleSlug": "circular-permutation-in-binary-representation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Circular Permutation in Binary Representation",
    "example_output": "# Expected output for Circular Permutation in Binary Representation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Circular Permutation in Binary Representation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1239",
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "titleSlug": "maximum-length-of-a-concatenated-string-with-unique-characters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Length of a Concatenated String with Unique Characters",
    "example_output": "# Expected output for Maximum Length of a Concatenated String with Unique Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Length of a Concatenated String with Unique Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1240",
    "title": "Tiling a Rectangle with the Fewest Squares",
    "titleSlug": "tiling-a-rectangle-with-the-fewest-squares",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tiling a Rectangle with the Fewest Squares",
    "example_output": "# Expected output for Tiling a Rectangle with the Fewest Squares",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tiling a Rectangle with the Fewest Squares\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1241",
    "title": "Number of Comments per Post",
    "titleSlug": "number-of-comments-per-post",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Comments per Post",
    "example_output": "# Expected output for Number of Comments per Post",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Comments per Post\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1242",
    "title": "Web Crawler Multithreaded",
    "titleSlug": "web-crawler-multithreaded",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Web Crawler Multithreaded",
    "example_output": "# Expected output for Web Crawler Multithreaded",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Web Crawler Multithreaded\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1243",
    "title": "Array Transformation",
    "titleSlug": "array-transformation",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array Transformation",
    "example_output": "# Expected output for Array Transformation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array Transformation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1244",
    "title": "Design A Leaderboard",
    "titleSlug": "design-a-leaderboard",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design A Leaderboard",
    "example_output": "# Expected output for Design A Leaderboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design A Leaderboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1245",
    "title": "Tree Diameter",
    "titleSlug": "tree-diameter",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tree Diameter",
    "example_output": "# Expected output for Tree Diameter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tree Diameter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1246",
    "title": "Palindrome Removal",
    "titleSlug": "palindrome-removal",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Removal",
    "example_output": "# Expected output for Palindrome Removal",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Removal\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1247",
    "title": "Minimum Swaps to Make Strings Equal",
    "titleSlug": "minimum-swaps-to-make-strings-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Swaps to Make Strings Equal",
    "example_output": "# Expected output for Minimum Swaps to Make Strings Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Swaps to Make Strings Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1248",
    "title": "Count Number of Nice Subarrays",
    "titleSlug": "count-number-of-nice-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Nice Subarrays",
    "example_output": "# Expected output for Count Number of Nice Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Nice Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1249",
    "title": "Minimum Remove to Make Valid Parentheses",
    "titleSlug": "minimum-remove-to-make-valid-parentheses",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Remove to Make Valid Parentheses",
    "example_output": "# Expected output for Minimum Remove to Make Valid Parentheses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Remove to Make Valid Parentheses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1250",
    "title": "Check If It Is a Good Array",
    "titleSlug": "check-if-it-is-a-good-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If It Is a Good Array",
    "example_output": "# Expected output for Check If It Is a Good Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If It Is a Good Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1251",
    "title": "Average Selling Price",
    "titleSlug": "average-selling-price",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Average Selling Price",
    "example_output": "# Expected output for Average Selling Price",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Average Selling Price\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1252",
    "title": "Cells with Odd Values in a Matrix",
    "titleSlug": "cells-with-odd-values-in-a-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cells with Odd Values in a Matrix",
    "example_output": "# Expected output for Cells with Odd Values in a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Cells with Odd Values in a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1253",
    "title": "Reconstruct a 2-Row Binary Matrix",
    "titleSlug": "reconstruct-a-2-row-binary-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reconstruct a 2-Row Binary Matrix",
    "example_output": "# Expected output for Reconstruct a 2-Row Binary Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Reconstruct a 2-Row Binary Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1254",
    "title": "Number of Closed Islands",
    "titleSlug": "number-of-closed-islands",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Closed Islands",
    "example_output": "# Expected output for Number of Closed Islands",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Closed Islands\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1255",
    "title": "Maximum Score Words Formed by Letters",
    "titleSlug": "maximum-score-words-formed-by-letters",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score Words Formed by Letters",
    "example_output": "# Expected output for Maximum Score Words Formed by Letters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score Words Formed by Letters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1256",
    "title": "Encode Number",
    "titleSlug": "encode-number",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Encode Number",
    "example_output": "# Expected output for Encode Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Encode Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1257",
    "title": "Smallest Common Region",
    "titleSlug": "smallest-common-region",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Common Region",
    "example_output": "# Expected output for Smallest Common Region",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Common Region\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1258",
    "title": "Synonymous Sentences",
    "titleSlug": "synonymous-sentences",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Synonymous Sentences",
    "example_output": "# Expected output for Synonymous Sentences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Synonymous Sentences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1259",
    "title": "Handshakes That Don't Cross",
    "titleSlug": "handshakes-that-dont-cross",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Handshakes That Don't Cross",
    "example_output": "# Expected output for Handshakes That Don't Cross",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Handshakes That Don't Cross\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1260",
    "title": "Shift 2D Grid",
    "titleSlug": "shift-2d-grid",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shift 2D Grid",
    "example_output": "# Expected output for Shift 2D Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shift 2D Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1261",
    "title": "Find Elements in a Contaminated Binary Tree",
    "titleSlug": "find-elements-in-a-contaminated-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Elements in a Contaminated Binary Tree",
    "example_output": "# Expected output for Find Elements in a Contaminated Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Elements in a Contaminated Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1262",
    "title": "Greatest Sum Divisible by Three",
    "titleSlug": "greatest-sum-divisible-by-three",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Greatest Sum Divisible by Three",
    "example_output": "# Expected output for Greatest Sum Divisible by Three",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Greatest Sum Divisible by Three\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1263",
    "title": "Minimum Moves to Move a Box to Their Target Location",
    "titleSlug": "minimum-moves-to-move-a-box-to-their-target-location",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Moves to Move a Box to Their Target Location",
    "example_output": "# Expected output for Minimum Moves to Move a Box to Their Target Location",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Moves to Move a Box to Their Target Location\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1264",
    "title": "Page Recommendations",
    "titleSlug": "page-recommendations",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Page Recommendations",
    "example_output": "# Expected output for Page Recommendations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Page Recommendations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1265",
    "title": "Print Immutable Linked List in Reverse",
    "titleSlug": "print-immutable-linked-list-in-reverse",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Print Immutable Linked List in Reverse",
    "example_output": "# Expected output for Print Immutable Linked List in Reverse",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Print Immutable Linked List in Reverse\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1266",
    "title": "Minimum Time Visiting All Points",
    "titleSlug": "minimum-time-visiting-all-points",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time Visiting All Points",
    "example_output": "# Expected output for Minimum Time Visiting All Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time Visiting All Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1267",
    "title": "Count Servers that Communicate",
    "titleSlug": "count-servers-that-communicate",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Servers that Communicate",
    "example_output": "# Expected output for Count Servers that Communicate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Servers that Communicate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1268",
    "title": "Search Suggestions System",
    "titleSlug": "search-suggestions-system",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Search Suggestions System",
    "example_output": "# Expected output for Search Suggestions System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Search Suggestions System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1269",
    "title": "Number of Ways to Stay in the Same Place After Some Steps",
    "titleSlug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Stay in the Same Place After Some Steps",
    "example_output": "# Expected output for Number of Ways to Stay in the Same Place After Some Steps",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Stay in the Same Place After Some Steps\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1270",
    "title": "All People Report to the Given Manager",
    "titleSlug": "all-people-report-to-the-given-manager",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All People Report to the Given Manager",
    "example_output": "# Expected output for All People Report to the Given Manager",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All People Report to the Given Manager\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1271",
    "title": "Hexspeak",
    "titleSlug": "hexspeak",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Hexspeak",
    "example_output": "# Expected output for Hexspeak",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Hexspeak\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1272",
    "title": "Remove Interval",
    "titleSlug": "remove-interval",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Interval",
    "example_output": "# Expected output for Remove Interval",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Interval\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1273",
    "title": "Delete Tree Nodes",
    "titleSlug": "delete-tree-nodes",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Tree Nodes",
    "example_output": "# Expected output for Delete Tree Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Tree Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1274",
    "title": "Number of Ships in a Rectangle",
    "titleSlug": "number-of-ships-in-a-rectangle",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ships in a Rectangle",
    "example_output": "# Expected output for Number of Ships in a Rectangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ships in a Rectangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1275",
    "title": "Find Winner on a Tic Tac Toe Game",
    "titleSlug": "find-winner-on-a-tic-tac-toe-game",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Winner on a Tic Tac Toe Game",
    "example_output": "# Expected output for Find Winner on a Tic Tac Toe Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Winner on a Tic Tac Toe Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1276",
    "title": "Number of Burgers with No Waste of Ingredients",
    "titleSlug": "number-of-burgers-with-no-waste-of-ingredients",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Burgers with No Waste of Ingredients",
    "example_output": "# Expected output for Number of Burgers with No Waste of Ingredients",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Burgers with No Waste of Ingredients\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1277",
    "title": "Count Square Submatrices with All Ones",
    "titleSlug": "count-square-submatrices-with-all-ones",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Square Submatrices with All Ones",
    "example_output": "# Expected output for Count Square Submatrices with All Ones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Square Submatrices with All Ones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1278",
    "title": "Palindrome Partitioning III",
    "titleSlug": "palindrome-partitioning-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Partitioning III",
    "example_output": "# Expected output for Palindrome Partitioning III",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Partitioning III\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1279",
    "title": "Traffic Light Controlled Intersection",
    "titleSlug": "traffic-light-controlled-intersection",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Concurrency"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Traffic Light Controlled Intersection",
    "example_output": "# Expected output for Traffic Light Controlled Intersection",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Traffic Light Controlled Intersection\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1280",
    "title": "Students and Examinations",
    "titleSlug": "students-and-examinations",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Students and Examinations",
    "example_output": "# Expected output for Students and Examinations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Students and Examinations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1281",
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "titleSlug": "subtract-the-product-and-sum-of-digits-of-an-integer",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subtract the Product and Sum of Digits of an Integer",
    "example_output": "# Expected output for Subtract the Product and Sum of Digits of an Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subtract the Product and Sum of Digits of an Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1282",
    "title": "Group the People Given the Group Size They Belong To",
    "titleSlug": "group-the-people-given-the-group-size-they-belong-to",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Group the People Given the Group Size They Belong To",
    "example_output": "# Expected output for Group the People Given the Group Size They Belong To",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Group the People Given the Group Size They Belong To\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1283",
    "title": "Find the Smallest Divisor Given a Threshold",
    "titleSlug": "find-the-smallest-divisor-given-a-threshold",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Smallest Divisor Given a Threshold",
    "example_output": "# Expected output for Find the Smallest Divisor Given a Threshold",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Smallest Divisor Given a Threshold\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1284",
    "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "titleSlug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "example_output": "# Expected output for Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Minimum Number of Flips to Convert Binary Matrix to Zero Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1285",
    "title": "Find the Start and End Number of Continuous Ranges",
    "titleSlug": "find-the-start-and-end-number-of-continuous-ranges",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Start and End Number of Continuous Ranges",
    "example_output": "# Expected output for Find the Start and End Number of Continuous Ranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Start and End Number of Continuous Ranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1286",
    "title": "Iterator for Combination",
    "titleSlug": "iterator-for-combination",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Design"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Iterator for Combination",
    "example_output": "# Expected output for Iterator for Combination",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Iterator for Combination\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1287",
    "title": "Element Appearing More Than 25% In Sorted Array",
    "titleSlug": "element-appearing-more-than-25-in-sorted-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Element Appearing More Than 25% In Sorted Array",
    "example_output": "# Expected output for Element Appearing More Than 25% In Sorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Element Appearing More Than 25% In Sorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1288",
    "title": "Remove Covered Intervals",
    "titleSlug": "remove-covered-intervals",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Covered Intervals",
    "example_output": "# Expected output for Remove Covered Intervals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Covered Intervals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1289",
    "title": "Minimum Falling Path Sum II",
    "titleSlug": "minimum-falling-path-sum-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Falling Path Sum II",
    "example_output": "# Expected output for Minimum Falling Path Sum II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Falling Path Sum II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1290",
    "title": "Convert Binary Number in a Linked List to Integer",
    "titleSlug": "convert-binary-number-in-a-linked-list-to-integer",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert Binary Number in a Linked List to Integer",
    "example_output": "# Expected output for Convert Binary Number in a Linked List to Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert Binary Number in a Linked List to Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1291",
    "title": "Sequential Digits",
    "titleSlug": "sequential-digits",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sequential Digits",
    "example_output": "# Expected output for Sequential Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sequential Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1292",
    "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "titleSlug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "example_output": "# Expected output for Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Side Length of a Square with Sum Less than or Equal to Threshold\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1293",
    "title": "Shortest Path in a Grid with Obstacles Elimination",
    "titleSlug": "shortest-path-in-a-grid-with-obstacles-elimination",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Path in a Grid with Obstacles Elimination",
    "example_output": "# Expected output for Shortest Path in a Grid with Obstacles Elimination",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Path in a Grid with Obstacles Elimination\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1294",
    "title": "Weather Type in Each Country",
    "titleSlug": "weather-type-in-each-country",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Weather Type in Each Country",
    "example_output": "# Expected output for Weather Type in Each Country",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Weather Type in Each Country\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1295",
    "title": "Find Numbers with Even Number of Digits",
    "titleSlug": "find-numbers-with-even-number-of-digits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Numbers with Even Number of Digits",
    "example_output": "# Expected output for Find Numbers with Even Number of Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Numbers with Even Number of Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1296",
    "title": "Divide Array in Sets of K Consecutive Numbers",
    "titleSlug": "divide-array-in-sets-of-k-consecutive-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Array in Sets of K Consecutive Numbers",
    "example_output": "# Expected output for Divide Array in Sets of K Consecutive Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide Array in Sets of K Consecutive Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1297",
    "title": "Maximum Number of Occurrences of a Substring",
    "titleSlug": "maximum-number-of-occurrences-of-a-substring",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Occurrences of a Substring",
    "example_output": "# Expected output for Maximum Number of Occurrences of a Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Occurrences of a Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1298",
    "title": "Maximum Candies You Can Get from Boxes",
    "titleSlug": "maximum-candies-you-can-get-from-boxes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Candies You Can Get from Boxes",
    "example_output": "# Expected output for Maximum Candies You Can Get from Boxes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Candies You Can Get from Boxes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1299",
    "title": "Replace Elements with Greatest Element on Right Side",
    "titleSlug": "replace-elements-with-greatest-element-on-right-side",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Replace Elements with Greatest Element on Right Side",
    "example_output": "# Expected output for Replace Elements with Greatest Element on Right Side",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Replace Elements with Greatest Element on Right Side\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1300",
    "title": "Sum of Mutated Array Closest to Target",
    "titleSlug": "sum-of-mutated-array-closest-to-target",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Mutated Array Closest to Target",
    "example_output": "# Expected output for Sum of Mutated Array Closest to Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Mutated Array Closest to Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1301",
    "title": "Number of Paths with Max Score",
    "titleSlug": "number-of-paths-with-max-score",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Paths with Max Score",
    "example_output": "# Expected output for Number of Paths with Max Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Paths with Max Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1302",
    "title": "Deepest Leaves Sum",
    "titleSlug": "deepest-leaves-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Deepest Leaves Sum",
    "example_output": "# Expected output for Deepest Leaves Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Deepest Leaves Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1303",
    "title": "Find the Team Size",
    "titleSlug": "find-the-team-size",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Team Size",
    "example_output": "# Expected output for Find the Team Size",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Team Size\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1304",
    "title": "Find N Unique Integers Sum up to Zero",
    "titleSlug": "find-n-unique-integers-sum-up-to-zero",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find N Unique Integers Sum up to Zero",
    "example_output": "# Expected output for Find N Unique Integers Sum up to Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find N Unique Integers Sum up to Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1305",
    "title": "All Elements in Two Binary Search Trees",
    "titleSlug": "all-elements-in-two-binary-search-trees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All Elements in Two Binary Search Trees",
    "example_output": "# Expected output for All Elements in Two Binary Search Trees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All Elements in Two Binary Search Trees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1306",
    "title": "Jump Game III",
    "titleSlug": "jump-game-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jump Game III",
    "example_output": "# Expected output for Jump Game III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Jump Game III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1307",
    "title": "Verbal Arithmetic Puzzle",
    "titleSlug": "verbal-arithmetic-puzzle",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Verbal Arithmetic Puzzle",
    "example_output": "# Expected output for Verbal Arithmetic Puzzle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Verbal Arithmetic Puzzle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1308",
    "title": "Running Total for Different Genders",
    "titleSlug": "running-total-for-different-genders",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Running Total for Different Genders",
    "example_output": "# Expected output for Running Total for Different Genders",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Running Total for Different Genders\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1309",
    "title": "Decrypt String from Alphabet to Integer Mapping",
    "titleSlug": "decrypt-string-from-alphabet-to-integer-mapping",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decrypt String from Alphabet to Integer Mapping",
    "example_output": "# Expected output for Decrypt String from Alphabet to Integer Mapping",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decrypt String from Alphabet to Integer Mapping\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1310",
    "title": "XOR Queries of a Subarray",
    "titleSlug": "xor-queries-of-a-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for XOR Queries of a Subarray",
    "example_output": "# Expected output for XOR Queries of a Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"XOR Queries of a Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1311",
    "title": "Get Watched Videos by Your Friends",
    "titleSlug": "get-watched-videos-by-your-friends",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Get Watched Videos by Your Friends",
    "example_output": "# Expected output for Get Watched Videos by Your Friends",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Get Watched Videos by Your Friends\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1312",
    "title": "Minimum Insertion Steps to Make a String Palindrome",
    "titleSlug": "minimum-insertion-steps-to-make-a-string-palindrome",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Insertion Steps to Make a String Palindrome",
    "example_output": "# Expected output for Minimum Insertion Steps to Make a String Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Minimum Insertion Steps to Make a String Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1313",
    "title": "Decompress Run-Length Encoded List",
    "titleSlug": "decompress-run-length-encoded-list",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decompress Run-Length Encoded List",
    "example_output": "# Expected output for Decompress Run-Length Encoded List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decompress Run-Length Encoded List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1314",
    "title": "Matrix Block Sum",
    "titleSlug": "matrix-block-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Matrix Block Sum",
    "example_output": "# Expected output for Matrix Block Sum",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Matrix Block Sum\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1315",
    "title": "Sum of Nodes with Even-Valued Grandparent",
    "titleSlug": "sum-of-nodes-with-even-valued-grandparent",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Nodes with Even-Valued Grandparent",
    "example_output": "# Expected output for Sum of Nodes with Even-Valued Grandparent",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Nodes with Even-Valued Grandparent\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1316",
    "title": "Distinct Echo Substrings",
    "titleSlug": "distinct-echo-substrings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distinct Echo Substrings",
    "example_output": "# Expected output for Distinct Echo Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distinct Echo Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1317",
    "title": "Convert Integer to the Sum of Two No-Zero Integers",
    "titleSlug": "convert-integer-to-the-sum-of-two-no-zero-integers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert Integer to the Sum of Two No-Zero Integers",
    "example_output": "# Expected output for Convert Integer to the Sum of Two No-Zero Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert Integer to the Sum of Two No-Zero Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1318",
    "title": "Minimum Flips to Make a OR b Equal to c",
    "titleSlug": "minimum-flips-to-make-a-or-b-equal-to-c",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Flips to Make a OR b Equal to c",
    "example_output": "# Expected output for Minimum Flips to Make a OR b Equal to c",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Flips to Make a OR b Equal to c\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1319",
    "title": "Number of Operations to Make Network Connected",
    "titleSlug": "number-of-operations-to-make-network-connected",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Operations to Make Network Connected",
    "example_output": "# Expected output for Number of Operations to Make Network Connected",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Operations to Make Network Connected\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1320",
    "title": "Minimum Distance to Type a Word Using Two Fingers",
    "titleSlug": "minimum-distance-to-type-a-word-using-two-fingers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Distance to Type a Word Using Two Fingers",
    "example_output": "# Expected output for Minimum Distance to Type a Word Using Two Fingers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Distance to Type a Word Using Two Fingers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1321",
    "title": "Restaurant Growth",
    "titleSlug": "restaurant-growth",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Restaurant Growth",
    "example_output": "# Expected output for Restaurant Growth",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Restaurant Growth\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1322",
    "title": "Ads Performance",
    "titleSlug": "ads-performance",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ads Performance",
    "example_output": "# Expected output for Ads Performance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ads Performance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1323",
    "title": "Maximum 69 Number",
    "titleSlug": "maximum-69-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum 69 Number",
    "example_output": "# Expected output for Maximum 69 Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum 69 Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1324",
    "title": "Print Words Vertically",
    "titleSlug": "print-words-vertically",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Print Words Vertically",
    "example_output": "# Expected output for Print Words Vertically",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Print Words Vertically\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1325",
    "title": "Delete Leaves With a Given Value",
    "titleSlug": "delete-leaves-with-a-given-value",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Leaves With a Given Value",
    "example_output": "# Expected output for Delete Leaves With a Given Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Leaves With a Given Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1326",
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "titleSlug": "minimum-number-of-taps-to-open-to-water-a-garden",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Taps to Open to Water a Garden",
    "example_output": "# Expected output for Minimum Number of Taps to Open to Water a Garden",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Taps to Open to Water a Garden\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1327",
    "title": "List the Products Ordered in a Period",
    "titleSlug": "list-the-products-ordered-in-a-period",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for List the Products Ordered in a Period",
    "example_output": "# Expected output for List the Products Ordered in a Period",
    "status": "TO_DO",
    "description": "Solve the problem titled \"List the Products Ordered in a Period\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1328",
    "title": "Break a Palindrome",
    "titleSlug": "break-a-palindrome",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Break a Palindrome",
    "example_output": "# Expected output for Break a Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Break a Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1329",
    "title": "Sort the Matrix Diagonally",
    "titleSlug": "sort-the-matrix-diagonally",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort the Matrix Diagonally",
    "example_output": "# Expected output for Sort the Matrix Diagonally",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Sort the Matrix Diagonally\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1330",
    "title": "Reverse Subarray To Maximize Array Value",
    "titleSlug": "reverse-subarray-to-maximize-array-value",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Subarray To Maximize Array Value",
    "example_output": "# Expected output for Reverse Subarray To Maximize Array Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Subarray To Maximize Array Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1331",
    "title": "Rank Transform of an Array",
    "titleSlug": "rank-transform-of-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rank Transform of an Array",
    "example_output": "# Expected output for Rank Transform of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rank Transform of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1332",
    "title": "Remove Palindromic Subsequences",
    "titleSlug": "remove-palindromic-subsequences",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Palindromic Subsequences",
    "example_output": "# Expected output for Remove Palindromic Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Palindromic Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1333",
    "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
    "titleSlug": "filter-restaurants-by-vegan-friendly-price-and-distance",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Filter Restaurants by Vegan-Friendly, Price and Distance",
    "example_output": "# Expected output for Filter Restaurants by Vegan-Friendly, Price and Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Filter Restaurants by Vegan-Friendly, Price and Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1334",
    "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "titleSlug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "example_output": "# Expected output for Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the City With the Smallest Number of Neighbors at a Threshold Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1335",
    "title": "Minimum Difficulty of a Job Schedule",
    "titleSlug": "minimum-difficulty-of-a-job-schedule",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Difficulty of a Job Schedule",
    "example_output": "# Expected output for Minimum Difficulty of a Job Schedule",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Difficulty of a Job Schedule\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1336",
    "title": "Number of Transactions per Visit",
    "titleSlug": "number-of-transactions-per-visit",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Transactions per Visit",
    "example_output": "# Expected output for Number of Transactions per Visit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Transactions per Visit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1337",
    "title": "The K Weakest Rows in a Matrix",
    "titleSlug": "the-k-weakest-rows-in-a-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The K Weakest Rows in a Matrix",
    "example_output": "# Expected output for The K Weakest Rows in a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"The K Weakest Rows in a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1338",
    "title": "Reduce Array Size to The Half",
    "titleSlug": "reduce-array-size-to-the-half",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reduce Array Size to The Half",
    "example_output": "# Expected output for Reduce Array Size to The Half",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reduce Array Size to The Half\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1339",
    "title": "Maximum Product of Splitted Binary Tree",
    "titleSlug": "maximum-product-of-splitted-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product of Splitted Binary Tree",
    "example_output": "# Expected output for Maximum Product of Splitted Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product of Splitted Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1340",
    "title": "Jump Game V",
    "titleSlug": "jump-game-v",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jump Game V",
    "example_output": "# Expected output for Jump Game V",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Jump Game V\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1341",
    "title": "Movie Rating",
    "titleSlug": "movie-rating",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Movie Rating",
    "example_output": "# Expected output for Movie Rating",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Movie Rating\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1342",
    "title": "Number of Steps to Reduce a Number to Zero",
    "titleSlug": "number-of-steps-to-reduce-a-number-to-zero",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Steps to Reduce a Number to Zero",
    "example_output": "# Expected output for Number of Steps to Reduce a Number to Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Steps to Reduce a Number to Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1343",
    "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "titleSlug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "example_output": "# Expected output for Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1344",
    "title": "Angle Between Hands of a Clock",
    "titleSlug": "angle-between-hands-of-a-clock",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Angle Between Hands of a Clock",
    "example_output": "# Expected output for Angle Between Hands of a Clock",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Angle Between Hands of a Clock\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1345",
    "title": "Jump Game IV",
    "titleSlug": "jump-game-iv",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jump Game IV",
    "example_output": "# Expected output for Jump Game IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Jump Game IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1346",
    "title": "Check If N and Its Double Exist",
    "titleSlug": "check-if-n-and-its-double-exist",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If N and Its Double Exist",
    "example_output": "# Expected output for Check If N and Its Double Exist",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If N and Its Double Exist\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1347",
    "title": "Minimum Number of Steps to Make Two Strings Anagram",
    "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Steps to Make Two Strings Anagram",
    "example_output": "# Expected output for Minimum Number of Steps to Make Two Strings Anagram",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Steps to Make Two Strings Anagram\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1348",
    "title": "Tweet Counts Per Frequency",
    "titleSlug": "tweet-counts-per-frequency",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tweet Counts Per Frequency",
    "example_output": "# Expected output for Tweet Counts Per Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tweet Counts Per Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1349",
    "title": "Maximum Students Taking Exam",
    "titleSlug": "maximum-students-taking-exam",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Students Taking Exam",
    "example_output": "# Expected output for Maximum Students Taking Exam",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Students Taking Exam\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1350",
    "title": "Students With Invalid Departments",
    "titleSlug": "students-with-invalid-departments",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Students With Invalid Departments",
    "example_output": "# Expected output for Students With Invalid Departments",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Students With Invalid Departments\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1351",
    "title": "Count Negative Numbers in a Sorted Matrix",
    "titleSlug": "count-negative-numbers-in-a-sorted-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Negative Numbers in a Sorted Matrix",
    "example_output": "# Expected output for Count Negative Numbers in a Sorted Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Count Negative Numbers in a Sorted Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1352",
    "title": "Product of the Last K Numbers",
    "titleSlug": "product-of-the-last-k-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Design"
      },
      {
        "name": "Data Stream"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product of the Last K Numbers",
    "example_output": "# Expected output for Product of the Last K Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product of the Last K Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1353",
    "title": "Maximum Number of Events That Can Be Attended",
    "titleSlug": "maximum-number-of-events-that-can-be-attended",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Events That Can Be Attended",
    "example_output": "# Expected output for Maximum Number of Events That Can Be Attended",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Events That Can Be Attended\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1354",
    "title": "Construct Target Array With Multiple Sums",
    "titleSlug": "construct-target-array-with-multiple-sums",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Target Array With Multiple Sums",
    "example_output": "# Expected output for Construct Target Array With Multiple Sums",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct Target Array With Multiple Sums\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1355",
    "title": "Activity Participants",
    "titleSlug": "activity-participants",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Activity Participants",
    "example_output": "# Expected output for Activity Participants",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Activity Participants\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1356",
    "title": "Sort Integers by The Number of 1 Bits",
    "titleSlug": "sort-integers-by-the-number-of-1-bits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Integers by The Number of 1 Bits",
    "example_output": "# Expected output for Sort Integers by The Number of 1 Bits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Integers by The Number of 1 Bits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1357",
    "title": "Apply Discount Every n Orders",
    "titleSlug": "apply-discount-every-n-orders",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Discount Every n Orders",
    "example_output": "# Expected output for Apply Discount Every n Orders",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Discount Every n Orders\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1358",
    "title": "Number of Substrings Containing All Three Characters",
    "titleSlug": "number-of-substrings-containing-all-three-characters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Substrings Containing All Three Characters",
    "example_output": "# Expected output for Number of Substrings Containing All Three Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Substrings Containing All Three Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1359",
    "title": "Count All Valid Pickup and Delivery Options",
    "titleSlug": "count-all-valid-pickup-and-delivery-options",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count All Valid Pickup and Delivery Options",
    "example_output": "# Expected output for Count All Valid Pickup and Delivery Options",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count All Valid Pickup and Delivery Options\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1360",
    "title": "Number of Days Between Two Dates",
    "titleSlug": "number-of-days-between-two-dates",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Days Between Two Dates",
    "example_output": "# Expected output for Number of Days Between Two Dates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Days Between Two Dates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1361",
    "title": "Validate Binary Tree Nodes",
    "titleSlug": "validate-binary-tree-nodes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Validate Binary Tree Nodes",
    "example_output": "# Expected output for Validate Binary Tree Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Validate Binary Tree Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1362",
    "title": "Closest Divisors",
    "titleSlug": "closest-divisors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Divisors",
    "example_output": "# Expected output for Closest Divisors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Divisors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1363",
    "title": "Largest Multiple of Three",
    "titleSlug": "largest-multiple-of-three",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Multiple of Three",
    "example_output": "# Expected output for Largest Multiple of Three",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Multiple of Three\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1364",
    "title": "Number of Trusted Contacts of a Customer",
    "titleSlug": "number-of-trusted-contacts-of-a-customer",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Trusted Contacts of a Customer",
    "example_output": "# Expected output for Number of Trusted Contacts of a Customer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Trusted Contacts of a Customer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1365",
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for How Many Numbers Are Smaller Than the Current Number",
    "example_output": "# Expected output for How Many Numbers Are Smaller Than the Current Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"How Many Numbers Are Smaller Than the Current Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1366",
    "title": "Rank Teams by Votes",
    "titleSlug": "rank-teams-by-votes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rank Teams by Votes",
    "example_output": "# Expected output for Rank Teams by Votes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rank Teams by Votes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1367",
    "title": "Linked List in Binary Tree",
    "titleSlug": "linked-list-in-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Linked List in Binary Tree",
    "example_output": "# Expected output for Linked List in Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Linked List in Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1368",
    "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
    "titleSlug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Make at Least One Valid Path in a Grid",
    "example_output": "# Expected output for Minimum Cost to Make at Least One Valid Path in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Make at Least One Valid Path in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1369",
    "title": "Get the Second Most Recent Activity",
    "titleSlug": "get-the-second-most-recent-activity",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Get the Second Most Recent Activity",
    "example_output": "# Expected output for Get the Second Most Recent Activity",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Get the Second Most Recent Activity\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1370",
    "title": "Increasing Decreasing String",
    "titleSlug": "increasing-decreasing-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Increasing Decreasing String",
    "example_output": "# Expected output for Increasing Decreasing String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Increasing Decreasing String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1371",
    "title": "Find the Longest Substring Containing Vowels in Even Counts",
    "titleSlug": "find-the-longest-substring-containing-vowels-in-even-counts",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Longest Substring Containing Vowels in Even Counts",
    "example_output": "# Expected output for Find the Longest Substring Containing Vowels in Even Counts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Longest Substring Containing Vowels in Even Counts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1372",
    "title": "Longest ZigZag Path in a Binary Tree",
    "titleSlug": "longest-zigzag-path-in-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest ZigZag Path in a Binary Tree",
    "example_output": "# Expected output for Longest ZigZag Path in a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest ZigZag Path in a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1373",
    "title": "Maximum Sum BST in Binary Tree",
    "titleSlug": "maximum-sum-bst-in-binary-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum BST in Binary Tree",
    "example_output": "# Expected output for Maximum Sum BST in Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum BST in Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1374",
    "title": "Generate a String With Characters That Have Odd Counts",
    "titleSlug": "generate-a-string-with-characters-that-have-odd-counts",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Generate a String With Characters That Have Odd Counts",
    "example_output": "# Expected output for Generate a String With Characters That Have Odd Counts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Generate a String With Characters That Have Odd Counts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1375",
    "title": "Number of Times Binary String Is Prefix-Aligned",
    "titleSlug": "number-of-times-binary-string-is-prefix-aligned",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Times Binary String Is Prefix-Aligned",
    "example_output": "# Expected output for Number of Times Binary String Is Prefix-Aligned",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Times Binary String Is Prefix-Aligned\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1376",
    "title": "Time Needed to Inform All Employees",
    "titleSlug": "time-needed-to-inform-all-employees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Time Needed to Inform All Employees",
    "example_output": "# Expected output for Time Needed to Inform All Employees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Time Needed to Inform All Employees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1377",
    "title": "Frog Position After T Seconds",
    "titleSlug": "frog-position-after-t-seconds",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Frog Position After T Seconds",
    "example_output": "# Expected output for Frog Position After T Seconds",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Frog Position After T Seconds\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1378",
    "title": "Replace Employee ID With The Unique Identifier",
    "titleSlug": "replace-employee-id-with-the-unique-identifier",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Replace Employee ID With The Unique Identifier",
    "example_output": "# Expected output for Replace Employee ID With The Unique Identifier",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Replace Employee ID With The Unique Identifier\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1379",
    "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "titleSlug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "example_output": "# Expected output for Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find a Corresponding Node of a Binary Tree in a Clone of That Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1380",
    "title": "Lucky Numbers in a Matrix",
    "titleSlug": "lucky-numbers-in-a-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lucky Numbers in a Matrix",
    "example_output": "# Expected output for Lucky Numbers in a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Lucky Numbers in a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1381",
    "title": "Design a Stack With Increment Operation",
    "titleSlug": "design-a-stack-with-increment-operation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design a Stack With Increment Operation",
    "example_output": "# Expected output for Design a Stack With Increment Operation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design a Stack With Increment Operation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1382",
    "title": "Balance a Binary Search Tree",
    "titleSlug": "balance-a-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Balance a Binary Search Tree",
    "example_output": "# Expected output for Balance a Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Balance a Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1383",
    "title": "Maximum Performance of a Team",
    "titleSlug": "maximum-performance-of-a-team",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Performance of a Team",
    "example_output": "# Expected output for Maximum Performance of a Team",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Performance of a Team\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1384",
    "title": "Total Sales Amount by Year",
    "titleSlug": "total-sales-amount-by-year",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Total Sales Amount by Year",
    "example_output": "# Expected output for Total Sales Amount by Year",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Total Sales Amount by Year\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1385",
    "title": "Find the Distance Value Between Two Arrays",
    "titleSlug": "find-the-distance-value-between-two-arrays",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Distance Value Between Two Arrays",
    "example_output": "# Expected output for Find the Distance Value Between Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Distance Value Between Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1386",
    "title": "Cinema Seat Allocation",
    "titleSlug": "cinema-seat-allocation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cinema Seat Allocation",
    "example_output": "# Expected output for Cinema Seat Allocation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cinema Seat Allocation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1387",
    "title": "Sort Integers by The Power Value",
    "titleSlug": "sort-integers-by-the-power-value",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Integers by The Power Value",
    "example_output": "# Expected output for Sort Integers by The Power Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Integers by The Power Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1388",
    "title": "Pizza With 3n Slices",
    "titleSlug": "pizza-with-3n-slices",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pizza With 3n Slices",
    "example_output": "# Expected output for Pizza With 3n Slices",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pizza With 3n Slices\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1389",
    "title": "Create Target Array in the Given Order",
    "titleSlug": "create-target-array-in-the-given-order",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create Target Array in the Given Order",
    "example_output": "# Expected output for Create Target Array in the Given Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create Target Array in the Given Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1390",
    "title": "Four Divisors",
    "titleSlug": "four-divisors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Four Divisors",
    "example_output": "# Expected output for Four Divisors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Four Divisors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1391",
    "title": "Check if There is a Valid Path in a Grid",
    "titleSlug": "check-if-there-is-a-valid-path-in-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if There is a Valid Path in a Grid",
    "example_output": "# Expected output for Check if There is a Valid Path in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if There is a Valid Path in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1392",
    "title": "Longest Happy Prefix",
    "titleSlug": "longest-happy-prefix",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "String Matching"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Happy Prefix",
    "example_output": "# Expected output for Longest Happy Prefix",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Happy Prefix\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1393",
    "title": "Capital Gain/Loss",
    "titleSlug": "capital-gainloss",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Capital Gain/Loss",
    "example_output": "# Expected output for Capital Gain/Loss",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Capital Gain/Loss\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1394",
    "title": "Find Lucky Integer in an Array",
    "titleSlug": "find-lucky-integer-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Lucky Integer in an Array",
    "example_output": "# Expected output for Find Lucky Integer in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Lucky Integer in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1395",
    "title": "Count Number of Teams",
    "titleSlug": "count-number-of-teams",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Teams",
    "example_output": "# Expected output for Count Number of Teams",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Teams\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1396",
    "title": "Design Underground System",
    "titleSlug": "design-underground-system",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Underground System",
    "example_output": "# Expected output for Design Underground System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Underground System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1397",
    "title": "Find All Good Strings",
    "titleSlug": "find-all-good-strings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All Good Strings",
    "example_output": "# Expected output for Find All Good Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All Good Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1398",
    "title": "Customers Who Bought Products A and B but Not C",
    "titleSlug": "customers-who-bought-products-a-and-b-but-not-c",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Customers Who Bought Products A and B but Not C",
    "example_output": "# Expected output for Customers Who Bought Products A and B but Not C",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Customers Who Bought Products A and B but Not C\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1399",
    "title": "Count Largest Group",
    "titleSlug": "count-largest-group",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Largest Group",
    "example_output": "# Expected output for Count Largest Group",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Largest Group\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1400",
    "title": "Construct K Palindrome Strings",
    "titleSlug": "construct-k-palindrome-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct K Palindrome Strings",
    "example_output": "# Expected output for Construct K Palindrome Strings",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Construct K Palindrome Strings\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1401",
    "title": "Circle and Rectangle Overlapping",
    "titleSlug": "circle-and-rectangle-overlapping",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Circle and Rectangle Overlapping",
    "example_output": "# Expected output for Circle and Rectangle Overlapping",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Circle and Rectangle Overlapping\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1402",
    "title": "Reducing Dishes",
    "titleSlug": "reducing-dishes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reducing Dishes",
    "example_output": "# Expected output for Reducing Dishes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reducing Dishes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1403",
    "title": "Minimum Subsequence in Non-Increasing Order",
    "titleSlug": "minimum-subsequence-in-non-increasing-order",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Subsequence in Non-Increasing Order",
    "example_output": "# Expected output for Minimum Subsequence in Non-Increasing Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Subsequence in Non-Increasing Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1404",
    "title": "Number of Steps to Reduce a Number in Binary Representation to One",
    "titleSlug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Steps to Reduce a Number in Binary Representation to One",
    "example_output": "# Expected output for Number of Steps to Reduce a Number in Binary Representation to One",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Steps to Reduce a Number in Binary Representation to One\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1405",
    "title": "Longest Happy String",
    "titleSlug": "longest-happy-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Happy String",
    "example_output": "# Expected output for Longest Happy String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Happy String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1406",
    "title": "Stone Game III",
    "titleSlug": "stone-game-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game III",
    "example_output": "# Expected output for Stone Game III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1407",
    "title": "Top Travellers",
    "titleSlug": "top-travellers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Top Travellers",
    "example_output": "# Expected output for Top Travellers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Top Travellers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1408",
    "title": "String Matching in an Array",
    "titleSlug": "string-matching-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for String Matching in an Array",
    "example_output": "# Expected output for String Matching in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"String Matching in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1409",
    "title": "Queries on a Permutation With Key",
    "titleSlug": "queries-on-a-permutation-with-key",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Queries on a Permutation With Key",
    "example_output": "# Expected output for Queries on a Permutation With Key",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Queries on a Permutation With Key\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1410",
    "title": "HTML Entity Parser",
    "titleSlug": "html-entity-parser",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for HTML Entity Parser",
    "example_output": "# Expected output for HTML Entity Parser",
    "status": "TO_DO",
    "description": "Solve the problem titled \"HTML Entity Parser\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1411",
    "title": "Number of Ways to Paint N × 3 Grid",
    "titleSlug": "number-of-ways-to-paint-n-3-grid",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Paint N × 3 Grid",
    "example_output": "# Expected output for Number of Ways to Paint N × 3 Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Paint N × 3 Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1412",
    "title": "Find the Quiet Students in All Exams",
    "titleSlug": "find-the-quiet-students-in-all-exams",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Quiet Students in All Exams",
    "example_output": "# Expected output for Find the Quiet Students in All Exams",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Quiet Students in All Exams\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1413",
    "title": "Minimum Value to Get Positive Step by Step Sum",
    "titleSlug": "minimum-value-to-get-positive-step-by-step-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Value to Get Positive Step by Step Sum",
    "example_output": "# Expected output for Minimum Value to Get Positive Step by Step Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Value to Get Positive Step by Step Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1414",
    "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "titleSlug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "example_output": "# Expected output for Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Minimum Number of Fibonacci Numbers Whose Sum Is K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1415",
    "title": "The k-th Lexicographical String of All Happy Strings of Length n",
    "titleSlug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The k-th Lexicographical String of All Happy Strings of Length n",
    "example_output": "# Expected output for The k-th Lexicographical String of All Happy Strings of Length n",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The k-th Lexicographical String of All Happy Strings of Length n\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1416",
    "title": "Restore The Array",
    "titleSlug": "restore-the-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Restore The Array",
    "example_output": "# Expected output for Restore The Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Restore The Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1417",
    "title": "Reformat The String",
    "titleSlug": "reformat-the-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reformat The String",
    "example_output": "# Expected output for Reformat The String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reformat The String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1418",
    "title": "Display Table of Food Orders in a Restaurant",
    "titleSlug": "display-table-of-food-orders-in-a-restaurant",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Display Table of Food Orders in a Restaurant",
    "example_output": "# Expected output for Display Table of Food Orders in a Restaurant",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Display Table of Food Orders in a Restaurant\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1419",
    "title": "Minimum Number of Frogs Croaking",
    "titleSlug": "minimum-number-of-frogs-croaking",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Frogs Croaking",
    "example_output": "# Expected output for Minimum Number of Frogs Croaking",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Frogs Croaking\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1420",
    "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "titleSlug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "example_output": "# Expected output for Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Build Array Where You Can Find The Maximum Exactly K Comparisons\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1421",
    "title": "NPV Queries",
    "titleSlug": "npv-queries",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for NPV Queries",
    "example_output": "# Expected output for NPV Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"NPV Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1422",
    "title": "Maximum Score After Splitting a String",
    "titleSlug": "maximum-score-after-splitting-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score After Splitting a String",
    "example_output": "# Expected output for Maximum Score After Splitting a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score After Splitting a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1423",
    "title": "Maximum Points You Can Obtain from Cards",
    "titleSlug": "maximum-points-you-can-obtain-from-cards",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Points You Can Obtain from Cards",
    "example_output": "# Expected output for Maximum Points You Can Obtain from Cards",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Points You Can Obtain from Cards\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1424",
    "title": "Diagonal Traverse II",
    "titleSlug": "diagonal-traverse-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Diagonal Traverse II",
    "example_output": "# Expected output for Diagonal Traverse II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Diagonal Traverse II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1425",
    "title": "Constrained Subsequence Sum",
    "titleSlug": "constrained-subsequence-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Constrained Subsequence Sum",
    "example_output": "# Expected output for Constrained Subsequence Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Constrained Subsequence Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1426",
    "title": "Counting Elements",
    "titleSlug": "counting-elements",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Counting Elements",
    "example_output": "# Expected output for Counting Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Counting Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1427",
    "title": "Perform String Shifts",
    "titleSlug": "perform-string-shifts",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Perform String Shifts",
    "example_output": "# Expected output for Perform String Shifts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Perform String Shifts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1428",
    "title": "Leftmost Column with at Least a One",
    "titleSlug": "leftmost-column-with-at-least-a-one",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Leftmost Column with at Least a One",
    "example_output": "# Expected output for Leftmost Column with at Least a One",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Leftmost Column with at Least a One\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1429",
    "title": "First Unique Number",
    "titleSlug": "first-unique-number",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for First Unique Number",
    "example_output": "# Expected output for First Unique Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"First Unique Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1430",
    "title": "Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
    "titleSlug": "check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
    "example_output": "# Expected output for Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1431",
    "title": "Kids With the Greatest Number of Candies",
    "titleSlug": "kids-with-the-greatest-number-of-candies",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kids With the Greatest Number of Candies",
    "example_output": "# Expected output for Kids With the Greatest Number of Candies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kids With the Greatest Number of Candies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1432",
    "title": "Max Difference You Can Get From Changing an Integer",
    "titleSlug": "max-difference-you-can-get-from-changing-an-integer",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Difference You Can Get From Changing an Integer",
    "example_output": "# Expected output for Max Difference You Can Get From Changing an Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Difference You Can Get From Changing an Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1433",
    "title": "Check If a String Can Break Another String",
    "titleSlug": "check-if-a-string-can-break-another-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If a String Can Break Another String",
    "example_output": "# Expected output for Check If a String Can Break Another String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If a String Can Break Another String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1434",
    "title": "Number of Ways to Wear Different Hats to Each Other",
    "titleSlug": "number-of-ways-to-wear-different-hats-to-each-other",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Wear Different Hats to Each Other",
    "example_output": "# Expected output for Number of Ways to Wear Different Hats to Each Other",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Wear Different Hats to Each Other\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1435",
    "title": "Create a Session Bar Chart",
    "titleSlug": "create-a-session-bar-chart",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create a Session Bar Chart",
    "example_output": "# Expected output for Create a Session Bar Chart",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create a Session Bar Chart\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1436",
    "title": "Destination City",
    "titleSlug": "destination-city",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Destination City",
    "example_output": "# Expected output for Destination City",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Destination City\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1437",
    "title": "Check If All 1's Are at Least Length K Places Away",
    "titleSlug": "check-if-all-1s-are-at-least-length-k-places-away",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If All 1's Are at Least Length K Places Away",
    "example_output": "# Expected output for Check If All 1's Are at Least Length K Places Away",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If All 1's Are at Least Length K Places Away\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1438",
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "titleSlug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "example_output": "# Expected output for Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1439",
    "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    "titleSlug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    "example_output": "# Expected output for Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Find the Kth Smallest Sum of a Matrix With Sorted Rows\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1440",
    "title": "Evaluate Boolean Expression",
    "titleSlug": "evaluate-boolean-expression",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Evaluate Boolean Expression",
    "example_output": "# Expected output for Evaluate Boolean Expression",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Evaluate Boolean Expression\"."
  },
  {
    "id": "1441",
    "title": "Build an Array With Stack Operations",
    "titleSlug": "build-an-array-with-stack-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Build an Array With Stack Operations",
    "example_output": "# Expected output for Build an Array With Stack Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Build an Array With Stack Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1442",
    "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
    "titleSlug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Triplets That Can Form Two Arrays of Equal XOR",
    "example_output": "# Expected output for Count Triplets That Can Form Two Arrays of Equal XOR",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Triplets That Can Form Two Arrays of Equal XOR\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1443",
    "title": "Minimum Time to Collect All Apples in a Tree",
    "titleSlug": "minimum-time-to-collect-all-apples-in-a-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Collect All Apples in a Tree",
    "example_output": "# Expected output for Minimum Time to Collect All Apples in a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Collect All Apples in a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1444",
    "title": "Number of Ways of Cutting a Pizza",
    "titleSlug": "number-of-ways-of-cutting-a-pizza",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways of Cutting a Pizza",
    "example_output": "# Expected output for Number of Ways of Cutting a Pizza",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways of Cutting a Pizza\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1445",
    "title": "Apples & Oranges",
    "titleSlug": "apples-oranges",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apples & Oranges",
    "example_output": "# Expected output for Apples & Oranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apples & Oranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1446",
    "title": "Consecutive Characters",
    "titleSlug": "consecutive-characters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Consecutive Characters",
    "example_output": "# Expected output for Consecutive Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Consecutive Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1447",
    "title": "Simplified Fractions",
    "titleSlug": "simplified-fractions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Simplified Fractions",
    "example_output": "# Expected output for Simplified Fractions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Simplified Fractions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1448",
    "title": "Count Good Nodes in Binary Tree",
    "titleSlug": "count-good-nodes-in-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Good Nodes in Binary Tree",
    "example_output": "# Expected output for Count Good Nodes in Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Good Nodes in Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1449",
    "title": "Form Largest Integer With Digits That Add up to Target",
    "titleSlug": "form-largest-integer-with-digits-that-add-up-to-target",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Form Largest Integer With Digits That Add up to Target",
    "example_output": "# Expected output for Form Largest Integer With Digits That Add up to Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Form Largest Integer With Digits That Add up to Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1450",
    "title": "Number of Students Doing Homework at a Given Time",
    "titleSlug": "number-of-students-doing-homework-at-a-given-time",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Students Doing Homework at a Given Time",
    "example_output": "# Expected output for Number of Students Doing Homework at a Given Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Students Doing Homework at a Given Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1451",
    "title": "Rearrange Words in a Sentence",
    "titleSlug": "rearrange-words-in-a-sentence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rearrange Words in a Sentence",
    "example_output": "# Expected output for Rearrange Words in a Sentence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rearrange Words in a Sentence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1452",
    "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
    "titleSlug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for People Whose List of Favorite Companies Is Not a Subset of Another List",
    "example_output": "# Expected output for People Whose List of Favorite Companies Is Not a Subset of Another List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"People Whose List of Favorite Companies Is Not a Subset of Another List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1453",
    "title": "Maximum Number of Darts Inside of a Circular Dartboard",
    "titleSlug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Darts Inside of a Circular Dartboard",
    "example_output": "# Expected output for Maximum Number of Darts Inside of a Circular Dartboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Darts Inside of a Circular Dartboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1454",
    "title": "Active Users",
    "titleSlug": "active-users",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Active Users",
    "example_output": "# Expected output for Active Users",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Active Users\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1455",
    "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "titleSlug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "example_output": "# Expected output for Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If a Word Occurs As a Prefix of Any Word in a Sentence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1456",
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "titleSlug": "maximum-number-of-vowels-in-a-substring-of-given-length",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Vowels in a Substring of Given Length",
    "example_output": "# Expected output for Maximum Number of Vowels in a Substring of Given Length",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Vowels in a Substring of Given Length\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1457",
    "title": "Pseudo-Palindromic Paths in a Binary Tree",
    "titleSlug": "pseudo-palindromic-paths-in-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pseudo-Palindromic Paths in a Binary Tree",
    "example_output": "# Expected output for Pseudo-Palindromic Paths in a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pseudo-Palindromic Paths in a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1458",
    "title": "Max Dot Product of Two Subsequences",
    "titleSlug": "max-dot-product-of-two-subsequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Dot Product of Two Subsequences",
    "example_output": "# Expected output for Max Dot Product of Two Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Dot Product of Two Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1459",
    "title": "Rectangles Area",
    "titleSlug": "rectangles-area",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rectangles Area",
    "example_output": "# Expected output for Rectangles Area",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rectangles Area\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1460",
    "title": "Make Two Arrays Equal by Reversing Subarrays",
    "titleSlug": "make-two-arrays-equal-by-reversing-subarrays",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Two Arrays Equal by Reversing Subarrays",
    "example_output": "# Expected output for Make Two Arrays Equal by Reversing Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Two Arrays Equal by Reversing Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1461",
    "title": "Check If a String Contains All Binary Codes of Size K",
    "titleSlug": "check-if-a-string-contains-all-binary-codes-of-size-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If a String Contains All Binary Codes of Size K",
    "example_output": "# Expected output for Check If a String Contains All Binary Codes of Size K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If a String Contains All Binary Codes of Size K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1462",
    "title": "Course Schedule IV",
    "titleSlug": "course-schedule-iv",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Course Schedule IV",
    "example_output": "# Expected output for Course Schedule IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Course Schedule IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1463",
    "title": "Cherry Pickup II",
    "titleSlug": "cherry-pickup-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cherry Pickup II",
    "example_output": "# Expected output for Cherry Pickup II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cherry Pickup II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1464",
    "title": "Maximum Product of Two Elements in an Array",
    "titleSlug": "maximum-product-of-two-elements-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product of Two Elements in an Array",
    "example_output": "# Expected output for Maximum Product of Two Elements in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product of Two Elements in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1465",
    "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "titleSlug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "example_output": "# Expected output for Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1466",
    "title": "Reorder Routes to Make All Paths Lead to the City Zero",
    "titleSlug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reorder Routes to Make All Paths Lead to the City Zero",
    "example_output": "# Expected output for Reorder Routes to Make All Paths Lead to the City Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reorder Routes to Make All Paths Lead to the City Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1467",
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "titleSlug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Probability and Statistics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "example_output": "# Expected output for Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Probability of a Two Boxes Having The Same Number of Distinct Balls\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1468",
    "title": "Calculate Salaries",
    "titleSlug": "calculate-salaries",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate Salaries",
    "example_output": "# Expected output for Calculate Salaries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate Salaries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1469",
    "title": "Find All The Lonely Nodes",
    "titleSlug": "find-all-the-lonely-nodes",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All The Lonely Nodes",
    "example_output": "# Expected output for Find All The Lonely Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All The Lonely Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1470",
    "title": "Shuffle the Array",
    "titleSlug": "shuffle-the-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shuffle the Array",
    "example_output": "# Expected output for Shuffle the Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shuffle the Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1471",
    "title": "The k Strongest Values in an Array",
    "titleSlug": "the-k-strongest-values-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The k Strongest Values in an Array",
    "example_output": "# Expected output for The k Strongest Values in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The k Strongest Values in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1472",
    "title": "Design Browser History",
    "titleSlug": "design-browser-history",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Doubly-Linked List"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Browser History",
    "example_output": "# Expected output for Design Browser History",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Browser History\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1473",
    "title": "Paint House III",
    "titleSlug": "paint-house-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Paint House III",
    "example_output": "# Expected output for Paint House III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Paint House III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1474",
    "title": "Delete N Nodes After M Nodes of a Linked List",
    "titleSlug": "delete-n-nodes-after-m-nodes-of-a-linked-list",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete N Nodes After M Nodes of a Linked List",
    "example_output": "# Expected output for Delete N Nodes After M Nodes of a Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete N Nodes After M Nodes of a Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1475",
    "title": "Final Prices With a Special Discount in a Shop",
    "titleSlug": "final-prices-with-a-special-discount-in-a-shop",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Final Prices With a Special Discount in a Shop",
    "example_output": "# Expected output for Final Prices With a Special Discount in a Shop",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Final Prices With a Special Discount in a Shop\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1476",
    "title": "Subrectangle Queries",
    "titleSlug": "subrectangle-queries",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Design"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subrectangle Queries",
    "example_output": "# Expected output for Subrectangle Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subrectangle Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1477",
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "titleSlug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "example_output": "# Expected output for Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Two Non-overlapping Sub-arrays Each With Target Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1478",
    "title": "Allocate Mailboxes",
    "titleSlug": "allocate-mailboxes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Allocate Mailboxes",
    "example_output": "# Expected output for Allocate Mailboxes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Allocate Mailboxes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1479",
    "title": "Sales by Day of the Week",
    "titleSlug": "sales-by-day-of-the-week",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sales by Day of the Week",
    "example_output": "# Expected output for Sales by Day of the Week",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sales by Day of the Week\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1480",
    "title": "Running Sum of 1d Array",
    "titleSlug": "running-sum-of-1d-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Running Sum of 1d Array",
    "example_output": "# Expected output for Running Sum of 1d Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Running Sum of 1d Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1481",
    "title": "Least Number of Unique Integers after K Removals",
    "titleSlug": "least-number-of-unique-integers-after-k-removals",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Least Number of Unique Integers after K Removals",
    "example_output": "# Expected output for Least Number of Unique Integers after K Removals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Least Number of Unique Integers after K Removals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1482",
    "title": "Minimum Number of Days to Make m Bouquets",
    "titleSlug": "minimum-number-of-days-to-make-m-bouquets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Days to Make m Bouquets",
    "example_output": "# Expected output for Minimum Number of Days to Make m Bouquets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Days to Make m Bouquets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1483",
    "title": "Kth Ancestor of a Tree Node",
    "titleSlug": "kth-ancestor-of-a-tree-node",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Ancestor of a Tree Node",
    "example_output": "# Expected output for Kth Ancestor of a Tree Node",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Ancestor of a Tree Node\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1484",
    "title": "Group Sold Products By The Date",
    "titleSlug": "group-sold-products-by-the-date",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Group Sold Products By The Date",
    "example_output": "# Expected output for Group Sold Products By The Date",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Group Sold Products By The Date\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1485",
    "title": "Clone Binary Tree With Random Pointer",
    "titleSlug": "clone-binary-tree-with-random-pointer",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Clone Binary Tree With Random Pointer",
    "example_output": "# Expected output for Clone Binary Tree With Random Pointer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Clone Binary Tree With Random Pointer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1486",
    "title": "XOR Operation in an Array",
    "titleSlug": "xor-operation-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for XOR Operation in an Array",
    "example_output": "# Expected output for XOR Operation in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"XOR Operation in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1487",
    "title": "Making File Names Unique",
    "titleSlug": "making-file-names-unique",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Making File Names Unique",
    "example_output": "# Expected output for Making File Names Unique",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Making File Names Unique\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1488",
    "title": "Avoid Flood in The City",
    "titleSlug": "avoid-flood-in-the-city",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Avoid Flood in The City",
    "example_output": "# Expected output for Avoid Flood in The City",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Avoid Flood in The City\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1489",
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "titleSlug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Minimum Spanning Tree"
      },
      {
        "name": "Strongly Connected Component"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "example_output": "# Expected output for Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1490",
    "title": "Clone N-ary Tree",
    "titleSlug": "clone-n-ary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Clone N-ary Tree",
    "example_output": "# Expected output for Clone N-ary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Clone N-ary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1491",
    "title": "Average Salary Excluding the Minimum and Maximum Salary",
    "titleSlug": "average-salary-excluding-the-minimum-and-maximum-salary",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Average Salary Excluding the Minimum and Maximum Salary",
    "example_output": "# Expected output for Average Salary Excluding the Minimum and Maximum Salary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Average Salary Excluding the Minimum and Maximum Salary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1492",
    "title": "The kth Factor of n",
    "titleSlug": "the-kth-factor-of-n",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The kth Factor of n",
    "example_output": "# Expected output for The kth Factor of n",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The kth Factor of n\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1493",
    "title": "Longest Subarray of 1's After Deleting One Element",
    "titleSlug": "longest-subarray-of-1s-after-deleting-one-element",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Subarray of 1's After Deleting One Element",
    "example_output": "# Expected output for Longest Subarray of 1's After Deleting One Element",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Subarray of 1's After Deleting One Element\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1494",
    "title": "Parallel Courses II",
    "titleSlug": "parallel-courses-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Parallel Courses II",
    "example_output": "# Expected output for Parallel Courses II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Parallel Courses II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1495",
    "title": "Friendly Movies Streamed Last Month",
    "titleSlug": "friendly-movies-streamed-last-month",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Friendly Movies Streamed Last Month",
    "example_output": "# Expected output for Friendly Movies Streamed Last Month",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Friendly Movies Streamed Last Month\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1496",
    "title": "Path Crossing",
    "titleSlug": "path-crossing",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path Crossing",
    "example_output": "# Expected output for Path Crossing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path Crossing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1497",
    "title": "Check If Array Pairs Are Divisible by k",
    "titleSlug": "check-if-array-pairs-are-divisible-by-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If Array Pairs Are Divisible by k",
    "example_output": "# Expected output for Check If Array Pairs Are Divisible by k",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If Array Pairs Are Divisible by k\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1498",
    "title": "Number of Subsequences That Satisfy the Given Sum Condition",
    "titleSlug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Subsequences That Satisfy the Given Sum Condition",
    "example_output": "# Expected output for Number of Subsequences That Satisfy the Given Sum Condition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Subsequences That Satisfy the Given Sum Condition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1499",
    "title": "Max Value of Equation",
    "titleSlug": "max-value-of-equation",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Value of Equation",
    "example_output": "# Expected output for Max Value of Equation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Value of Equation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1500",
    "title": "Design a File Sharing System",
    "titleSlug": "design-a-file-sharing-system",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design a File Sharing System",
    "example_output": "# Expected output for Design a File Sharing System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design a File Sharing System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1501",
    "title": "Countries You Can Safely Invest In",
    "titleSlug": "countries-you-can-safely-invest-in",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Countries You Can Safely Invest In",
    "example_output": "# Expected output for Countries You Can Safely Invest In",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Countries You Can Safely Invest In\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1502",
    "title": "Can Make Arithmetic Progression From Sequence",
    "titleSlug": "can-make-arithmetic-progression-from-sequence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Can Make Arithmetic Progression From Sequence",
    "example_output": "# Expected output for Can Make Arithmetic Progression From Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Can Make Arithmetic Progression From Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1503",
    "title": "Last Moment Before All Ants Fall Out of a Plank",
    "titleSlug": "last-moment-before-all-ants-fall-out-of-a-plank",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Last Moment Before All Ants Fall Out of a Plank",
    "example_output": "# Expected output for Last Moment Before All Ants Fall Out of a Plank",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Last Moment Before All Ants Fall Out of a Plank\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1504",
    "title": "Count Submatrices With All Ones",
    "titleSlug": "count-submatrices-with-all-ones",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Submatrices With All Ones",
    "example_output": "# Expected output for Count Submatrices With All Ones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Submatrices With All Ones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1505",
    "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
    "titleSlug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
    "example_output": "# Expected output for Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Possible Integer After at Most K Adjacent Swaps On Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1506",
    "title": "Find Root of N-Ary Tree",
    "titleSlug": "find-root-of-n-ary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Root of N-Ary Tree",
    "example_output": "# Expected output for Find Root of N-Ary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Root of N-Ary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1507",
    "title": "Reformat Date",
    "titleSlug": "reformat-date",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reformat Date",
    "example_output": "# Expected output for Reformat Date",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reformat Date\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1508",
    "title": "Range Sum of Sorted Subarray Sums",
    "titleSlug": "range-sum-of-sorted-subarray-sums",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Sum of Sorted Subarray Sums",
    "example_output": "# Expected output for Range Sum of Sorted Subarray Sums",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Sum of Sorted Subarray Sums\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1509",
    "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
    "titleSlug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Difference Between Largest and Smallest Value in Three Moves",
    "example_output": "# Expected output for Minimum Difference Between Largest and Smallest Value in Three Moves",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Difference Between Largest and Smallest Value in Three Moves\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1510",
    "title": "Stone Game IV",
    "titleSlug": "stone-game-iv",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game IV",
    "example_output": "# Expected output for Stone Game IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1511",
    "title": "Customer Order Frequency",
    "titleSlug": "customer-order-frequency",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Customer Order Frequency",
    "example_output": "# Expected output for Customer Order Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Customer Order Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1512",
    "title": "Number of Good Pairs",
    "titleSlug": "number-of-good-pairs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Good Pairs",
    "example_output": "# Expected output for Number of Good Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Good Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1513",
    "title": "Number of Substrings With Only 1s",
    "titleSlug": "number-of-substrings-with-only-1s",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Substrings With Only 1s",
    "example_output": "# Expected output for Number of Substrings With Only 1s",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Substrings With Only 1s\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1514",
    "title": "Path with Maximum Probability",
    "titleSlug": "path-with-maximum-probability",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path with Maximum Probability",
    "example_output": "# Expected output for Path with Maximum Probability",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path with Maximum Probability\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1515",
    "title": "Best Position for a Service Centre",
    "titleSlug": "best-position-for-a-service-centre",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Randomized"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Position for a Service Centre",
    "example_output": "# Expected output for Best Position for a Service Centre",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Position for a Service Centre\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1516",
    "title": "Move Sub-Tree of N-Ary Tree",
    "titleSlug": "move-sub-tree-of-n-ary-tree",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Move Sub-Tree of N-Ary Tree",
    "example_output": "# Expected output for Move Sub-Tree of N-Ary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Move Sub-Tree of N-Ary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1517",
    "title": "Find Users With Valid E-Mails",
    "titleSlug": "find-users-with-valid-e-mails",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Users With Valid E-Mails",
    "example_output": "# Expected output for Find Users With Valid E-Mails",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Users With Valid E-Mails\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1518",
    "title": "Water Bottles",
    "titleSlug": "water-bottles",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Water Bottles",
    "example_output": "# Expected output for Water Bottles",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Water Bottles\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1519",
    "title": "Number of Nodes in the Sub-Tree With the Same Label",
    "titleSlug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Nodes in the Sub-Tree With the Same Label",
    "example_output": "# Expected output for Number of Nodes in the Sub-Tree With the Same Label",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Nodes in the Sub-Tree With the Same Label\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1520",
    "title": "Maximum Number of Non-Overlapping Substrings",
    "titleSlug": "maximum-number-of-non-overlapping-substrings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Non-Overlapping Substrings",
    "example_output": "# Expected output for Maximum Number of Non-Overlapping Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Non-Overlapping Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1521",
    "title": "Find a Value of a Mysterious Function Closest to Target",
    "titleSlug": "find-a-value-of-a-mysterious-function-closest-to-target",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find a Value of a Mysterious Function Closest to Target",
    "example_output": "# Expected output for Find a Value of a Mysterious Function Closest to Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find a Value of a Mysterious Function Closest to Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1522",
    "title": "Diameter of N-Ary Tree",
    "titleSlug": "diameter-of-n-ary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Diameter of N-Ary Tree",
    "example_output": "# Expected output for Diameter of N-Ary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Diameter of N-Ary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1523",
    "title": "Count Odd Numbers in an Interval Range",
    "titleSlug": "count-odd-numbers-in-an-interval-range",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Odd Numbers in an Interval Range",
    "example_output": "# Expected output for Count Odd Numbers in an Interval Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Odd Numbers in an Interval Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1524",
    "title": "Number of Sub-arrays With Odd Sum",
    "titleSlug": "number-of-sub-arrays-with-odd-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Sub-arrays With Odd Sum",
    "example_output": "# Expected output for Number of Sub-arrays With Odd Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Sub-arrays With Odd Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1525",
    "title": "Number of Good Ways to Split a String",
    "titleSlug": "number-of-good-ways-to-split-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Good Ways to Split a String",
    "example_output": "# Expected output for Number of Good Ways to Split a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Good Ways to Split a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1526",
    "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
    "titleSlug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Increments on Subarrays to Form a Target Array",
    "example_output": "# Expected output for Minimum Number of Increments on Subarrays to Form a Target Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Increments on Subarrays to Form a Target Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1527",
    "title": "Patients With a Condition",
    "titleSlug": "patients-with-a-condition",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Patients With a Condition",
    "example_output": "# Expected output for Patients With a Condition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Patients With a Condition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1528",
    "title": "Shuffle String",
    "titleSlug": "shuffle-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shuffle String",
    "example_output": "# Expected output for Shuffle String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shuffle String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1529",
    "title": "Minimum Suffix Flips",
    "titleSlug": "minimum-suffix-flips",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Suffix Flips",
    "example_output": "# Expected output for Minimum Suffix Flips",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Suffix Flips\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1530",
    "title": "Number of Good Leaf Nodes Pairs",
    "titleSlug": "number-of-good-leaf-nodes-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Good Leaf Nodes Pairs",
    "example_output": "# Expected output for Number of Good Leaf Nodes Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Good Leaf Nodes Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1531",
    "title": "String Compression II",
    "titleSlug": "string-compression-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for String Compression II",
    "example_output": "# Expected output for String Compression II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"String Compression II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1532",
    "title": "The Most Recent Three Orders",
    "titleSlug": "the-most-recent-three-orders",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Most Recent Three Orders",
    "example_output": "# Expected output for The Most Recent Three Orders",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Most Recent Three Orders\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1533",
    "title": "Find the Index of the Large Integer",
    "titleSlug": "find-the-index-of-the-large-integer",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Index of the Large Integer",
    "example_output": "# Expected output for Find the Index of the Large Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Index of the Large Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1534",
    "title": "Count Good Triplets",
    "titleSlug": "count-good-triplets",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Good Triplets",
    "example_output": "# Expected output for Count Good Triplets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Good Triplets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1535",
    "title": "Find the Winner of an Array Game",
    "titleSlug": "find-the-winner-of-an-array-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Winner of an Array Game",
    "example_output": "# Expected output for Find the Winner of an Array Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Winner of an Array Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1536",
    "title": "Minimum Swaps to Arrange a Binary Grid",
    "titleSlug": "minimum-swaps-to-arrange-a-binary-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Swaps to Arrange a Binary Grid",
    "example_output": "# Expected output for Minimum Swaps to Arrange a Binary Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Swaps to Arrange a Binary Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1537",
    "title": "Get the Maximum Score",
    "titleSlug": "get-the-maximum-score",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Get the Maximum Score",
    "example_output": "# Expected output for Get the Maximum Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Get the Maximum Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1538",
    "title": "Guess the Majority in a Hidden Array",
    "titleSlug": "guess-the-majority-in-a-hidden-array",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Guess the Majority in a Hidden Array",
    "example_output": "# Expected output for Guess the Majority in a Hidden Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Guess the Majority in a Hidden Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1539",
    "title": "Kth Missing Positive Number",
    "titleSlug": "kth-missing-positive-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Missing Positive Number",
    "example_output": "# Expected output for Kth Missing Positive Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Missing Positive Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1540",
    "title": "Can Convert String in K Moves",
    "titleSlug": "can-convert-string-in-k-moves",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Can Convert String in K Moves",
    "example_output": "# Expected output for Can Convert String in K Moves",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Can Convert String in K Moves\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1541",
    "title": "Minimum Insertions to Balance a Parentheses String",
    "titleSlug": "minimum-insertions-to-balance-a-parentheses-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Insertions to Balance a Parentheses String",
    "example_output": "# Expected output for Minimum Insertions to Balance a Parentheses String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Insertions to Balance a Parentheses String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1542",
    "title": "Find Longest Awesome Substring",
    "titleSlug": "find-longest-awesome-substring",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Longest Awesome Substring",
    "example_output": "# Expected output for Find Longest Awesome Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Longest Awesome Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1543",
    "title": "Fix Product Name Format",
    "titleSlug": "fix-product-name-format",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fix Product Name Format",
    "example_output": "# Expected output for Fix Product Name Format",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fix Product Name Format\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1544",
    "title": "Make The String Great",
    "titleSlug": "make-the-string-great",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make The String Great",
    "example_output": "# Expected output for Make The String Great",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make The String Great\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1545",
    "title": "Find Kth Bit in Nth Binary String",
    "titleSlug": "find-kth-bit-in-nth-binary-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Kth Bit in Nth Binary String",
    "example_output": "# Expected output for Find Kth Bit in Nth Binary String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Kth Bit in Nth Binary String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1546",
    "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "titleSlug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "example_output": "# Expected output for Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Non-Overlapping Subarrays With Sum Equals Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1547",
    "title": "Minimum Cost to Cut a Stick",
    "titleSlug": "minimum-cost-to-cut-a-stick",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Cut a Stick",
    "example_output": "# Expected output for Minimum Cost to Cut a Stick",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Cut a Stick\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1548",
    "title": "The Most Similar Path in a Graph",
    "titleSlug": "the-most-similar-path-in-a-graph",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Most Similar Path in a Graph",
    "example_output": "# Expected output for The Most Similar Path in a Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Most Similar Path in a Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1549",
    "title": "The Most Recent Orders for Each Product",
    "titleSlug": "the-most-recent-orders-for-each-product",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Most Recent Orders for Each Product",
    "example_output": "# Expected output for The Most Recent Orders for Each Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Most Recent Orders for Each Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1550",
    "title": "Three Consecutive Odds",
    "titleSlug": "three-consecutive-odds",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Three Consecutive Odds",
    "example_output": "# Expected output for Three Consecutive Odds",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Three Consecutive Odds\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1551",
    "title": "Minimum Operations to Make Array Equal",
    "titleSlug": "minimum-operations-to-make-array-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make Array Equal",
    "example_output": "# Expected output for Minimum Operations to Make Array Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make Array Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1552",
    "title": "Magnetic Force Between Two Balls",
    "titleSlug": "magnetic-force-between-two-balls",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Magnetic Force Between Two Balls",
    "example_output": "# Expected output for Magnetic Force Between Two Balls",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Magnetic Force Between Two Balls\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1553",
    "title": "Minimum Number of Days to Eat N Oranges",
    "titleSlug": "minimum-number-of-days-to-eat-n-oranges",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Days to Eat N Oranges",
    "example_output": "# Expected output for Minimum Number of Days to Eat N Oranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Days to Eat N Oranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1554",
    "title": "Strings Differ by One Character",
    "titleSlug": "strings-differ-by-one-character",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strings Differ by One Character",
    "example_output": "# Expected output for Strings Differ by One Character",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strings Differ by One Character\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1555",
    "title": "Bank Account Summary",
    "titleSlug": "bank-account-summary",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bank Account Summary",
    "example_output": "# Expected output for Bank Account Summary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bank Account Summary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1556",
    "title": "Thousand Separator",
    "titleSlug": "thousand-separator",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Thousand Separator",
    "example_output": "# Expected output for Thousand Separator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Thousand Separator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1557",
    "title": "Minimum Number of Vertices to Reach All Nodes",
    "titleSlug": "minimum-number-of-vertices-to-reach-all-nodes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Vertices to Reach All Nodes",
    "example_output": "# Expected output for Minimum Number of Vertices to Reach All Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Vertices to Reach All Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1558",
    "title": "Minimum Numbers of Function Calls to Make Target Array",
    "titleSlug": "minimum-numbers-of-function-calls-to-make-target-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Numbers of Function Calls to Make Target Array",
    "example_output": "# Expected output for Minimum Numbers of Function Calls to Make Target Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Numbers of Function Calls to Make Target Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1559",
    "title": "Detect Cycles in 2D Grid",
    "titleSlug": "detect-cycles-in-2d-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Detect Cycles in 2D Grid",
    "example_output": "# Expected output for Detect Cycles in 2D Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Detect Cycles in 2D Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1560",
    "title": "Most Visited Sector in  a Circular Track",
    "titleSlug": "most-visited-sector-in-a-circular-track",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Visited Sector in  a Circular Track",
    "example_output": "# Expected output for Most Visited Sector in  a Circular Track",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Visited Sector in  a Circular Track\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1561",
    "title": "Maximum Number of Coins You Can Get",
    "titleSlug": "maximum-number-of-coins-you-can-get",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Coins You Can Get",
    "example_output": "# Expected output for Maximum Number of Coins You Can Get",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Coins You Can Get\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1562",
    "title": "Find Latest Group of Size M",
    "titleSlug": "find-latest-group-of-size-m",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Latest Group of Size M",
    "example_output": "# Expected output for Find Latest Group of Size M",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Latest Group of Size M\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1563",
    "title": "Stone Game V",
    "titleSlug": "stone-game-v",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game V",
    "example_output": "# Expected output for Stone Game V",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game V\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1564",
    "title": "Put Boxes Into the Warehouse I",
    "titleSlug": "put-boxes-into-the-warehouse-i",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Put Boxes Into the Warehouse I",
    "example_output": "# Expected output for Put Boxes Into the Warehouse I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Put Boxes Into the Warehouse I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1565",
    "title": "Unique Orders and Customers Per Month",
    "titleSlug": "unique-orders-and-customers-per-month",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Orders and Customers Per Month",
    "example_output": "# Expected output for Unique Orders and Customers Per Month",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Orders and Customers Per Month\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1566",
    "title": "Detect Pattern of Length M Repeated K or More Times",
    "titleSlug": "detect-pattern-of-length-m-repeated-k-or-more-times",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Detect Pattern of Length M Repeated K or More Times",
    "example_output": "# Expected output for Detect Pattern of Length M Repeated K or More Times",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Detect Pattern of Length M Repeated K or More Times\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1567",
    "title": "Maximum Length of Subarray With Positive Product",
    "titleSlug": "maximum-length-of-subarray-with-positive-product",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Length of Subarray With Positive Product",
    "example_output": "# Expected output for Maximum Length of Subarray With Positive Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Length of Subarray With Positive Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1568",
    "title": "Minimum Number of Days to Disconnect Island",
    "titleSlug": "minimum-number-of-days-to-disconnect-island",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Strongly Connected Component"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Days to Disconnect Island",
    "example_output": "# Expected output for Minimum Number of Days to Disconnect Island",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Days to Disconnect Island\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1569",
    "title": "Number of Ways to Reorder Array to Get Same BST",
    "titleSlug": "number-of-ways-to-reorder-array-to-get-same-bst",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Reorder Array to Get Same BST",
    "example_output": "# Expected output for Number of Ways to Reorder Array to Get Same BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Reorder Array to Get Same BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1570",
    "title": "Dot Product of Two Sparse Vectors",
    "titleSlug": "dot-product-of-two-sparse-vectors",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Dot Product of Two Sparse Vectors",
    "example_output": "# Expected output for Dot Product of Two Sparse Vectors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Dot Product of Two Sparse Vectors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1571",
    "title": "Warehouse Manager",
    "titleSlug": "warehouse-manager",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Warehouse Manager",
    "example_output": "# Expected output for Warehouse Manager",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Warehouse Manager\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1572",
    "title": "Matrix Diagonal Sum",
    "titleSlug": "matrix-diagonal-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Matrix Diagonal Sum",
    "example_output": "# Expected output for Matrix Diagonal Sum",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Matrix Diagonal Sum\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1573",
    "title": "Number of Ways to Split a String",
    "titleSlug": "number-of-ways-to-split-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Split a String",
    "example_output": "# Expected output for Number of Ways to Split a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Split a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1574",
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "titleSlug": "shortest-subarray-to-be-removed-to-make-array-sorted",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Subarray to be Removed to Make Array Sorted",
    "example_output": "# Expected output for Shortest Subarray to be Removed to Make Array Sorted",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Subarray to be Removed to Make Array Sorted\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1575",
    "title": "Count All Possible Routes",
    "titleSlug": "count-all-possible-routes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count All Possible Routes",
    "example_output": "# Expected output for Count All Possible Routes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count All Possible Routes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1576",
    "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
    "titleSlug": "replace-all-s-to-avoid-consecutive-repeating-characters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Replace All ?'s to Avoid Consecutive Repeating Characters",
    "example_output": "# Expected output for Replace All ?'s to Avoid Consecutive Repeating Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Replace All ?'s to Avoid Consecutive Repeating Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1577",
    "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "titleSlug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "example_output": "# Expected output for Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways Where Square of Number Is Equal to Product of Two Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1578",
    "title": "Minimum Time to Make Rope Colorful",
    "titleSlug": "minimum-time-to-make-rope-colorful",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Make Rope Colorful",
    "example_output": "# Expected output for Minimum Time to Make Rope Colorful",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Make Rope Colorful\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1579",
    "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
    "titleSlug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Max Number of Edges to Keep Graph Fully Traversable",
    "example_output": "# Expected output for Remove Max Number of Edges to Keep Graph Fully Traversable",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Max Number of Edges to Keep Graph Fully Traversable\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1580",
    "title": "Put Boxes Into the Warehouse II",
    "titleSlug": "put-boxes-into-the-warehouse-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Put Boxes Into the Warehouse II",
    "example_output": "# Expected output for Put Boxes Into the Warehouse II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Put Boxes Into the Warehouse II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1581",
    "title": "Customer Who Visited but Did Not Make Any Transactions",
    "titleSlug": "customer-who-visited-but-did-not-make-any-transactions",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Customer Who Visited but Did Not Make Any Transactions",
    "example_output": "# Expected output for Customer Who Visited but Did Not Make Any Transactions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Customer Who Visited but Did Not Make Any Transactions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1582",
    "title": "Special Positions in a Binary Matrix",
    "titleSlug": "special-positions-in-a-binary-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Special Positions in a Binary Matrix",
    "example_output": "# Expected output for Special Positions in a Binary Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Special Positions in a Binary Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1583",
    "title": "Count Unhappy Friends",
    "titleSlug": "count-unhappy-friends",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Unhappy Friends",
    "example_output": "# Expected output for Count Unhappy Friends",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Unhappy Friends\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1584",
    "title": "Min Cost to Connect All Points",
    "titleSlug": "min-cost-to-connect-all-points",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Minimum Spanning Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Min Cost to Connect All Points",
    "example_output": "# Expected output for Min Cost to Connect All Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Min Cost to Connect All Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1585",
    "title": "Check If String Is Transformable With Substring Sort Operations",
    "titleSlug": "check-if-string-is-transformable-with-substring-sort-operations",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If String Is Transformable With Substring Sort Operations",
    "example_output": "# Expected output for Check If String Is Transformable With Substring Sort Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If String Is Transformable With Substring Sort Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1586",
    "title": "Binary Search Tree Iterator II",
    "titleSlug": "binary-search-tree-iterator-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      },
      {
        "name": "Iterator"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Search Tree Iterator II",
    "example_output": "# Expected output for Binary Search Tree Iterator II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Search Tree Iterator II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1587",
    "title": "Bank Account Summary II",
    "titleSlug": "bank-account-summary-ii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bank Account Summary II",
    "example_output": "# Expected output for Bank Account Summary II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bank Account Summary II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1588",
    "title": "Sum of All Odd Length Subarrays",
    "titleSlug": "sum-of-all-odd-length-subarrays",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of All Odd Length Subarrays",
    "example_output": "# Expected output for Sum of All Odd Length Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of All Odd Length Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1589",
    "title": "Maximum Sum Obtained of Any Permutation",
    "titleSlug": "maximum-sum-obtained-of-any-permutation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum Obtained of Any Permutation",
    "example_output": "# Expected output for Maximum Sum Obtained of Any Permutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum Obtained of Any Permutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1590",
    "title": "Make Sum Divisible by P",
    "titleSlug": "make-sum-divisible-by-p",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Sum Divisible by P",
    "example_output": "# Expected output for Make Sum Divisible by P",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Sum Divisible by P\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1591",
    "title": "Strange Printer II",
    "titleSlug": "strange-printer-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strange Printer II",
    "example_output": "# Expected output for Strange Printer II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strange Printer II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1592",
    "title": "Rearrange Spaces Between Words",
    "titleSlug": "rearrange-spaces-between-words",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rearrange Spaces Between Words",
    "example_output": "# Expected output for Rearrange Spaces Between Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rearrange Spaces Between Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1593",
    "title": "Split a String Into the Max Number of Unique Substrings",
    "titleSlug": "split-a-string-into-the-max-number-of-unique-substrings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split a String Into the Max Number of Unique Substrings",
    "example_output": "# Expected output for Split a String Into the Max Number of Unique Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split a String Into the Max Number of Unique Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1594",
    "title": "Maximum Non Negative Product in a Matrix",
    "titleSlug": "maximum-non-negative-product-in-a-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Non Negative Product in a Matrix",
    "example_output": "# Expected output for Maximum Non Negative Product in a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Maximum Non Negative Product in a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1595",
    "title": "Minimum Cost to Connect Two Groups of Points",
    "titleSlug": "minimum-cost-to-connect-two-groups-of-points",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Connect Two Groups of Points",
    "example_output": "# Expected output for Minimum Cost to Connect Two Groups of Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Connect Two Groups of Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1596",
    "title": "The Most Frequently Ordered Products for Each Customer",
    "titleSlug": "the-most-frequently-ordered-products-for-each-customer",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Most Frequently Ordered Products for Each Customer",
    "example_output": "# Expected output for The Most Frequently Ordered Products for Each Customer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Most Frequently Ordered Products for Each Customer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1597",
    "title": "Build Binary Expression Tree From Infix Expression",
    "titleSlug": "build-binary-expression-tree-from-infix-expression",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Build Binary Expression Tree From Infix Expression",
    "example_output": "# Expected output for Build Binary Expression Tree From Infix Expression",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Build Binary Expression Tree From Infix Expression\"."
  },
  {
    "id": "1598",
    "title": "Crawler Log Folder",
    "titleSlug": "crawler-log-folder",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Crawler Log Folder",
    "example_output": "# Expected output for Crawler Log Folder",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Crawler Log Folder\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1599",
    "title": "Maximum Profit of Operating a Centennial Wheel",
    "titleSlug": "maximum-profit-of-operating-a-centennial-wheel",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Profit of Operating a Centennial Wheel",
    "example_output": "# Expected output for Maximum Profit of Operating a Centennial Wheel",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Profit of Operating a Centennial Wheel\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1600",
    "title": "Throne Inheritance",
    "titleSlug": "throne-inheritance",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Throne Inheritance",
    "example_output": "# Expected output for Throne Inheritance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Throne Inheritance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1601",
    "title": "Maximum Number of Achievable Transfer Requests",
    "titleSlug": "maximum-number-of-achievable-transfer-requests",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Achievable Transfer Requests",
    "example_output": "# Expected output for Maximum Number of Achievable Transfer Requests",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Achievable Transfer Requests\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1602",
    "title": "Find Nearest Right Node in Binary Tree",
    "titleSlug": "find-nearest-right-node-in-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Nearest Right Node in Binary Tree",
    "example_output": "# Expected output for Find Nearest Right Node in Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Nearest Right Node in Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1603",
    "title": "Design Parking System",
    "titleSlug": "design-parking-system",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Parking System",
    "example_output": "# Expected output for Design Parking System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Parking System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1604",
    "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "titleSlug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "example_output": "# Expected output for Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Alert Using Same Key-Card Three or More Times in a One Hour Period\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1605",
    "title": "Find Valid Matrix Given Row and Column Sums",
    "titleSlug": "find-valid-matrix-given-row-and-column-sums",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Valid Matrix Given Row and Column Sums",
    "example_output": "# Expected output for Find Valid Matrix Given Row and Column Sums",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Find Valid Matrix Given Row and Column Sums\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1606",
    "title": "Find Servers That Handled Most Number of Requests",
    "titleSlug": "find-servers-that-handled-most-number-of-requests",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Servers That Handled Most Number of Requests",
    "example_output": "# Expected output for Find Servers That Handled Most Number of Requests",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Servers That Handled Most Number of Requests\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1607",
    "title": "Sellers With No Sales",
    "titleSlug": "sellers-with-no-sales",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sellers With No Sales",
    "example_output": "# Expected output for Sellers With No Sales",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sellers With No Sales\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1608",
    "title": "Special Array With X Elements Greater Than or Equal X",
    "titleSlug": "special-array-with-x-elements-greater-than-or-equal-x",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Special Array With X Elements Greater Than or Equal X",
    "example_output": "# Expected output for Special Array With X Elements Greater Than or Equal X",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Special Array With X Elements Greater Than or Equal X\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1609",
    "title": "Even Odd Tree",
    "titleSlug": "even-odd-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Even Odd Tree",
    "example_output": "# Expected output for Even Odd Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Even Odd Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1610",
    "title": "Maximum Number of Visible Points",
    "titleSlug": "maximum-number-of-visible-points",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Visible Points",
    "example_output": "# Expected output for Maximum Number of Visible Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Visible Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1611",
    "title": "Minimum One Bit Operations to Make Integers Zero",
    "titleSlug": "minimum-one-bit-operations-to-make-integers-zero",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum One Bit Operations to Make Integers Zero",
    "example_output": "# Expected output for Minimum One Bit Operations to Make Integers Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum One Bit Operations to Make Integers Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1612",
    "title": "Check If Two Expression Trees are Equivalent",
    "titleSlug": "check-if-two-expression-trees-are-equivalent",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If Two Expression Trees are Equivalent",
    "example_output": "# Expected output for Check If Two Expression Trees are Equivalent",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Check If Two Expression Trees are Equivalent\"."
  },
  {
    "id": "1613",
    "title": "Find the Missing IDs",
    "titleSlug": "find-the-missing-ids",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Missing IDs",
    "example_output": "# Expected output for Find the Missing IDs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Missing IDs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1614",
    "title": "Maximum Nesting Depth of the Parentheses",
    "titleSlug": "maximum-nesting-depth-of-the-parentheses",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Nesting Depth of the Parentheses",
    "example_output": "# Expected output for Maximum Nesting Depth of the Parentheses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Nesting Depth of the Parentheses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1615",
    "title": "Maximal Network Rank",
    "titleSlug": "maximal-network-rank",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximal Network Rank",
    "example_output": "# Expected output for Maximal Network Rank",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximal Network Rank\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1616",
    "title": "Split Two Strings to Make Palindrome",
    "titleSlug": "split-two-strings-to-make-palindrome",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Two Strings to Make Palindrome",
    "example_output": "# Expected output for Split Two Strings to Make Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Split Two Strings to Make Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1617",
    "title": "Count Subtrees With Max Distance Between Cities",
    "titleSlug": "count-subtrees-with-max-distance-between-cities",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Subtrees With Max Distance Between Cities",
    "example_output": "# Expected output for Count Subtrees With Max Distance Between Cities",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Subtrees With Max Distance Between Cities\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1618",
    "title": "Maximum Font to Fit a Sentence in a Screen",
    "titleSlug": "maximum-font-to-fit-a-sentence-in-a-screen",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Font to Fit a Sentence in a Screen",
    "example_output": "# Expected output for Maximum Font to Fit a Sentence in a Screen",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Font to Fit a Sentence in a Screen\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1619",
    "title": "Mean of Array After Removing Some Elements",
    "titleSlug": "mean-of-array-after-removing-some-elements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Mean of Array After Removing Some Elements",
    "example_output": "# Expected output for Mean of Array After Removing Some Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Mean of Array After Removing Some Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1620",
    "title": "Coordinate With Maximum Network Quality",
    "titleSlug": "coordinate-with-maximum-network-quality",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Coordinate With Maximum Network Quality",
    "example_output": "# Expected output for Coordinate With Maximum Network Quality",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Coordinate With Maximum Network Quality\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1621",
    "title": "Number of Sets of K Non-Overlapping Line Segments",
    "titleSlug": "number-of-sets-of-k-non-overlapping-line-segments",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Sets of K Non-Overlapping Line Segments",
    "example_output": "# Expected output for Number of Sets of K Non-Overlapping Line Segments",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Sets of K Non-Overlapping Line Segments\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1622",
    "title": "Fancy Sequence",
    "titleSlug": "fancy-sequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Design"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fancy Sequence",
    "example_output": "# Expected output for Fancy Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fancy Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1623",
    "title": "All Valid Triplets That Can Represent a Country",
    "titleSlug": "all-valid-triplets-that-can-represent-a-country",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All Valid Triplets That Can Represent a Country",
    "example_output": "# Expected output for All Valid Triplets That Can Represent a Country",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All Valid Triplets That Can Represent a Country\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1624",
    "title": "Largest Substring Between Two Equal Characters",
    "titleSlug": "largest-substring-between-two-equal-characters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Substring Between Two Equal Characters",
    "example_output": "# Expected output for Largest Substring Between Two Equal Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Substring Between Two Equal Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1625",
    "title": "Lexicographically Smallest String After Applying Operations",
    "titleSlug": "lexicographically-smallest-string-after-applying-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lexicographically Smallest String After Applying Operations",
    "example_output": "# Expected output for Lexicographically Smallest String After Applying Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lexicographically Smallest String After Applying Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1626",
    "title": "Best Team With No Conflicts",
    "titleSlug": "best-team-with-no-conflicts",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Team With No Conflicts",
    "example_output": "# Expected output for Best Team With No Conflicts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Team With No Conflicts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1627",
    "title": "Graph Connectivity With Threshold",
    "titleSlug": "graph-connectivity-with-threshold",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Graph Connectivity With Threshold",
    "example_output": "# Expected output for Graph Connectivity With Threshold",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Graph Connectivity With Threshold\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1628",
    "title": "Design an Expression Tree With Evaluate Function",
    "titleSlug": "design-an-expression-tree-with-evaluate-function",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design an Expression Tree With Evaluate Function",
    "example_output": "# Expected output for Design an Expression Tree With Evaluate Function",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Design an Expression Tree With Evaluate Function\"."
  },
  {
    "id": "1629",
    "title": "Slowest Key",
    "titleSlug": "slowest-key",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Slowest Key",
    "example_output": "# Expected output for Slowest Key",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Slowest Key\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1630",
    "title": "Arithmetic Subarrays",
    "titleSlug": "arithmetic-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Arithmetic Subarrays",
    "example_output": "# Expected output for Arithmetic Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Arithmetic Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1631",
    "title": "Path With Minimum Effort",
    "titleSlug": "path-with-minimum-effort",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Path With Minimum Effort",
    "example_output": "# Expected output for Path With Minimum Effort",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Path With Minimum Effort\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1632",
    "title": "Rank Transform of a Matrix",
    "titleSlug": "rank-transform-of-a-matrix",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rank Transform of a Matrix",
    "example_output": "# Expected output for Rank Transform of a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Rank Transform of a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1633",
    "title": "Percentage of Users Attended a Contest",
    "titleSlug": "percentage-of-users-attended-a-contest",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Percentage of Users Attended a Contest",
    "example_output": "# Expected output for Percentage of Users Attended a Contest",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Percentage of Users Attended a Contest\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1634",
    "title": "Add Two Polynomials Represented as Linked Lists",
    "titleSlug": "add-two-polynomials-represented-as-linked-lists",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Two Polynomials Represented as Linked Lists",
    "example_output": "# Expected output for Add Two Polynomials Represented as Linked Lists",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Two Polynomials Represented as Linked Lists\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1635",
    "title": "Hopper Company Queries I",
    "titleSlug": "hopper-company-queries-i",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Hopper Company Queries I",
    "example_output": "# Expected output for Hopper Company Queries I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Hopper Company Queries I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1636",
    "title": "Sort Array by Increasing Frequency",
    "titleSlug": "sort-array-by-increasing-frequency",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Array by Increasing Frequency",
    "example_output": "# Expected output for Sort Array by Increasing Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Array by Increasing Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1637",
    "title": "Widest Vertical Area Between Two Points Containing No Points",
    "titleSlug": "widest-vertical-area-between-two-points-containing-no-points",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Widest Vertical Area Between Two Points Containing No Points",
    "example_output": "# Expected output for Widest Vertical Area Between Two Points Containing No Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Widest Vertical Area Between Two Points Containing No Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1638",
    "title": "Count Substrings That Differ by One Character",
    "titleSlug": "count-substrings-that-differ-by-one-character",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Substrings That Differ by One Character",
    "example_output": "# Expected output for Count Substrings That Differ by One Character",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Substrings That Differ by One Character\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1639",
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "titleSlug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Form a Target String Given a Dictionary",
    "example_output": "# Expected output for Number of Ways to Form a Target String Given a Dictionary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Form a Target String Given a Dictionary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1640",
    "title": "Check Array Formation Through Concatenation",
    "titleSlug": "check-array-formation-through-concatenation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check Array Formation Through Concatenation",
    "example_output": "# Expected output for Check Array Formation Through Concatenation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check Array Formation Through Concatenation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1641",
    "title": "Count Sorted Vowel Strings",
    "titleSlug": "count-sorted-vowel-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Sorted Vowel Strings",
    "example_output": "# Expected output for Count Sorted Vowel Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Sorted Vowel Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1642",
    "title": "Furthest Building You Can Reach",
    "titleSlug": "furthest-building-you-can-reach",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Furthest Building You Can Reach",
    "example_output": "# Expected output for Furthest Building You Can Reach",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Furthest Building You Can Reach\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1643",
    "title": "Kth Smallest Instructions",
    "titleSlug": "kth-smallest-instructions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Smallest Instructions",
    "example_output": "# Expected output for Kth Smallest Instructions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Smallest Instructions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1644",
    "title": "Lowest Common Ancestor of a Binary Tree II",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lowest Common Ancestor of a Binary Tree II",
    "example_output": "# Expected output for Lowest Common Ancestor of a Binary Tree II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lowest Common Ancestor of a Binary Tree II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1645",
    "title": "Hopper Company Queries II",
    "titleSlug": "hopper-company-queries-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Hopper Company Queries II",
    "example_output": "# Expected output for Hopper Company Queries II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Hopper Company Queries II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1646",
    "title": "Get Maximum in Generated Array",
    "titleSlug": "get-maximum-in-generated-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Get Maximum in Generated Array",
    "example_output": "# Expected output for Get Maximum in Generated Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Get Maximum in Generated Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1647",
    "title": "Minimum Deletions to Make Character Frequencies Unique",
    "titleSlug": "minimum-deletions-to-make-character-frequencies-unique",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Deletions to Make Character Frequencies Unique",
    "example_output": "# Expected output for Minimum Deletions to Make Character Frequencies Unique",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Deletions to Make Character Frequencies Unique\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1648",
    "title": "Sell Diminishing-Valued Colored Balls",
    "titleSlug": "sell-diminishing-valued-colored-balls",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sell Diminishing-Valued Colored Balls",
    "example_output": "# Expected output for Sell Diminishing-Valued Colored Balls",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sell Diminishing-Valued Colored Balls\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1649",
    "title": "Create Sorted Array through Instructions",
    "titleSlug": "create-sorted-array-through-instructions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create Sorted Array through Instructions",
    "example_output": "# Expected output for Create Sorted Array through Instructions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create Sorted Array through Instructions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1650",
    "title": "Lowest Common Ancestor of a Binary Tree III",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lowest Common Ancestor of a Binary Tree III",
    "example_output": "# Expected output for Lowest Common Ancestor of a Binary Tree III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lowest Common Ancestor of a Binary Tree III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1651",
    "title": "Hopper Company Queries III",
    "titleSlug": "hopper-company-queries-iii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Hopper Company Queries III",
    "example_output": "# Expected output for Hopper Company Queries III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Hopper Company Queries III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1652",
    "title": "Defuse the Bomb",
    "titleSlug": "defuse-the-bomb",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Defuse the Bomb",
    "example_output": "# Expected output for Defuse the Bomb",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Defuse the Bomb\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1653",
    "title": "Minimum Deletions to Make String Balanced",
    "titleSlug": "minimum-deletions-to-make-string-balanced",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Deletions to Make String Balanced",
    "example_output": "# Expected output for Minimum Deletions to Make String Balanced",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Deletions to Make String Balanced\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1654",
    "title": "Minimum Jumps to Reach Home",
    "titleSlug": "minimum-jumps-to-reach-home",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Jumps to Reach Home",
    "example_output": "# Expected output for Minimum Jumps to Reach Home",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Jumps to Reach Home\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1655",
    "title": "Distribute Repeating Integers",
    "titleSlug": "distribute-repeating-integers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distribute Repeating Integers",
    "example_output": "# Expected output for Distribute Repeating Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distribute Repeating Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1656",
    "title": "Design an Ordered Stream",
    "titleSlug": "design-an-ordered-stream",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design an Ordered Stream",
    "example_output": "# Expected output for Design an Ordered Stream",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design an Ordered Stream\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1657",
    "title": "Determine if Two Strings Are Close",
    "titleSlug": "determine-if-two-strings-are-close",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Determine if Two Strings Are Close",
    "example_output": "# Expected output for Determine if Two Strings Are Close",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Determine if Two Strings Are Close\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1658",
    "title": "Minimum Operations to Reduce X to Zero",
    "titleSlug": "minimum-operations-to-reduce-x-to-zero",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Reduce X to Zero",
    "example_output": "# Expected output for Minimum Operations to Reduce X to Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Reduce X to Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1659",
    "title": "Maximize Grid Happiness",
    "titleSlug": "maximize-grid-happiness",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Grid Happiness",
    "example_output": "# Expected output for Maximize Grid Happiness",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Grid Happiness\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1660",
    "title": "Correct a Binary Tree",
    "titleSlug": "correct-a-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Correct a Binary Tree",
    "example_output": "# Expected output for Correct a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Correct a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1661",
    "title": "Average Time of Process per Machine",
    "titleSlug": "average-time-of-process-per-machine",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Average Time of Process per Machine",
    "example_output": "# Expected output for Average Time of Process per Machine",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Average Time of Process per Machine\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1662",
    "title": "Check If Two String Arrays are Equivalent",
    "titleSlug": "check-if-two-string-arrays-are-equivalent",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If Two String Arrays are Equivalent",
    "example_output": "# Expected output for Check If Two String Arrays are Equivalent",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If Two String Arrays are Equivalent\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1663",
    "title": "Smallest String With A Given Numeric Value",
    "titleSlug": "smallest-string-with-a-given-numeric-value",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest String With A Given Numeric Value",
    "example_output": "# Expected output for Smallest String With A Given Numeric Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest String With A Given Numeric Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1664",
    "title": "Ways to Make a Fair Array",
    "titleSlug": "ways-to-make-a-fair-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ways to Make a Fair Array",
    "example_output": "# Expected output for Ways to Make a Fair Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ways to Make a Fair Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1665",
    "title": "Minimum Initial Energy to Finish Tasks",
    "titleSlug": "minimum-initial-energy-to-finish-tasks",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Initial Energy to Finish Tasks",
    "example_output": "# Expected output for Minimum Initial Energy to Finish Tasks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Initial Energy to Finish Tasks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1666",
    "title": "Change the Root of a Binary Tree",
    "titleSlug": "change-the-root-of-a-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Change the Root of a Binary Tree",
    "example_output": "# Expected output for Change the Root of a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Change the Root of a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1667",
    "title": "Fix Names in a Table",
    "titleSlug": "fix-names-in-a-table",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fix Names in a Table",
    "example_output": "# Expected output for Fix Names in a Table",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fix Names in a Table\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1668",
    "title": "Maximum Repeating Substring",
    "titleSlug": "maximum-repeating-substring",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Repeating Substring",
    "example_output": "# Expected output for Maximum Repeating Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Repeating Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1669",
    "title": "Merge In Between Linked Lists",
    "titleSlug": "merge-in-between-linked-lists",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge In Between Linked Lists",
    "example_output": "# Expected output for Merge In Between Linked Lists",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge In Between Linked Lists\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1670",
    "title": "Design Front Middle Back Queue",
    "titleSlug": "design-front-middle-back-queue",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Front Middle Back Queue",
    "example_output": "# Expected output for Design Front Middle Back Queue",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Front Middle Back Queue\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1671",
    "title": "Minimum Number of Removals to Make Mountain Array",
    "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Removals to Make Mountain Array",
    "example_output": "# Expected output for Minimum Number of Removals to Make Mountain Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Removals to Make Mountain Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1672",
    "title": "Richest Customer Wealth",
    "titleSlug": "richest-customer-wealth",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Richest Customer Wealth",
    "example_output": "# Expected output for Richest Customer Wealth",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Richest Customer Wealth\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1673",
    "title": "Find the Most Competitive Subsequence",
    "titleSlug": "find-the-most-competitive-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Most Competitive Subsequence",
    "example_output": "# Expected output for Find the Most Competitive Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Most Competitive Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1674",
    "title": "Minimum Moves to Make Array Complementary",
    "titleSlug": "minimum-moves-to-make-array-complementary",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Moves to Make Array Complementary",
    "example_output": "# Expected output for Minimum Moves to Make Array Complementary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Moves to Make Array Complementary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1675",
    "title": "Minimize Deviation in Array",
    "titleSlug": "minimize-deviation-in-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Deviation in Array",
    "example_output": "# Expected output for Minimize Deviation in Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Deviation in Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1676",
    "title": "Lowest Common Ancestor of a Binary Tree IV",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iv",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lowest Common Ancestor of a Binary Tree IV",
    "example_output": "# Expected output for Lowest Common Ancestor of a Binary Tree IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lowest Common Ancestor of a Binary Tree IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1677",
    "title": "Product's Worth Over Invoices",
    "titleSlug": "products-worth-over-invoices",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product's Worth Over Invoices",
    "example_output": "# Expected output for Product's Worth Over Invoices",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product's Worth Over Invoices\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1678",
    "title": "Goal Parser Interpretation",
    "titleSlug": "goal-parser-interpretation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Goal Parser Interpretation",
    "example_output": "# Expected output for Goal Parser Interpretation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Goal Parser Interpretation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1679",
    "title": "Max Number of K-Sum Pairs",
    "titleSlug": "max-number-of-k-sum-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Number of K-Sum Pairs",
    "example_output": "# Expected output for Max Number of K-Sum Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Number of K-Sum Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1680",
    "title": "Concatenation of Consecutive Binary Numbers",
    "titleSlug": "concatenation-of-consecutive-binary-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Concatenation of Consecutive Binary Numbers",
    "example_output": "# Expected output for Concatenation of Consecutive Binary Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Concatenation of Consecutive Binary Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1681",
    "title": "Minimum Incompatibility",
    "titleSlug": "minimum-incompatibility",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Incompatibility",
    "example_output": "# Expected output for Minimum Incompatibility",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Incompatibility\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1682",
    "title": "Longest Palindromic Subsequence II",
    "titleSlug": "longest-palindromic-subsequence-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Palindromic Subsequence II",
    "example_output": "# Expected output for Longest Palindromic Subsequence II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Palindromic Subsequence II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1683",
    "title": "Invalid Tweets",
    "titleSlug": "invalid-tweets",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Invalid Tweets",
    "example_output": "# Expected output for Invalid Tweets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Invalid Tweets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1684",
    "title": "Count the Number of Consistent Strings",
    "titleSlug": "count-the-number-of-consistent-strings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Consistent Strings",
    "example_output": "# Expected output for Count the Number of Consistent Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Consistent Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1685",
    "title": "Sum of Absolute Differences in a Sorted Array",
    "titleSlug": "sum-of-absolute-differences-in-a-sorted-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Absolute Differences in a Sorted Array",
    "example_output": "# Expected output for Sum of Absolute Differences in a Sorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Absolute Differences in a Sorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1686",
    "title": "Stone Game VI",
    "titleSlug": "stone-game-vi",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game VI",
    "example_output": "# Expected output for Stone Game VI",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game VI\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1687",
    "title": "Delivering Boxes from Storage to Ports",
    "titleSlug": "delivering-boxes-from-storage-to-ports",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delivering Boxes from Storage to Ports",
    "example_output": "# Expected output for Delivering Boxes from Storage to Ports",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delivering Boxes from Storage to Ports\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1688",
    "title": "Count of Matches in Tournament",
    "titleSlug": "count-of-matches-in-tournament",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count of Matches in Tournament",
    "example_output": "# Expected output for Count of Matches in Tournament",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count of Matches in Tournament\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1689",
    "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "titleSlug": "partitioning-into-minimum-number-of-deci-binary-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "example_output": "# Expected output for Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partitioning Into Minimum Number Of Deci-Binary Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1690",
    "title": "Stone Game VII",
    "titleSlug": "stone-game-vii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game VII",
    "example_output": "# Expected output for Stone Game VII",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game VII\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1691",
    "title": "Maximum Height by Stacking Cuboids ",
    "titleSlug": "maximum-height-by-stacking-cuboids",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Height by Stacking Cuboids ",
    "example_output": "# Expected output for Maximum Height by Stacking Cuboids ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Height by Stacking Cuboids\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1692",
    "title": "Count Ways to Distribute Candies",
    "titleSlug": "count-ways-to-distribute-candies",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Ways to Distribute Candies",
    "example_output": "# Expected output for Count Ways to Distribute Candies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Ways to Distribute Candies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1693",
    "title": "Daily Leads and Partners",
    "titleSlug": "daily-leads-and-partners",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Daily Leads and Partners",
    "example_output": "# Expected output for Daily Leads and Partners",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Daily Leads and Partners\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1694",
    "title": "Reformat Phone Number",
    "titleSlug": "reformat-phone-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reformat Phone Number",
    "example_output": "# Expected output for Reformat Phone Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reformat Phone Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1695",
    "title": "Maximum Erasure Value",
    "titleSlug": "maximum-erasure-value",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Erasure Value",
    "example_output": "# Expected output for Maximum Erasure Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Erasure Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1696",
    "title": "Jump Game VI",
    "titleSlug": "jump-game-vi",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jump Game VI",
    "example_output": "# Expected output for Jump Game VI",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Jump Game VI\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1697",
    "title": "Checking Existence of Edge Length Limited Paths",
    "titleSlug": "checking-existence-of-edge-length-limited-paths",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Checking Existence of Edge Length Limited Paths",
    "example_output": "# Expected output for Checking Existence of Edge Length Limited Paths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Checking Existence of Edge Length Limited Paths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1698",
    "title": "Number of Distinct Substrings in a String",
    "titleSlug": "number-of-distinct-substrings-in-a-string",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Suffix Array"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Distinct Substrings in a String",
    "example_output": "# Expected output for Number of Distinct Substrings in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Distinct Substrings in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1699",
    "title": "Number of Calls Between Two Persons",
    "titleSlug": "number-of-calls-between-two-persons",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Calls Between Two Persons",
    "example_output": "# Expected output for Number of Calls Between Two Persons",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Calls Between Two Persons\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1700",
    "title": "Number of Students Unable to Eat Lunch",
    "titleSlug": "number-of-students-unable-to-eat-lunch",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Students Unable to Eat Lunch",
    "example_output": "# Expected output for Number of Students Unable to Eat Lunch",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Students Unable to Eat Lunch\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1701",
    "title": "Average Waiting Time",
    "titleSlug": "average-waiting-time",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Average Waiting Time",
    "example_output": "# Expected output for Average Waiting Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Average Waiting Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1702",
    "title": "Maximum Binary String After Change",
    "titleSlug": "maximum-binary-string-after-change",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Binary String After Change",
    "example_output": "# Expected output for Maximum Binary String After Change",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Binary String After Change\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1703",
    "title": "Minimum Adjacent Swaps for K Consecutive Ones",
    "titleSlug": "minimum-adjacent-swaps-for-k-consecutive-ones",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Adjacent Swaps for K Consecutive Ones",
    "example_output": "# Expected output for Minimum Adjacent Swaps for K Consecutive Ones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Adjacent Swaps for K Consecutive Ones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1704",
    "title": "Determine if String Halves Are Alike",
    "titleSlug": "determine-if-string-halves-are-alike",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Determine if String Halves Are Alike",
    "example_output": "# Expected output for Determine if String Halves Are Alike",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Determine if String Halves Are Alike\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1705",
    "title": "Maximum Number of Eaten Apples",
    "titleSlug": "maximum-number-of-eaten-apples",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Eaten Apples",
    "example_output": "# Expected output for Maximum Number of Eaten Apples",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Eaten Apples\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1706",
    "title": "Where Will the Ball Fall",
    "titleSlug": "where-will-the-ball-fall",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Where Will the Ball Fall",
    "example_output": "# Expected output for Where Will the Ball Fall",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Where Will the Ball Fall\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1707",
    "title": "Maximum XOR With an Element From Array",
    "titleSlug": "maximum-xor-with-an-element-from-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum XOR With an Element From Array",
    "example_output": "# Expected output for Maximum XOR With an Element From Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum XOR With an Element From Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1708",
    "title": "Largest Subarray Length K",
    "titleSlug": "largest-subarray-length-k",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Subarray Length K",
    "example_output": "# Expected output for Largest Subarray Length K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Subarray Length K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1709",
    "title": "Biggest Window Between Visits",
    "titleSlug": "biggest-window-between-visits",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Biggest Window Between Visits",
    "example_output": "# Expected output for Biggest Window Between Visits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Biggest Window Between Visits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1710",
    "title": "Maximum Units on a Truck",
    "titleSlug": "maximum-units-on-a-truck",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Units on a Truck",
    "example_output": "# Expected output for Maximum Units on a Truck",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Units on a Truck\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1711",
    "title": "Count Good Meals",
    "titleSlug": "count-good-meals",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Good Meals",
    "example_output": "# Expected output for Count Good Meals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Good Meals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1712",
    "title": "Ways to Split Array Into Three Subarrays",
    "titleSlug": "ways-to-split-array-into-three-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ways to Split Array Into Three Subarrays",
    "example_output": "# Expected output for Ways to Split Array Into Three Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ways to Split Array Into Three Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1713",
    "title": "Minimum Operations to Make a Subsequence",
    "titleSlug": "minimum-operations-to-make-a-subsequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make a Subsequence",
    "example_output": "# Expected output for Minimum Operations to Make a Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make a Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1714",
    "title": "Sum Of Special Evenly-Spaced Elements In Array",
    "titleSlug": "sum-of-special-evenly-spaced-elements-in-array",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum Of Special Evenly-Spaced Elements In Array",
    "example_output": "# Expected output for Sum Of Special Evenly-Spaced Elements In Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum Of Special Evenly-Spaced Elements In Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1715",
    "title": "Count Apples and Oranges",
    "titleSlug": "count-apples-and-oranges",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Apples and Oranges",
    "example_output": "# Expected output for Count Apples and Oranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Apples and Oranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1716",
    "title": "Calculate Money in Leetcode Bank",
    "titleSlug": "calculate-money-in-leetcode-bank",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate Money in Leetcode Bank",
    "example_output": "# Expected output for Calculate Money in Leetcode Bank",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate Money in Leetcode Bank\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1717",
    "title": "Maximum Score From Removing Substrings",
    "titleSlug": "maximum-score-from-removing-substrings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score From Removing Substrings",
    "example_output": "# Expected output for Maximum Score From Removing Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score From Removing Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1718",
    "title": "Construct the Lexicographically Largest Valid Sequence",
    "titleSlug": "construct-the-lexicographically-largest-valid-sequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct the Lexicographically Largest Valid Sequence",
    "example_output": "# Expected output for Construct the Lexicographically Largest Valid Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct the Lexicographically Largest Valid Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1719",
    "title": "Number Of Ways To Reconstruct A Tree",
    "titleSlug": "number-of-ways-to-reconstruct-a-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number Of Ways To Reconstruct A Tree",
    "example_output": "# Expected output for Number Of Ways To Reconstruct A Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number Of Ways To Reconstruct A Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1720",
    "title": "Decode XORed Array",
    "titleSlug": "decode-xored-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decode XORed Array",
    "example_output": "# Expected output for Decode XORed Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decode XORed Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1721",
    "title": "Swapping Nodes in a Linked List",
    "titleSlug": "swapping-nodes-in-a-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Swapping Nodes in a Linked List",
    "example_output": "# Expected output for Swapping Nodes in a Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Swapping Nodes in a Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1722",
    "title": "Minimize Hamming Distance After Swap Operations",
    "titleSlug": "minimize-hamming-distance-after-swap-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Hamming Distance After Swap Operations",
    "example_output": "# Expected output for Minimize Hamming Distance After Swap Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Hamming Distance After Swap Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1723",
    "title": "Find Minimum Time to Finish All Jobs",
    "titleSlug": "find-minimum-time-to-finish-all-jobs",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Minimum Time to Finish All Jobs",
    "example_output": "# Expected output for Find Minimum Time to Finish All Jobs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Minimum Time to Finish All Jobs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1724",
    "title": "Checking Existence of Edge Length Limited Paths II",
    "titleSlug": "checking-existence-of-edge-length-limited-paths-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Minimum Spanning Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Checking Existence of Edge Length Limited Paths II",
    "example_output": "# Expected output for Checking Existence of Edge Length Limited Paths II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Checking Existence of Edge Length Limited Paths II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1725",
    "title": "Number Of Rectangles That Can Form The Largest Square",
    "titleSlug": "number-of-rectangles-that-can-form-the-largest-square",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number Of Rectangles That Can Form The Largest Square",
    "example_output": "# Expected output for Number Of Rectangles That Can Form The Largest Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number Of Rectangles That Can Form The Largest Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1726",
    "title": "Tuple with Same Product",
    "titleSlug": "tuple-with-same-product",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tuple with Same Product",
    "example_output": "# Expected output for Tuple with Same Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tuple with Same Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1727",
    "title": "Largest Submatrix With Rearrangements",
    "titleSlug": "largest-submatrix-with-rearrangements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Submatrix With Rearrangements",
    "example_output": "# Expected output for Largest Submatrix With Rearrangements",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Largest Submatrix With Rearrangements\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1728",
    "title": "Cat and Mouse II",
    "titleSlug": "cat-and-mouse-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cat and Mouse II",
    "example_output": "# Expected output for Cat and Mouse II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cat and Mouse II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1729",
    "title": "Find Followers Count",
    "titleSlug": "find-followers-count",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Followers Count",
    "example_output": "# Expected output for Find Followers Count",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Followers Count\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1730",
    "title": "Shortest Path to Get Food",
    "titleSlug": "shortest-path-to-get-food",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Path to Get Food",
    "example_output": "# Expected output for Shortest Path to Get Food",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Path to Get Food\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1731",
    "title": "The Number of Employees Which Report to Each Employee",
    "titleSlug": "the-number-of-employees-which-report-to-each-employee",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Employees Which Report to Each Employee",
    "example_output": "# Expected output for The Number of Employees Which Report to Each Employee",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Employees Which Report to Each Employee\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1732",
    "title": "Find the Highest Altitude",
    "titleSlug": "find-the-highest-altitude",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Highest Altitude",
    "example_output": "# Expected output for Find the Highest Altitude",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Highest Altitude\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1733",
    "title": "Minimum Number of People to Teach",
    "titleSlug": "minimum-number-of-people-to-teach",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of People to Teach",
    "example_output": "# Expected output for Minimum Number of People to Teach",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of People to Teach\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1734",
    "title": "Decode XORed Permutation",
    "titleSlug": "decode-xored-permutation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decode XORed Permutation",
    "example_output": "# Expected output for Decode XORed Permutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decode XORed Permutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1735",
    "title": "Count Ways to Make Array With Product",
    "titleSlug": "count-ways-to-make-array-with-product",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Ways to Make Array With Product",
    "example_output": "# Expected output for Count Ways to Make Array With Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Ways to Make Array With Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1736",
    "title": "Latest Time by Replacing Hidden Digits",
    "titleSlug": "latest-time-by-replacing-hidden-digits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Latest Time by Replacing Hidden Digits",
    "example_output": "# Expected output for Latest Time by Replacing Hidden Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Latest Time by Replacing Hidden Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1737",
    "title": "Change Minimum Characters to Satisfy One of Three Conditions",
    "titleSlug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Change Minimum Characters to Satisfy One of Three Conditions",
    "example_output": "# Expected output for Change Minimum Characters to Satisfy One of Three Conditions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Change Minimum Characters to Satisfy One of Three Conditions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1738",
    "title": "Find Kth Largest XOR Coordinate Value",
    "titleSlug": "find-kth-largest-xor-coordinate-value",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Quickselect"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Kth Largest XOR Coordinate Value",
    "example_output": "# Expected output for Find Kth Largest XOR Coordinate Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Kth Largest XOR Coordinate Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1739",
    "title": "Building Boxes",
    "titleSlug": "building-boxes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Building Boxes",
    "example_output": "# Expected output for Building Boxes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Building Boxes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1740",
    "title": "Find Distance in a Binary Tree",
    "titleSlug": "find-distance-in-a-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Distance in a Binary Tree",
    "example_output": "# Expected output for Find Distance in a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Distance in a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1741",
    "title": "Find Total Time Spent by Each Employee",
    "titleSlug": "find-total-time-spent-by-each-employee",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Total Time Spent by Each Employee",
    "example_output": "# Expected output for Find Total Time Spent by Each Employee",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Total Time Spent by Each Employee\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1742",
    "title": "Maximum Number of Balls in a Box",
    "titleSlug": "maximum-number-of-balls-in-a-box",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Balls in a Box",
    "example_output": "# Expected output for Maximum Number of Balls in a Box",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Balls in a Box\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1743",
    "title": "Restore the Array From Adjacent Pairs",
    "titleSlug": "restore-the-array-from-adjacent-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Restore the Array From Adjacent Pairs",
    "example_output": "# Expected output for Restore the Array From Adjacent Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Restore the Array From Adjacent Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1744",
    "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
    "titleSlug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Can You Eat Your Favorite Candy on Your Favorite Day?",
    "example_output": "# Expected output for Can You Eat Your Favorite Candy on Your Favorite Day?",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Can You Eat Your Favorite Candy on Your Favorite Day?\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1745",
    "title": "Palindrome Partitioning IV",
    "titleSlug": "palindrome-partitioning-iv",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Partitioning IV",
    "example_output": "# Expected output for Palindrome Partitioning IV",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Partitioning IV\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1746",
    "title": "Maximum Subarray Sum After One Operation",
    "titleSlug": "maximum-subarray-sum-after-one-operation",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Subarray Sum After One Operation",
    "example_output": "# Expected output for Maximum Subarray Sum After One Operation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Subarray Sum After One Operation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1747",
    "title": "Leetflex Banned Accounts",
    "titleSlug": "leetflex-banned-accounts",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Leetflex Banned Accounts",
    "example_output": "# Expected output for Leetflex Banned Accounts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Leetflex Banned Accounts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1748",
    "title": "Sum of Unique Elements",
    "titleSlug": "sum-of-unique-elements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Unique Elements",
    "example_output": "# Expected output for Sum of Unique Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Unique Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1749",
    "title": "Maximum Absolute Sum of Any Subarray",
    "titleSlug": "maximum-absolute-sum-of-any-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Absolute Sum of Any Subarray",
    "example_output": "# Expected output for Maximum Absolute Sum of Any Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Absolute Sum of Any Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1750",
    "title": "Minimum Length of String After Deleting Similar Ends",
    "titleSlug": "minimum-length-of-string-after-deleting-similar-ends",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Length of String After Deleting Similar Ends",
    "example_output": "# Expected output for Minimum Length of String After Deleting Similar Ends",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Length of String After Deleting Similar Ends\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1751",
    "title": "Maximum Number of Events That Can Be Attended II",
    "titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Events That Can Be Attended II",
    "example_output": "# Expected output for Maximum Number of Events That Can Be Attended II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Events That Can Be Attended II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1752",
    "title": "Check if Array Is Sorted and Rotated",
    "titleSlug": "check-if-array-is-sorted-and-rotated",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Array Is Sorted and Rotated",
    "example_output": "# Expected output for Check if Array Is Sorted and Rotated",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Array Is Sorted and Rotated\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1753",
    "title": "Maximum Score From Removing Stones",
    "titleSlug": "maximum-score-from-removing-stones",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score From Removing Stones",
    "example_output": "# Expected output for Maximum Score From Removing Stones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score From Removing Stones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1754",
    "title": "Largest Merge Of Two Strings",
    "titleSlug": "largest-merge-of-two-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Merge Of Two Strings",
    "example_output": "# Expected output for Largest Merge Of Two Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Merge Of Two Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1755",
    "title": "Closest Subsequence Sum",
    "titleSlug": "closest-subsequence-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Subsequence Sum",
    "example_output": "# Expected output for Closest Subsequence Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Subsequence Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1756",
    "title": "Design Most Recently Used Queue",
    "titleSlug": "design-most-recently-used-queue",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Most Recently Used Queue",
    "example_output": "# Expected output for Design Most Recently Used Queue",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Most Recently Used Queue\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1757",
    "title": "Recyclable and Low Fat Products",
    "titleSlug": "recyclable-and-low-fat-products",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Recyclable and Low Fat Products",
    "example_output": "# Expected output for Recyclable and Low Fat Products",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Recyclable and Low Fat Products\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1758",
    "title": "Minimum Changes To Make Alternating Binary String",
    "titleSlug": "minimum-changes-to-make-alternating-binary-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Changes To Make Alternating Binary String",
    "example_output": "# Expected output for Minimum Changes To Make Alternating Binary String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Changes To Make Alternating Binary String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1759",
    "title": "Count Number of Homogenous Substrings",
    "titleSlug": "count-number-of-homogenous-substrings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Homogenous Substrings",
    "example_output": "# Expected output for Count Number of Homogenous Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Homogenous Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1760",
    "title": "Minimum Limit of Balls in a Bag",
    "titleSlug": "minimum-limit-of-balls-in-a-bag",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Limit of Balls in a Bag",
    "example_output": "# Expected output for Minimum Limit of Balls in a Bag",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Limit of Balls in a Bag\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1761",
    "title": "Minimum Degree of a Connected Trio in a Graph",
    "titleSlug": "minimum-degree-of-a-connected-trio-in-a-graph",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Degree of a Connected Trio in a Graph",
    "example_output": "# Expected output for Minimum Degree of a Connected Trio in a Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Degree of a Connected Trio in a Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1762",
    "title": "Buildings With an Ocean View",
    "titleSlug": "buildings-with-an-ocean-view",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Buildings With an Ocean View",
    "example_output": "# Expected output for Buildings With an Ocean View",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Buildings With an Ocean View\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1763",
    "title": "Longest Nice Substring",
    "titleSlug": "longest-nice-substring",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Nice Substring",
    "example_output": "# Expected output for Longest Nice Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Nice Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1764",
    "title": "Form Array by Concatenating Subarrays of Another Array",
    "titleSlug": "form-array-by-concatenating-subarrays-of-another-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Form Array by Concatenating Subarrays of Another Array",
    "example_output": "# Expected output for Form Array by Concatenating Subarrays of Another Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Form Array by Concatenating Subarrays of Another Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1765",
    "title": "Map of Highest Peak",
    "titleSlug": "map-of-highest-peak",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Map of Highest Peak",
    "example_output": "# Expected output for Map of Highest Peak",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Map of Highest Peak\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1766",
    "title": "Tree of Coprimes",
    "titleSlug": "tree-of-coprimes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tree of Coprimes",
    "example_output": "# Expected output for Tree of Coprimes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tree of Coprimes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1767",
    "title": "Find the Subtasks That Did Not Execute",
    "titleSlug": "find-the-subtasks-that-did-not-execute",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Subtasks That Did Not Execute",
    "example_output": "# Expected output for Find the Subtasks That Did Not Execute",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Subtasks That Did Not Execute\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1768",
    "title": "Merge Strings Alternately",
    "titleSlug": "merge-strings-alternately",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Strings Alternately",
    "example_output": "# Expected output for Merge Strings Alternately",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge Strings Alternately\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1769",
    "title": "Minimum Number of Operations to Move All Balls to Each Box",
    "titleSlug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Move All Balls to Each Box",
    "example_output": "# Expected output for Minimum Number of Operations to Move All Balls to Each Box",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Move All Balls to Each Box\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1770",
    "title": "Maximum Score from Performing Multiplication Operations",
    "titleSlug": "maximum-score-from-performing-multiplication-operations",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score from Performing Multiplication Operations",
    "example_output": "# Expected output for Maximum Score from Performing Multiplication Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score from Performing Multiplication Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1771",
    "title": "Maximize Palindrome Length From Subsequences",
    "titleSlug": "maximize-palindrome-length-from-subsequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Palindrome Length From Subsequences",
    "example_output": "# Expected output for Maximize Palindrome Length From Subsequences",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Maximize Palindrome Length From Subsequences\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1772",
    "title": "Sort Features by Popularity",
    "titleSlug": "sort-features-by-popularity",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Features by Popularity",
    "example_output": "# Expected output for Sort Features by Popularity",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Features by Popularity\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1773",
    "title": "Count Items Matching a Rule",
    "titleSlug": "count-items-matching-a-rule",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Items Matching a Rule",
    "example_output": "# Expected output for Count Items Matching a Rule",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Items Matching a Rule\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1774",
    "title": "Closest Dessert Cost",
    "titleSlug": "closest-dessert-cost",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Dessert Cost",
    "example_output": "# Expected output for Closest Dessert Cost",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Dessert Cost\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1775",
    "title": "Equal Sum Arrays With Minimum Number of Operations",
    "titleSlug": "equal-sum-arrays-with-minimum-number-of-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Equal Sum Arrays With Minimum Number of Operations",
    "example_output": "# Expected output for Equal Sum Arrays With Minimum Number of Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Equal Sum Arrays With Minimum Number of Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1776",
    "title": "Car Fleet II",
    "titleSlug": "car-fleet-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Car Fleet II",
    "example_output": "# Expected output for Car Fleet II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Car Fleet II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1777",
    "title": "Product's Price for Each Store",
    "titleSlug": "products-price-for-each-store",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product's Price for Each Store",
    "example_output": "# Expected output for Product's Price for Each Store",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product's Price for Each Store\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1778",
    "title": "Shortest Path in a Hidden Grid",
    "titleSlug": "shortest-path-in-a-hidden-grid",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Path in a Hidden Grid",
    "example_output": "# Expected output for Shortest Path in a Hidden Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Path in a Hidden Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1779",
    "title": "Find Nearest Point That Has the Same X or Y Coordinate",
    "titleSlug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Nearest Point That Has the Same X or Y Coordinate",
    "example_output": "# Expected output for Find Nearest Point That Has the Same X or Y Coordinate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Nearest Point That Has the Same X or Y Coordinate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1780",
    "title": "Check if Number is a Sum of Powers of Three",
    "titleSlug": "check-if-number-is-a-sum-of-powers-of-three",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Number is a Sum of Powers of Three",
    "example_output": "# Expected output for Check if Number is a Sum of Powers of Three",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Number is a Sum of Powers of Three\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1781",
    "title": "Sum of Beauty of All Substrings",
    "titleSlug": "sum-of-beauty-of-all-substrings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Beauty of All Substrings",
    "example_output": "# Expected output for Sum of Beauty of All Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Beauty of All Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1782",
    "title": "Count Pairs Of Nodes",
    "titleSlug": "count-pairs-of-nodes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Pairs Of Nodes",
    "example_output": "# Expected output for Count Pairs Of Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Pairs Of Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1783",
    "title": "Grand Slam Titles",
    "titleSlug": "grand-slam-titles",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Grand Slam Titles",
    "example_output": "# Expected output for Grand Slam Titles",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Grand Slam Titles\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1784",
    "title": "Check if Binary String Has at Most One Segment of Ones",
    "titleSlug": "check-if-binary-string-has-at-most-one-segment-of-ones",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Binary String Has at Most One Segment of Ones",
    "example_output": "# Expected output for Check if Binary String Has at Most One Segment of Ones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Binary String Has at Most One Segment of Ones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1785",
    "title": "Minimum Elements to Add to Form a Given Sum",
    "titleSlug": "minimum-elements-to-add-to-form-a-given-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Elements to Add to Form a Given Sum",
    "example_output": "# Expected output for Minimum Elements to Add to Form a Given Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Elements to Add to Form a Given Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1786",
    "title": "Number of Restricted Paths From First to Last Node",
    "titleSlug": "number-of-restricted-paths-from-first-to-last-node",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Restricted Paths From First to Last Node",
    "example_output": "# Expected output for Number of Restricted Paths From First to Last Node",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Restricted Paths From First to Last Node\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1787",
    "title": "Make the XOR of All Segments Equal to Zero",
    "titleSlug": "make-the-xor-of-all-segments-equal-to-zero",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make the XOR of All Segments Equal to Zero",
    "example_output": "# Expected output for Make the XOR of All Segments Equal to Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make the XOR of All Segments Equal to Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1788",
    "title": "Maximize the Beauty of the Garden",
    "titleSlug": "maximize-the-beauty-of-the-garden",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize the Beauty of the Garden",
    "example_output": "# Expected output for Maximize the Beauty of the Garden",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize the Beauty of the Garden\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1789",
    "title": "Primary Department for Each Employee",
    "titleSlug": "primary-department-for-each-employee",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Primary Department for Each Employee",
    "example_output": "# Expected output for Primary Department for Each Employee",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Primary Department for Each Employee\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1790",
    "title": "Check if One String Swap Can Make Strings Equal",
    "titleSlug": "check-if-one-string-swap-can-make-strings-equal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if One String Swap Can Make Strings Equal",
    "example_output": "# Expected output for Check if One String Swap Can Make Strings Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if One String Swap Can Make Strings Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1791",
    "title": "Find Center of Star Graph",
    "titleSlug": "find-center-of-star-graph",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Center of Star Graph",
    "example_output": "# Expected output for Find Center of Star Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Center of Star Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1792",
    "title": "Maximum Average Pass Ratio",
    "titleSlug": "maximum-average-pass-ratio",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Average Pass Ratio",
    "example_output": "# Expected output for Maximum Average Pass Ratio",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Average Pass Ratio\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1793",
    "title": "Maximum Score of a Good Subarray",
    "titleSlug": "maximum-score-of-a-good-subarray",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score of a Good Subarray",
    "example_output": "# Expected output for Maximum Score of a Good Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score of a Good Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1794",
    "title": "Count Pairs of Equal Substrings With Minimum Difference",
    "titleSlug": "count-pairs-of-equal-substrings-with-minimum-difference",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Pairs of Equal Substrings With Minimum Difference",
    "example_output": "# Expected output for Count Pairs of Equal Substrings With Minimum Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Pairs of Equal Substrings With Minimum Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1795",
    "title": "Rearrange Products Table",
    "titleSlug": "rearrange-products-table",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rearrange Products Table",
    "example_output": "# Expected output for Rearrange Products Table",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rearrange Products Table\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1796",
    "title": "Second Largest Digit in a String",
    "titleSlug": "second-largest-digit-in-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Second Largest Digit in a String",
    "example_output": "# Expected output for Second Largest Digit in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Second Largest Digit in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1797",
    "title": "Design Authentication Manager",
    "titleSlug": "design-authentication-manager",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Design"
      },
      {
        "name": "Doubly-Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Authentication Manager",
    "example_output": "# Expected output for Design Authentication Manager",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Authentication Manager\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1798",
    "title": "Maximum Number of Consecutive Values You Can Make",
    "titleSlug": "maximum-number-of-consecutive-values-you-can-make",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Consecutive Values You Can Make",
    "example_output": "# Expected output for Maximum Number of Consecutive Values You Can Make",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Consecutive Values You Can Make\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1799",
    "title": "Maximize Score After N Operations",
    "titleSlug": "maximize-score-after-n-operations",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Number Theory"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Score After N Operations",
    "example_output": "# Expected output for Maximize Score After N Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Score After N Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1800",
    "title": "Maximum Ascending Subarray Sum",
    "titleSlug": "maximum-ascending-subarray-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Ascending Subarray Sum",
    "example_output": "# Expected output for Maximum Ascending Subarray Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Ascending Subarray Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1801",
    "title": "Number of Orders in the Backlog",
    "titleSlug": "number-of-orders-in-the-backlog",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Orders in the Backlog",
    "example_output": "# Expected output for Number of Orders in the Backlog",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Orders in the Backlog\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1802",
    "title": "Maximum Value at a Given Index in a Bounded Array",
    "titleSlug": "maximum-value-at-a-given-index-in-a-bounded-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Value at a Given Index in a Bounded Array",
    "example_output": "# Expected output for Maximum Value at a Given Index in a Bounded Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Value at a Given Index in a Bounded Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1803",
    "title": "Count Pairs With XOR in a Range",
    "titleSlug": "count-pairs-with-xor-in-a-range",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Pairs With XOR in a Range",
    "example_output": "# Expected output for Count Pairs With XOR in a Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Pairs With XOR in a Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1804",
    "title": "Implement Trie II (Prefix Tree)",
    "titleSlug": "implement-trie-ii-prefix-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Implement Trie II (Prefix Tree)",
    "example_output": "# Expected output for Implement Trie II (Prefix Tree)",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Implement Trie II (Prefix Tree)\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1805",
    "title": "Number of Different Integers in a String",
    "titleSlug": "number-of-different-integers-in-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Different Integers in a String",
    "example_output": "# Expected output for Number of Different Integers in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Different Integers in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1806",
    "title": "Minimum Number of Operations to Reinitialize a Permutation",
    "titleSlug": "minimum-number-of-operations-to-reinitialize-a-permutation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Reinitialize a Permutation",
    "example_output": "# Expected output for Minimum Number of Operations to Reinitialize a Permutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Reinitialize a Permutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1807",
    "title": "Evaluate the Bracket Pairs of a String",
    "titleSlug": "evaluate-the-bracket-pairs-of-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Evaluate the Bracket Pairs of a String",
    "example_output": "# Expected output for Evaluate the Bracket Pairs of a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Evaluate the Bracket Pairs of a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1808",
    "title": "Maximize Number of Nice Divisors",
    "titleSlug": "maximize-number-of-nice-divisors",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Number of Nice Divisors",
    "example_output": "# Expected output for Maximize Number of Nice Divisors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Number of Nice Divisors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1809",
    "title": "Ad-Free Sessions",
    "titleSlug": "ad-free-sessions",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ad-Free Sessions",
    "example_output": "# Expected output for Ad-Free Sessions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ad-Free Sessions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1810",
    "title": "Minimum Path Cost in a Hidden Grid",
    "titleSlug": "minimum-path-cost-in-a-hidden-grid",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Interactive"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Path Cost in a Hidden Grid",
    "example_output": "# Expected output for Minimum Path Cost in a Hidden Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Path Cost in a Hidden Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1811",
    "title": "Find Interview Candidates",
    "titleSlug": "find-interview-candidates",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Interview Candidates",
    "example_output": "# Expected output for Find Interview Candidates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Interview Candidates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1812",
    "title": "Determine Color of a Chessboard Square",
    "titleSlug": "determine-color-of-a-chessboard-square",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Determine Color of a Chessboard Square",
    "example_output": "# Expected output for Determine Color of a Chessboard Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Determine Color of a Chessboard Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1813",
    "title": "Sentence Similarity III",
    "titleSlug": "sentence-similarity-iii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sentence Similarity III",
    "example_output": "# Expected output for Sentence Similarity III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sentence Similarity III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1814",
    "title": "Count Nice Pairs in an Array",
    "titleSlug": "count-nice-pairs-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Nice Pairs in an Array",
    "example_output": "# Expected output for Count Nice Pairs in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Nice Pairs in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1815",
    "title": "Maximum Number of Groups Getting Fresh Donuts",
    "titleSlug": "maximum-number-of-groups-getting-fresh-donuts",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Groups Getting Fresh Donuts",
    "example_output": "# Expected output for Maximum Number of Groups Getting Fresh Donuts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Groups Getting Fresh Donuts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1816",
    "title": "Truncate Sentence",
    "titleSlug": "truncate-sentence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Truncate Sentence",
    "example_output": "# Expected output for Truncate Sentence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Truncate Sentence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1817",
    "title": "Finding the Users Active Minutes",
    "titleSlug": "finding-the-users-active-minutes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Finding the Users Active Minutes",
    "example_output": "# Expected output for Finding the Users Active Minutes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Finding the Users Active Minutes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1818",
    "title": "Minimum Absolute Sum Difference",
    "titleSlug": "minimum-absolute-sum-difference",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Absolute Sum Difference",
    "example_output": "# Expected output for Minimum Absolute Sum Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Absolute Sum Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1819",
    "title": "Number of Different Subsequences GCDs",
    "titleSlug": "number-of-different-subsequences-gcds",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Different Subsequences GCDs",
    "example_output": "# Expected output for Number of Different Subsequences GCDs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Different Subsequences GCDs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1820",
    "title": "Maximum Number of Accepted Invitations",
    "titleSlug": "maximum-number-of-accepted-invitations",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Accepted Invitations",
    "example_output": "# Expected output for Maximum Number of Accepted Invitations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Accepted Invitations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1821",
    "title": "Find Customers With Positive Revenue this Year",
    "titleSlug": "find-customers-with-positive-revenue-this-year",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Customers With Positive Revenue this Year",
    "example_output": "# Expected output for Find Customers With Positive Revenue this Year",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Customers With Positive Revenue this Year\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1822",
    "title": "Sign of the Product of an Array",
    "titleSlug": "sign-of-the-product-of-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sign of the Product of an Array",
    "example_output": "# Expected output for Sign of the Product of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sign of the Product of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1823",
    "title": "Find the Winner of the Circular Game",
    "titleSlug": "find-the-winner-of-the-circular-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Winner of the Circular Game",
    "example_output": "# Expected output for Find the Winner of the Circular Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Winner of the Circular Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1824",
    "title": "Minimum Sideway Jumps",
    "titleSlug": "minimum-sideway-jumps",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Sideway Jumps",
    "example_output": "# Expected output for Minimum Sideway Jumps",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Sideway Jumps\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1825",
    "title": "Finding MK Average",
    "titleSlug": "finding-mk-average",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Data Stream"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Finding MK Average",
    "example_output": "# Expected output for Finding MK Average",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Finding MK Average\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1826",
    "title": "Faulty Sensor",
    "titleSlug": "faulty-sensor",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Faulty Sensor",
    "example_output": "# Expected output for Faulty Sensor",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Faulty Sensor\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1827",
    "title": "Minimum Operations to Make the Array Increasing",
    "titleSlug": "minimum-operations-to-make-the-array-increasing",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make the Array Increasing",
    "example_output": "# Expected output for Minimum Operations to Make the Array Increasing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make the Array Increasing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1828",
    "title": "Queries on Number of Points Inside a Circle",
    "titleSlug": "queries-on-number-of-points-inside-a-circle",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Queries on Number of Points Inside a Circle",
    "example_output": "# Expected output for Queries on Number of Points Inside a Circle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Queries on Number of Points Inside a Circle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1829",
    "title": "Maximum XOR for Each Query",
    "titleSlug": "maximum-xor-for-each-query",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum XOR for Each Query",
    "example_output": "# Expected output for Maximum XOR for Each Query",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum XOR for Each Query\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1830",
    "title": "Minimum Number of Operations to Make String Sorted",
    "titleSlug": "minimum-number-of-operations-to-make-string-sorted",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Make String Sorted",
    "example_output": "# Expected output for Minimum Number of Operations to Make String Sorted",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Make String Sorted\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1831",
    "title": "Maximum Transaction Each Day",
    "titleSlug": "maximum-transaction-each-day",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Transaction Each Day",
    "example_output": "# Expected output for Maximum Transaction Each Day",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Transaction Each Day\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1832",
    "title": "Check if the Sentence Is Pangram",
    "titleSlug": "check-if-the-sentence-is-pangram",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if the Sentence Is Pangram",
    "example_output": "# Expected output for Check if the Sentence Is Pangram",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if the Sentence Is Pangram\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1833",
    "title": "Maximum Ice Cream Bars",
    "titleSlug": "maximum-ice-cream-bars",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Ice Cream Bars",
    "example_output": "# Expected output for Maximum Ice Cream Bars",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Ice Cream Bars\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1834",
    "title": "Single-Threaded CPU",
    "titleSlug": "single-threaded-cpu",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Single-Threaded CPU",
    "example_output": "# Expected output for Single-Threaded CPU",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Single-Threaded CPU\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1835",
    "title": "Find XOR Sum of All Pairs Bitwise AND",
    "titleSlug": "find-xor-sum-of-all-pairs-bitwise-and",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find XOR Sum of All Pairs Bitwise AND",
    "example_output": "# Expected output for Find XOR Sum of All Pairs Bitwise AND",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find XOR Sum of All Pairs Bitwise AND\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1836",
    "title": "Remove Duplicates From an Unsorted Linked List",
    "titleSlug": "remove-duplicates-from-an-unsorted-linked-list",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Duplicates From an Unsorted Linked List",
    "example_output": "# Expected output for Remove Duplicates From an Unsorted Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Duplicates From an Unsorted Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1837",
    "title": "Sum of Digits in Base K",
    "titleSlug": "sum-of-digits-in-base-k",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Digits in Base K",
    "example_output": "# Expected output for Sum of Digits in Base K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Digits in Base K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1838",
    "title": "Frequency of the Most Frequent Element",
    "titleSlug": "frequency-of-the-most-frequent-element",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Frequency of the Most Frequent Element",
    "example_output": "# Expected output for Frequency of the Most Frequent Element",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Frequency of the Most Frequent Element\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1839",
    "title": "Longest Substring Of All Vowels in Order",
    "titleSlug": "longest-substring-of-all-vowels-in-order",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Substring Of All Vowels in Order",
    "example_output": "# Expected output for Longest Substring Of All Vowels in Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Substring Of All Vowels in Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1840",
    "title": "Maximum Building Height",
    "titleSlug": "maximum-building-height",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Building Height",
    "example_output": "# Expected output for Maximum Building Height",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Building Height\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1841",
    "title": "League Statistics",
    "titleSlug": "league-statistics",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for League Statistics",
    "example_output": "# Expected output for League Statistics",
    "status": "TO_DO",
    "description": "Solve the problem titled \"League Statistics\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1842",
    "title": "Next Palindrome Using Same Digits",
    "titleSlug": "next-palindrome-using-same-digits",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Palindrome Using Same Digits",
    "example_output": "# Expected output for Next Palindrome Using Same Digits",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Next Palindrome Using Same Digits\". Return the result based on the transformation rules involved."
  },
  {
    "id": "1843",
    "title": "Suspicious Bank Accounts",
    "titleSlug": "suspicious-bank-accounts",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Suspicious Bank Accounts",
    "example_output": "# Expected output for Suspicious Bank Accounts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Suspicious Bank Accounts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1844",
    "title": "Replace All Digits with Characters",
    "titleSlug": "replace-all-digits-with-characters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Replace All Digits with Characters",
    "example_output": "# Expected output for Replace All Digits with Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Replace All Digits with Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1845",
    "title": "Seat Reservation Manager",
    "titleSlug": "seat-reservation-manager",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Seat Reservation Manager",
    "example_output": "# Expected output for Seat Reservation Manager",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Seat Reservation Manager\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1846",
    "title": "Maximum Element After Decreasing and Rearranging",
    "titleSlug": "maximum-element-after-decreasing-and-rearranging",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Element After Decreasing and Rearranging",
    "example_output": "# Expected output for Maximum Element After Decreasing and Rearranging",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Element After Decreasing and Rearranging\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1847",
    "title": "Closest Room",
    "titleSlug": "closest-room",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Room",
    "example_output": "# Expected output for Closest Room",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Room\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1848",
    "title": "Minimum Distance to the Target Element",
    "titleSlug": "minimum-distance-to-the-target-element",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Distance to the Target Element",
    "example_output": "# Expected output for Minimum Distance to the Target Element",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Distance to the Target Element\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1849",
    "title": "Splitting a String Into Descending Consecutive Values",
    "titleSlug": "splitting-a-string-into-descending-consecutive-values",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Splitting a String Into Descending Consecutive Values",
    "example_output": "# Expected output for Splitting a String Into Descending Consecutive Values",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Splitting a String Into Descending Consecutive Values\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1850",
    "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
    "titleSlug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Adjacent Swaps to Reach the Kth Smallest Number",
    "example_output": "# Expected output for Minimum Adjacent Swaps to Reach the Kth Smallest Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Adjacent Swaps to Reach the Kth Smallest Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1851",
    "title": "Minimum Interval to Include Each Query",
    "titleSlug": "minimum-interval-to-include-each-query",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Line Sweep"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Interval to Include Each Query",
    "example_output": "# Expected output for Minimum Interval to Include Each Query",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Interval to Include Each Query\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1852",
    "title": "Distinct Numbers in Each Subarray",
    "titleSlug": "distinct-numbers-in-each-subarray",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distinct Numbers in Each Subarray",
    "example_output": "# Expected output for Distinct Numbers in Each Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distinct Numbers in Each Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1853",
    "title": "Convert Date Format",
    "titleSlug": "convert-date-format",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert Date Format",
    "example_output": "# Expected output for Convert Date Format",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert Date Format\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1854",
    "title": "Maximum Population Year",
    "titleSlug": "maximum-population-year",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Population Year",
    "example_output": "# Expected output for Maximum Population Year",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Population Year\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1855",
    "title": "Maximum Distance Between a Pair of Values",
    "titleSlug": "maximum-distance-between-a-pair-of-values",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Distance Between a Pair of Values",
    "example_output": "# Expected output for Maximum Distance Between a Pair of Values",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Distance Between a Pair of Values\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1856",
    "title": "Maximum Subarray Min-Product",
    "titleSlug": "maximum-subarray-min-product",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Subarray Min-Product",
    "example_output": "# Expected output for Maximum Subarray Min-Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Subarray Min-Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1857",
    "title": "Largest Color Value in a Directed Graph",
    "titleSlug": "largest-color-value-in-a-directed-graph",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Color Value in a Directed Graph",
    "example_output": "# Expected output for Largest Color Value in a Directed Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Color Value in a Directed Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1858",
    "title": "Longest Word With All Prefixes",
    "titleSlug": "longest-word-with-all-prefixes",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Word With All Prefixes",
    "example_output": "# Expected output for Longest Word With All Prefixes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Word With All Prefixes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1859",
    "title": "Sorting the Sentence",
    "titleSlug": "sorting-the-sentence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sorting the Sentence",
    "example_output": "# Expected output for Sorting the Sentence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sorting the Sentence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1860",
    "title": "Incremental Memory Leak",
    "titleSlug": "incremental-memory-leak",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Incremental Memory Leak",
    "example_output": "# Expected output for Incremental Memory Leak",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Incremental Memory Leak\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1861",
    "title": "Rotating the Box",
    "titleSlug": "rotating-the-box",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rotating the Box",
    "example_output": "# Expected output for Rotating the Box",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rotating the Box\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1862",
    "title": "Sum of Floored Pairs",
    "titleSlug": "sum-of-floored-pairs",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Floored Pairs",
    "example_output": "# Expected output for Sum of Floored Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Floored Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1863",
    "title": "Sum of All Subset XOR Totals",
    "titleSlug": "sum-of-all-subset-xor-totals",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of All Subset XOR Totals",
    "example_output": "# Expected output for Sum of All Subset XOR Totals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of All Subset XOR Totals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1864",
    "title": "Minimum Number of Swaps to Make the Binary String Alternating",
    "titleSlug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Swaps to Make the Binary String Alternating",
    "example_output": "# Expected output for Minimum Number of Swaps to Make the Binary String Alternating",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Swaps to Make the Binary String Alternating\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1865",
    "title": "Finding Pairs With a Certain Sum",
    "titleSlug": "finding-pairs-with-a-certain-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Finding Pairs With a Certain Sum",
    "example_output": "# Expected output for Finding Pairs With a Certain Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Finding Pairs With a Certain Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1866",
    "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
    "titleSlug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Rearrange Sticks With K Sticks Visible",
    "example_output": "# Expected output for Number of Ways to Rearrange Sticks With K Sticks Visible",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Rearrange Sticks With K Sticks Visible\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1867",
    "title": "Orders With Maximum Quantity Above Average",
    "titleSlug": "orders-with-maximum-quantity-above-average",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Orders With Maximum Quantity Above Average",
    "example_output": "# Expected output for Orders With Maximum Quantity Above Average",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Orders With Maximum Quantity Above Average\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1868",
    "title": "Product of Two Run-Length Encoded Arrays",
    "titleSlug": "product-of-two-run-length-encoded-arrays",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product of Two Run-Length Encoded Arrays",
    "example_output": "# Expected output for Product of Two Run-Length Encoded Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product of Two Run-Length Encoded Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1869",
    "title": "Longer Contiguous Segments of Ones than Zeros",
    "titleSlug": "longer-contiguous-segments-of-ones-than-zeros",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longer Contiguous Segments of Ones than Zeros",
    "example_output": "# Expected output for Longer Contiguous Segments of Ones than Zeros",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longer Contiguous Segments of Ones than Zeros\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1870",
    "title": "Minimum Speed to Arrive on Time",
    "titleSlug": "minimum-speed-to-arrive-on-time",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Speed to Arrive on Time",
    "example_output": "# Expected output for Minimum Speed to Arrive on Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Speed to Arrive on Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1871",
    "title": "Jump Game VII",
    "titleSlug": "jump-game-vii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jump Game VII",
    "example_output": "# Expected output for Jump Game VII",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Jump Game VII\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1872",
    "title": "Stone Game VIII",
    "titleSlug": "stone-game-viii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game VIII",
    "example_output": "# Expected output for Stone Game VIII",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game VIII\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1873",
    "title": "Calculate Special Bonus",
    "titleSlug": "calculate-special-bonus",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate Special Bonus",
    "example_output": "# Expected output for Calculate Special Bonus",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate Special Bonus\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1874",
    "title": "Minimize Product Sum of Two Arrays",
    "titleSlug": "minimize-product-sum-of-two-arrays",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Product Sum of Two Arrays",
    "example_output": "# Expected output for Minimize Product Sum of Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Product Sum of Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1875",
    "title": "Group Employees of the Same Salary",
    "titleSlug": "group-employees-of-the-same-salary",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Group Employees of the Same Salary",
    "example_output": "# Expected output for Group Employees of the Same Salary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Group Employees of the Same Salary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1876",
    "title": "Substrings of Size Three with Distinct Characters",
    "titleSlug": "substrings-of-size-three-with-distinct-characters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Substrings of Size Three with Distinct Characters",
    "example_output": "# Expected output for Substrings of Size Three with Distinct Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Substrings of Size Three with Distinct Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1877",
    "title": "Minimize Maximum Pair Sum in Array",
    "titleSlug": "minimize-maximum-pair-sum-in-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Maximum Pair Sum in Array",
    "example_output": "# Expected output for Minimize Maximum Pair Sum in Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Maximum Pair Sum in Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1878",
    "title": "Get Biggest Three Rhombus Sums in a Grid",
    "titleSlug": "get-biggest-three-rhombus-sums-in-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Get Biggest Three Rhombus Sums in a Grid",
    "example_output": "# Expected output for Get Biggest Three Rhombus Sums in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Get Biggest Three Rhombus Sums in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1879",
    "title": "Minimum XOR Sum of Two Arrays",
    "titleSlug": "minimum-xor-sum-of-two-arrays",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum XOR Sum of Two Arrays",
    "example_output": "# Expected output for Minimum XOR Sum of Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum XOR Sum of Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1880",
    "title": "Check if Word Equals Summation of Two Words",
    "titleSlug": "check-if-word-equals-summation-of-two-words",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Word Equals Summation of Two Words",
    "example_output": "# Expected output for Check if Word Equals Summation of Two Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Word Equals Summation of Two Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1881",
    "title": "Maximum Value after Insertion",
    "titleSlug": "maximum-value-after-insertion",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Value after Insertion",
    "example_output": "# Expected output for Maximum Value after Insertion",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Value after Insertion\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1882",
    "title": "Process Tasks Using Servers",
    "titleSlug": "process-tasks-using-servers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Process Tasks Using Servers",
    "example_output": "# Expected output for Process Tasks Using Servers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Process Tasks Using Servers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1883",
    "title": "Minimum Skips to Arrive at Meeting On Time",
    "titleSlug": "minimum-skips-to-arrive-at-meeting-on-time",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Skips to Arrive at Meeting On Time",
    "example_output": "# Expected output for Minimum Skips to Arrive at Meeting On Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Skips to Arrive at Meeting On Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1884",
    "title": "Egg Drop With 2 Eggs and N Floors",
    "titleSlug": "egg-drop-with-2-eggs-and-n-floors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Egg Drop With 2 Eggs and N Floors",
    "example_output": "# Expected output for Egg Drop With 2 Eggs and N Floors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Egg Drop With 2 Eggs and N Floors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1885",
    "title": "Count Pairs in Two Arrays",
    "titleSlug": "count-pairs-in-two-arrays",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Pairs in Two Arrays",
    "example_output": "# Expected output for Count Pairs in Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Pairs in Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1886",
    "title": "Determine Whether Matrix Can Be Obtained By Rotation",
    "titleSlug": "determine-whether-matrix-can-be-obtained-by-rotation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Determine Whether Matrix Can Be Obtained By Rotation",
    "example_output": "# Expected output for Determine Whether Matrix Can Be Obtained By Rotation",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Determine Whether Matrix Can Be Obtained By Rotation\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1887",
    "title": "Reduction Operations to Make the Array Elements Equal",
    "titleSlug": "reduction-operations-to-make-the-array-elements-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reduction Operations to Make the Array Elements Equal",
    "example_output": "# Expected output for Reduction Operations to Make the Array Elements Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reduction Operations to Make the Array Elements Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1888",
    "title": "Minimum Number of Flips to Make the Binary String Alternating",
    "titleSlug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Flips to Make the Binary String Alternating",
    "example_output": "# Expected output for Minimum Number of Flips to Make the Binary String Alternating",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Flips to Make the Binary String Alternating\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1889",
    "title": "Minimum Space Wasted From Packaging",
    "titleSlug": "minimum-space-wasted-from-packaging",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Space Wasted From Packaging",
    "example_output": "# Expected output for Minimum Space Wasted From Packaging",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Space Wasted From Packaging\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1890",
    "title": "The Latest Login in 2020",
    "titleSlug": "the-latest-login-in-2020",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Latest Login in 2020",
    "example_output": "# Expected output for The Latest Login in 2020",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Latest Login in 2020\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1891",
    "title": "Cutting Ribbons",
    "titleSlug": "cutting-ribbons",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cutting Ribbons",
    "example_output": "# Expected output for Cutting Ribbons",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cutting Ribbons\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1892",
    "title": "Page Recommendations II",
    "titleSlug": "page-recommendations-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Page Recommendations II",
    "example_output": "# Expected output for Page Recommendations II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Page Recommendations II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1893",
    "title": "Check if All the Integers in a Range Are Covered",
    "titleSlug": "check-if-all-the-integers-in-a-range-are-covered",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if All the Integers in a Range Are Covered",
    "example_output": "# Expected output for Check if All the Integers in a Range Are Covered",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if All the Integers in a Range Are Covered\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1894",
    "title": "Find the Student that Will Replace the Chalk",
    "titleSlug": "find-the-student-that-will-replace-the-chalk",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Student that Will Replace the Chalk",
    "example_output": "# Expected output for Find the Student that Will Replace the Chalk",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Student that Will Replace the Chalk\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1895",
    "title": "Largest Magic Square",
    "titleSlug": "largest-magic-square",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Magic Square",
    "example_output": "# Expected output for Largest Magic Square",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Magic Square\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1896",
    "title": "Minimum Cost to Change the Final Value of Expression",
    "titleSlug": "minimum-cost-to-change-the-final-value-of-expression",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Change the Final Value of Expression",
    "example_output": "# Expected output for Minimum Cost to Change the Final Value of Expression",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Minimum Cost to Change the Final Value of Expression\"."
  },
  {
    "id": "1897",
    "title": "Redistribute Characters to Make All Strings Equal",
    "titleSlug": "redistribute-characters-to-make-all-strings-equal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Redistribute Characters to Make All Strings Equal",
    "example_output": "# Expected output for Redistribute Characters to Make All Strings Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Redistribute Characters to Make All Strings Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1898",
    "title": "Maximum Number of Removable Characters",
    "titleSlug": "maximum-number-of-removable-characters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Removable Characters",
    "example_output": "# Expected output for Maximum Number of Removable Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Removable Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1899",
    "title": "Merge Triplets to Form Target Triplet",
    "titleSlug": "merge-triplets-to-form-target-triplet",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Triplets to Form Target Triplet",
    "example_output": "# Expected output for Merge Triplets to Form Target Triplet",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge Triplets to Form Target Triplet\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1900",
    "title": "The Earliest and Latest Rounds Where Players Compete",
    "titleSlug": "the-earliest-and-latest-rounds-where-players-compete",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Earliest and Latest Rounds Where Players Compete",
    "example_output": "# Expected output for The Earliest and Latest Rounds Where Players Compete",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Earliest and Latest Rounds Where Players Compete\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1901",
    "title": "Find a Peak Element II",
    "titleSlug": "find-a-peak-element-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find a Peak Element II",
    "example_output": "# Expected output for Find a Peak Element II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find a Peak Element II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1902",
    "title": "Depth of BST Given Insertion Order",
    "titleSlug": "depth-of-bst-given-insertion-order",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Depth of BST Given Insertion Order",
    "example_output": "# Expected output for Depth of BST Given Insertion Order",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Depth of BST Given Insertion Order\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1903",
    "title": "Largest Odd Number in String",
    "titleSlug": "largest-odd-number-in-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Odd Number in String",
    "example_output": "# Expected output for Largest Odd Number in String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Odd Number in String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1904",
    "title": "The Number of Full Rounds You Have Played",
    "titleSlug": "the-number-of-full-rounds-you-have-played",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Full Rounds You Have Played",
    "example_output": "# Expected output for The Number of Full Rounds You Have Played",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Full Rounds You Have Played\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1905",
    "title": "Count Sub Islands",
    "titleSlug": "count-sub-islands",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Sub Islands",
    "example_output": "# Expected output for Count Sub Islands",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Sub Islands\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1906",
    "title": "Minimum Absolute Difference Queries",
    "titleSlug": "minimum-absolute-difference-queries",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Absolute Difference Queries",
    "example_output": "# Expected output for Minimum Absolute Difference Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Absolute Difference Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1907",
    "title": "Count Salary Categories",
    "titleSlug": "count-salary-categories",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Salary Categories",
    "example_output": "# Expected output for Count Salary Categories",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Salary Categories\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1908",
    "title": "Game of Nim",
    "titleSlug": "game-of-nim",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Game of Nim",
    "example_output": "# Expected output for Game of Nim",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Game of Nim\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1909",
    "title": "Remove One Element to Make the Array Strictly Increasing",
    "titleSlug": "remove-one-element-to-make-the-array-strictly-increasing",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove One Element to Make the Array Strictly Increasing",
    "example_output": "# Expected output for Remove One Element to Make the Array Strictly Increasing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove One Element to Make the Array Strictly Increasing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1910",
    "title": "Remove All Occurrences of a Substring",
    "titleSlug": "remove-all-occurrences-of-a-substring",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove All Occurrences of a Substring",
    "example_output": "# Expected output for Remove All Occurrences of a Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove All Occurrences of a Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1911",
    "title": "Maximum Alternating Subsequence Sum",
    "titleSlug": "maximum-alternating-subsequence-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Alternating Subsequence Sum",
    "example_output": "# Expected output for Maximum Alternating Subsequence Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Alternating Subsequence Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1912",
    "title": "Design Movie Rental System",
    "titleSlug": "design-movie-rental-system",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Movie Rental System",
    "example_output": "# Expected output for Design Movie Rental System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Movie Rental System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1913",
    "title": "Maximum Product Difference Between Two Pairs",
    "titleSlug": "maximum-product-difference-between-two-pairs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product Difference Between Two Pairs",
    "example_output": "# Expected output for Maximum Product Difference Between Two Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product Difference Between Two Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1914",
    "title": "Cyclically Rotating a Grid",
    "titleSlug": "cyclically-rotating-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cyclically Rotating a Grid",
    "example_output": "# Expected output for Cyclically Rotating a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cyclically Rotating a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1915",
    "title": "Number of Wonderful Substrings",
    "titleSlug": "number-of-wonderful-substrings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Wonderful Substrings",
    "example_output": "# Expected output for Number of Wonderful Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Wonderful Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1916",
    "title": "Count Ways to Build Rooms in an Ant Colony",
    "titleSlug": "count-ways-to-build-rooms-in-an-ant-colony",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Ways to Build Rooms in an Ant Colony",
    "example_output": "# Expected output for Count Ways to Build Rooms in an Ant Colony",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Ways to Build Rooms in an Ant Colony\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1917",
    "title": "Leetcodify Friends Recommendations",
    "titleSlug": "leetcodify-friends-recommendations",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Leetcodify Friends Recommendations",
    "example_output": "# Expected output for Leetcodify Friends Recommendations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Leetcodify Friends Recommendations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1918",
    "title": "Kth Smallest Subarray Sum",
    "titleSlug": "kth-smallest-subarray-sum",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Smallest Subarray Sum",
    "example_output": "# Expected output for Kth Smallest Subarray Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Smallest Subarray Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1919",
    "title": "Leetcodify Similar Friends",
    "titleSlug": "leetcodify-similar-friends",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Leetcodify Similar Friends",
    "example_output": "# Expected output for Leetcodify Similar Friends",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Leetcodify Similar Friends\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1920",
    "title": "Build Array from Permutation",
    "titleSlug": "build-array-from-permutation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Build Array from Permutation",
    "example_output": "# Expected output for Build Array from Permutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Build Array from Permutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1921",
    "title": "Eliminate Maximum Number of Monsters",
    "titleSlug": "eliminate-maximum-number-of-monsters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Eliminate Maximum Number of Monsters",
    "example_output": "# Expected output for Eliminate Maximum Number of Monsters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Eliminate Maximum Number of Monsters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1922",
    "title": "Count Good Numbers",
    "titleSlug": "count-good-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Good Numbers",
    "example_output": "# Expected output for Count Good Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Good Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1923",
    "title": "Longest Common Subpath",
    "titleSlug": "longest-common-subpath",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Suffix Array"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Common Subpath",
    "example_output": "# Expected output for Longest Common Subpath",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Common Subpath\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1924",
    "title": "Erect the Fence II",
    "titleSlug": "erect-the-fence-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Erect the Fence II",
    "example_output": "# Expected output for Erect the Fence II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Erect the Fence II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1925",
    "title": "Count Square Sum Triples",
    "titleSlug": "count-square-sum-triples",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Square Sum Triples",
    "example_output": "# Expected output for Count Square Sum Triples",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Square Sum Triples\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1926",
    "title": "Nearest Exit from Entrance in Maze",
    "titleSlug": "nearest-exit-from-entrance-in-maze",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Nearest Exit from Entrance in Maze",
    "example_output": "# Expected output for Nearest Exit from Entrance in Maze",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Nearest Exit from Entrance in Maze\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1927",
    "title": "Sum Game",
    "titleSlug": "sum-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum Game",
    "example_output": "# Expected output for Sum Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1928",
    "title": "Minimum Cost to Reach Destination in Time",
    "titleSlug": "minimum-cost-to-reach-destination-in-time",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Reach Destination in Time",
    "example_output": "# Expected output for Minimum Cost to Reach Destination in Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Reach Destination in Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1929",
    "title": "Concatenation of Array",
    "titleSlug": "concatenation-of-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Concatenation of Array",
    "example_output": "# Expected output for Concatenation of Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Concatenation of Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1930",
    "title": "Unique Length-3 Palindromic Subsequences",
    "titleSlug": "unique-length-3-palindromic-subsequences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Length-3 Palindromic Subsequences",
    "example_output": "# Expected output for Unique Length-3 Palindromic Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Length-3 Palindromic Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1931",
    "title": "Painting a Grid With Three Different Colors",
    "titleSlug": "painting-a-grid-with-three-different-colors",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Painting a Grid With Three Different Colors",
    "example_output": "# Expected output for Painting a Grid With Three Different Colors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Painting a Grid With Three Different Colors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1932",
    "title": "Merge BSTs to Create Single BST",
    "titleSlug": "merge-bsts-to-create-single-bst",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge BSTs to Create Single BST",
    "example_output": "# Expected output for Merge BSTs to Create Single BST",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge BSTs to Create Single BST\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1933",
    "title": "Check if String Is Decomposable Into Value-Equal Substrings",
    "titleSlug": "check-if-string-is-decomposable-into-value-equal-substrings",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if String Is Decomposable Into Value-Equal Substrings",
    "example_output": "# Expected output for Check if String Is Decomposable Into Value-Equal Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if String Is Decomposable Into Value-Equal Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1934",
    "title": "Confirmation Rate",
    "titleSlug": "confirmation-rate",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Confirmation Rate",
    "example_output": "# Expected output for Confirmation Rate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Confirmation Rate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1935",
    "title": "Maximum Number of Words You Can Type",
    "titleSlug": "maximum-number-of-words-you-can-type",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Words You Can Type",
    "example_output": "# Expected output for Maximum Number of Words You Can Type",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Words You Can Type\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1936",
    "title": "Add Minimum Number of Rungs",
    "titleSlug": "add-minimum-number-of-rungs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Minimum Number of Rungs",
    "example_output": "# Expected output for Add Minimum Number of Rungs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Minimum Number of Rungs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1937",
    "title": "Maximum Number of Points with Cost",
    "titleSlug": "maximum-number-of-points-with-cost",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Points with Cost",
    "example_output": "# Expected output for Maximum Number of Points with Cost",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Points with Cost\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1938",
    "title": "Maximum Genetic Difference Query",
    "titleSlug": "maximum-genetic-difference-query",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Genetic Difference Query",
    "example_output": "# Expected output for Maximum Genetic Difference Query",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Genetic Difference Query\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1939",
    "title": "Users That Actively Request Confirmation Messages",
    "titleSlug": "users-that-actively-request-confirmation-messages",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Users That Actively Request Confirmation Messages",
    "example_output": "# Expected output for Users That Actively Request Confirmation Messages",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Users That Actively Request Confirmation Messages\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1940",
    "title": "Longest Common Subsequence Between Sorted Arrays",
    "titleSlug": "longest-common-subsequence-between-sorted-arrays",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Common Subsequence Between Sorted Arrays",
    "example_output": "# Expected output for Longest Common Subsequence Between Sorted Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Common Subsequence Between Sorted Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1941",
    "title": "Check if All Characters Have Equal Number of Occurrences",
    "titleSlug": "check-if-all-characters-have-equal-number-of-occurrences",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if All Characters Have Equal Number of Occurrences",
    "example_output": "# Expected output for Check if All Characters Have Equal Number of Occurrences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if All Characters Have Equal Number of Occurrences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1942",
    "title": "The Number of the Smallest Unoccupied Chair",
    "titleSlug": "the-number-of-the-smallest-unoccupied-chair",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of the Smallest Unoccupied Chair",
    "example_output": "# Expected output for The Number of the Smallest Unoccupied Chair",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of the Smallest Unoccupied Chair\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1943",
    "title": "Describe the Painting",
    "titleSlug": "describe-the-painting",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Describe the Painting",
    "example_output": "# Expected output for Describe the Painting",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Describe the Painting\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1944",
    "title": "Number of Visible People in a Queue",
    "titleSlug": "number-of-visible-people-in-a-queue",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Visible People in a Queue",
    "example_output": "# Expected output for Number of Visible People in a Queue",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Visible People in a Queue\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1945",
    "title": "Sum of Digits of String After Convert",
    "titleSlug": "sum-of-digits-of-string-after-convert",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Digits of String After Convert",
    "example_output": "# Expected output for Sum of Digits of String After Convert",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Digits of String After Convert\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1946",
    "title": "Largest Number After Mutating Substring",
    "titleSlug": "largest-number-after-mutating-substring",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Number After Mutating Substring",
    "example_output": "# Expected output for Largest Number After Mutating Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Number After Mutating Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1947",
    "title": "Maximum Compatibility Score Sum",
    "titleSlug": "maximum-compatibility-score-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Compatibility Score Sum",
    "example_output": "# Expected output for Maximum Compatibility Score Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Compatibility Score Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1948",
    "title": "Delete Duplicate Folders in System",
    "titleSlug": "delete-duplicate-folders-in-system",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Duplicate Folders in System",
    "example_output": "# Expected output for Delete Duplicate Folders in System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Duplicate Folders in System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1949",
    "title": "Strong Friendship",
    "titleSlug": "strong-friendship",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strong Friendship",
    "example_output": "# Expected output for Strong Friendship",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strong Friendship\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1950",
    "title": "Maximum of Minimum Values in All Subarrays",
    "titleSlug": "maximum-of-minimum-values-in-all-subarrays",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum of Minimum Values in All Subarrays",
    "example_output": "# Expected output for Maximum of Minimum Values in All Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum of Minimum Values in All Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1951",
    "title": "All the Pairs With the Maximum Number of Common Followers",
    "titleSlug": "all-the-pairs-with-the-maximum-number-of-common-followers",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All the Pairs With the Maximum Number of Common Followers",
    "example_output": "# Expected output for All the Pairs With the Maximum Number of Common Followers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All the Pairs With the Maximum Number of Common Followers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1952",
    "title": "Three Divisors",
    "titleSlug": "three-divisors",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Three Divisors",
    "example_output": "# Expected output for Three Divisors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Three Divisors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1953",
    "title": "Maximum Number of Weeks for Which You Can Work",
    "titleSlug": "maximum-number-of-weeks-for-which-you-can-work",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Weeks for Which You Can Work",
    "example_output": "# Expected output for Maximum Number of Weeks for Which You Can Work",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Weeks for Which You Can Work\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1954",
    "title": "Minimum Garden Perimeter to Collect Enough Apples",
    "titleSlug": "minimum-garden-perimeter-to-collect-enough-apples",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Garden Perimeter to Collect Enough Apples",
    "example_output": "# Expected output for Minimum Garden Perimeter to Collect Enough Apples",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Garden Perimeter to Collect Enough Apples\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1955",
    "title": "Count Number of Special Subsequences",
    "titleSlug": "count-number-of-special-subsequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Special Subsequences",
    "example_output": "# Expected output for Count Number of Special Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Special Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1956",
    "title": "Minimum Time For K Virus Variants to Spread",
    "titleSlug": "minimum-time-for-k-virus-variants-to-spread",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time For K Virus Variants to Spread",
    "example_output": "# Expected output for Minimum Time For K Virus Variants to Spread",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time For K Virus Variants to Spread\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1957",
    "title": "Delete Characters to Make Fancy String",
    "titleSlug": "delete-characters-to-make-fancy-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Characters to Make Fancy String",
    "example_output": "# Expected output for Delete Characters to Make Fancy String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Characters to Make Fancy String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1958",
    "title": "Check if Move is Legal",
    "titleSlug": "check-if-move-is-legal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Move is Legal",
    "example_output": "# Expected output for Check if Move is Legal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Move is Legal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1959",
    "title": "Minimum Total Space Wasted With K Resizing Operations",
    "titleSlug": "minimum-total-space-wasted-with-k-resizing-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Total Space Wasted With K Resizing Operations",
    "example_output": "# Expected output for Minimum Total Space Wasted With K Resizing Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Total Space Wasted With K Resizing Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1960",
    "title": "Maximum Product of the Length of Two Palindromic Substrings",
    "titleSlug": "maximum-product-of-the-length-of-two-palindromic-substrings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product of the Length of Two Palindromic Substrings",
    "example_output": "# Expected output for Maximum Product of the Length of Two Palindromic Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product of the Length of Two Palindromic Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1961",
    "title": "Check If String Is a Prefix of Array",
    "titleSlug": "check-if-string-is-a-prefix-of-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check If String Is a Prefix of Array",
    "example_output": "# Expected output for Check If String Is a Prefix of Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check If String Is a Prefix of Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1962",
    "title": "Remove Stones to Minimize the Total",
    "titleSlug": "remove-stones-to-minimize-the-total",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Stones to Minimize the Total",
    "example_output": "# Expected output for Remove Stones to Minimize the Total",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Stones to Minimize the Total\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1963",
    "title": "Minimum Number of Swaps to Make the String Balanced",
    "titleSlug": "minimum-number-of-swaps-to-make-the-string-balanced",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Swaps to Make the String Balanced",
    "example_output": "# Expected output for Minimum Number of Swaps to Make the String Balanced",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Swaps to Make the String Balanced\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1964",
    "title": "Find the Longest Valid Obstacle Course at Each Position",
    "titleSlug": "find-the-longest-valid-obstacle-course-at-each-position",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Binary Indexed Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Longest Valid Obstacle Course at Each Position",
    "example_output": "# Expected output for Find the Longest Valid Obstacle Course at Each Position",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Longest Valid Obstacle Course at Each Position\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1965",
    "title": "Employees With Missing Information",
    "titleSlug": "employees-with-missing-information",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Employees With Missing Information",
    "example_output": "# Expected output for Employees With Missing Information",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Employees With Missing Information\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1966",
    "title": "Binary Searchable Numbers in an Unsorted Array",
    "titleSlug": "binary-searchable-numbers-in-an-unsorted-array",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Binary Searchable Numbers in an Unsorted Array",
    "example_output": "# Expected output for Binary Searchable Numbers in an Unsorted Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Binary Searchable Numbers in an Unsorted Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1967",
    "title": "Number of Strings That Appear as Substrings in Word",
    "titleSlug": "number-of-strings-that-appear-as-substrings-in-word",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Strings That Appear as Substrings in Word",
    "example_output": "# Expected output for Number of Strings That Appear as Substrings in Word",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Strings That Appear as Substrings in Word\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1968",
    "title": "Array With Elements Not Equal to Average of Neighbors",
    "titleSlug": "array-with-elements-not-equal-to-average-of-neighbors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array With Elements Not Equal to Average of Neighbors",
    "example_output": "# Expected output for Array With Elements Not Equal to Average of Neighbors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array With Elements Not Equal to Average of Neighbors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1969",
    "title": "Minimum Non-Zero Product of the Array Elements",
    "titleSlug": "minimum-non-zero-product-of-the-array-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Non-Zero Product of the Array Elements",
    "example_output": "# Expected output for Minimum Non-Zero Product of the Array Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Non-Zero Product of the Array Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1970",
    "title": "Last Day Where You Can Still Cross",
    "titleSlug": "last-day-where-you-can-still-cross",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Last Day Where You Can Still Cross",
    "example_output": "# Expected output for Last Day Where You Can Still Cross",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Last Day Where You Can Still Cross\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1971",
    "title": "Find if Path Exists in Graph",
    "titleSlug": "find-if-path-exists-in-graph",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find if Path Exists in Graph",
    "example_output": "# Expected output for Find if Path Exists in Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find if Path Exists in Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1972",
    "title": "First and Last Call On the Same Day",
    "titleSlug": "first-and-last-call-on-the-same-day",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for First and Last Call On the Same Day",
    "example_output": "# Expected output for First and Last Call On the Same Day",
    "status": "TO_DO",
    "description": "Solve the problem titled \"First and Last Call On the Same Day\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1973",
    "title": "Count Nodes Equal to Sum of Descendants",
    "titleSlug": "count-nodes-equal-to-sum-of-descendants",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Nodes Equal to Sum of Descendants",
    "example_output": "# Expected output for Count Nodes Equal to Sum of Descendants",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Nodes Equal to Sum of Descendants\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1974",
    "title": "Minimum Time to Type Word Using Special Typewriter",
    "titleSlug": "minimum-time-to-type-word-using-special-typewriter",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Type Word Using Special Typewriter",
    "example_output": "# Expected output for Minimum Time to Type Word Using Special Typewriter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Type Word Using Special Typewriter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1975",
    "title": "Maximum Matrix Sum",
    "titleSlug": "maximum-matrix-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Matrix Sum",
    "example_output": "# Expected output for Maximum Matrix Sum",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Maximum Matrix Sum\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "1976",
    "title": "Number of Ways to Arrive at Destination",
    "titleSlug": "number-of-ways-to-arrive-at-destination",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Arrive at Destination",
    "example_output": "# Expected output for Number of Ways to Arrive at Destination",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Arrive at Destination\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1977",
    "title": "Number of Ways to Separate Numbers",
    "titleSlug": "number-of-ways-to-separate-numbers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Suffix Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Separate Numbers",
    "example_output": "# Expected output for Number of Ways to Separate Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Separate Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1978",
    "title": "Employees Whose Manager Left the Company",
    "titleSlug": "employees-whose-manager-left-the-company",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Employees Whose Manager Left the Company",
    "example_output": "# Expected output for Employees Whose Manager Left the Company",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Employees Whose Manager Left the Company\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1979",
    "title": "Find Greatest Common Divisor of Array",
    "titleSlug": "find-greatest-common-divisor-of-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Greatest Common Divisor of Array",
    "example_output": "# Expected output for Find Greatest Common Divisor of Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Greatest Common Divisor of Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1980",
    "title": "Find Unique Binary String",
    "titleSlug": "find-unique-binary-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Unique Binary String",
    "example_output": "# Expected output for Find Unique Binary String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Unique Binary String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1981",
    "title": "Minimize the Difference Between Target and Chosen Elements",
    "titleSlug": "minimize-the-difference-between-target-and-chosen-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize the Difference Between Target and Chosen Elements",
    "example_output": "# Expected output for Minimize the Difference Between Target and Chosen Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize the Difference Between Target and Chosen Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1982",
    "title": "Find Array Given Subset Sums",
    "titleSlug": "find-array-given-subset-sums",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Array Given Subset Sums",
    "example_output": "# Expected output for Find Array Given Subset Sums",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Array Given Subset Sums\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1983",
    "title": "Widest Pair of Indices With Equal Range Sum",
    "titleSlug": "widest-pair-of-indices-with-equal-range-sum",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Widest Pair of Indices With Equal Range Sum",
    "example_output": "# Expected output for Widest Pair of Indices With Equal Range Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Widest Pair of Indices With Equal Range Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1984",
    "title": "Minimum Difference Between Highest and Lowest of K Scores",
    "titleSlug": "minimum-difference-between-highest-and-lowest-of-k-scores",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Difference Between Highest and Lowest of K Scores",
    "example_output": "# Expected output for Minimum Difference Between Highest and Lowest of K Scores",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Difference Between Highest and Lowest of K Scores\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1985",
    "title": "Find the Kth Largest Integer in the Array",
    "titleSlug": "find-the-kth-largest-integer-in-the-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Quickselect"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Kth Largest Integer in the Array",
    "example_output": "# Expected output for Find the Kth Largest Integer in the Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Kth Largest Integer in the Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1986",
    "title": "Minimum Number of Work Sessions to Finish the Tasks",
    "titleSlug": "minimum-number-of-work-sessions-to-finish-the-tasks",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Work Sessions to Finish the Tasks",
    "example_output": "# Expected output for Minimum Number of Work Sessions to Finish the Tasks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Work Sessions to Finish the Tasks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1987",
    "title": "Number of Unique Good Subsequences",
    "titleSlug": "number-of-unique-good-subsequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Unique Good Subsequences",
    "example_output": "# Expected output for Number of Unique Good Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Unique Good Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1988",
    "title": "Find Cutoff Score for Each School",
    "titleSlug": "find-cutoff-score-for-each-school",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Cutoff Score for Each School",
    "example_output": "# Expected output for Find Cutoff Score for Each School",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Cutoff Score for Each School\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1989",
    "title": "Maximum Number of People That Can Be Caught in Tag",
    "titleSlug": "maximum-number-of-people-that-can-be-caught-in-tag",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of People That Can Be Caught in Tag",
    "example_output": "# Expected output for Maximum Number of People That Can Be Caught in Tag",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of People That Can Be Caught in Tag\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1990",
    "title": "Count the Number of Experiments",
    "titleSlug": "count-the-number-of-experiments",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Experiments",
    "example_output": "# Expected output for Count the Number of Experiments",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Experiments\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1991",
    "title": "Find the Middle Index in Array",
    "titleSlug": "find-the-middle-index-in-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Middle Index in Array",
    "example_output": "# Expected output for Find the Middle Index in Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Middle Index in Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1992",
    "title": "Find All Groups of Farmland",
    "titleSlug": "find-all-groups-of-farmland",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All Groups of Farmland",
    "example_output": "# Expected output for Find All Groups of Farmland",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All Groups of Farmland\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1993",
    "title": "Operations on Tree",
    "titleSlug": "operations-on-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Operations on Tree",
    "example_output": "# Expected output for Operations on Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Operations on Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1994",
    "title": "The Number of Good Subsets",
    "titleSlug": "the-number-of-good-subsets",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Good Subsets",
    "example_output": "# Expected output for The Number of Good Subsets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Good Subsets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1995",
    "title": "Count Special Quadruplets",
    "titleSlug": "count-special-quadruplets",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Special Quadruplets",
    "example_output": "# Expected output for Count Special Quadruplets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Special Quadruplets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1996",
    "title": "The Number of Weak Characters in the Game",
    "titleSlug": "the-number-of-weak-characters-in-the-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Weak Characters in the Game",
    "example_output": "# Expected output for The Number of Weak Characters in the Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Weak Characters in the Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1997",
    "title": "First Day Where You Have Been in All the Rooms",
    "titleSlug": "first-day-where-you-have-been-in-all-the-rooms",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for First Day Where You Have Been in All the Rooms",
    "example_output": "# Expected output for First Day Where You Have Been in All the Rooms",
    "status": "TO_DO",
    "description": "Solve the problem titled \"First Day Where You Have Been in All the Rooms\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1998",
    "title": "GCD Sort of an Array",
    "titleSlug": "gcd-sort-of-an-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for GCD Sort of an Array",
    "example_output": "# Expected output for GCD Sort of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"GCD Sort of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "1999",
    "title": "Smallest Greater Multiple Made of Two Digits",
    "titleSlug": "smallest-greater-multiple-made-of-two-digits",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Greater Multiple Made of Two Digits",
    "example_output": "# Expected output for Smallest Greater Multiple Made of Two Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Greater Multiple Made of Two Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2000",
    "title": "Reverse Prefix of Word",
    "titleSlug": "reverse-prefix-of-word",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Prefix of Word",
    "example_output": "# Expected output for Reverse Prefix of Word",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Prefix of Word\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2001",
    "title": "Number of Pairs of Interchangeable Rectangles",
    "titleSlug": "number-of-pairs-of-interchangeable-rectangles",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Pairs of Interchangeable Rectangles",
    "example_output": "# Expected output for Number of Pairs of Interchangeable Rectangles",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Pairs of Interchangeable Rectangles\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2002",
    "title": "Maximum Product of the Length of Two Palindromic Subsequences",
    "titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product of the Length of Two Palindromic Subsequences",
    "example_output": "# Expected output for Maximum Product of the Length of Two Palindromic Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product of the Length of Two Palindromic Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2003",
    "title": "Smallest Missing Genetic Value in Each Subtree",
    "titleSlug": "smallest-missing-genetic-value-in-each-subtree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Missing Genetic Value in Each Subtree",
    "example_output": "# Expected output for Smallest Missing Genetic Value in Each Subtree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Missing Genetic Value in Each Subtree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2004",
    "title": "The Number of Seniors and Juniors to Join the Company",
    "titleSlug": "the-number-of-seniors-and-juniors-to-join-the-company",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Seniors and Juniors to Join the Company",
    "example_output": "# Expected output for The Number of Seniors and Juniors to Join the Company",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Seniors and Juniors to Join the Company\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2005",
    "title": "Subtree Removal Game with Fibonacci Tree",
    "titleSlug": "subtree-removal-game-with-fibonacci-tree",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subtree Removal Game with Fibonacci Tree",
    "example_output": "# Expected output for Subtree Removal Game with Fibonacci Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subtree Removal Game with Fibonacci Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2006",
    "title": "Count Number of Pairs With Absolute Difference K",
    "titleSlug": "count-number-of-pairs-with-absolute-difference-k",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Pairs With Absolute Difference K",
    "example_output": "# Expected output for Count Number of Pairs With Absolute Difference K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Pairs With Absolute Difference K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2007",
    "title": "Find Original Array From Doubled Array",
    "titleSlug": "find-original-array-from-doubled-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Original Array From Doubled Array",
    "example_output": "# Expected output for Find Original Array From Doubled Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Original Array From Doubled Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2008",
    "title": "Maximum Earnings From Taxi",
    "titleSlug": "maximum-earnings-from-taxi",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Earnings From Taxi",
    "example_output": "# Expected output for Maximum Earnings From Taxi",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Earnings From Taxi\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2009",
    "title": "Minimum Number of Operations to Make Array Continuous",
    "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Make Array Continuous",
    "example_output": "# Expected output for Minimum Number of Operations to Make Array Continuous",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Make Array Continuous\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2010",
    "title": "The Number of Seniors and Juniors to Join the Company II",
    "titleSlug": "the-number-of-seniors-and-juniors-to-join-the-company-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Seniors and Juniors to Join the Company II",
    "example_output": "# Expected output for The Number of Seniors and Juniors to Join the Company II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Seniors and Juniors to Join the Company II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2011",
    "title": "Final Value of Variable After Performing Operations",
    "titleSlug": "final-value-of-variable-after-performing-operations",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Final Value of Variable After Performing Operations",
    "example_output": "# Expected output for Final Value of Variable After Performing Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Final Value of Variable After Performing Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2012",
    "title": "Sum of Beauty in the Array",
    "titleSlug": "sum-of-beauty-in-the-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Beauty in the Array",
    "example_output": "# Expected output for Sum of Beauty in the Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Beauty in the Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2013",
    "title": "Detect Squares",
    "titleSlug": "detect-squares",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Detect Squares",
    "example_output": "# Expected output for Detect Squares",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Detect Squares\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2014",
    "title": "Longest Subsequence Repeated k Times",
    "titleSlug": "longest-subsequence-repeated-k-times",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Subsequence Repeated k Times",
    "example_output": "# Expected output for Longest Subsequence Repeated k Times",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Subsequence Repeated k Times\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2015",
    "title": "Average Height of Buildings in Each Segment",
    "titleSlug": "average-height-of-buildings-in-each-segment",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Average Height of Buildings in Each Segment",
    "example_output": "# Expected output for Average Height of Buildings in Each Segment",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Average Height of Buildings in Each Segment\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2016",
    "title": "Maximum Difference Between Increasing Elements",
    "titleSlug": "maximum-difference-between-increasing-elements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Difference Between Increasing Elements",
    "example_output": "# Expected output for Maximum Difference Between Increasing Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Difference Between Increasing Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2017",
    "title": "Grid Game",
    "titleSlug": "grid-game",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Grid Game",
    "example_output": "# Expected output for Grid Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Grid Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2018",
    "title": "Check if Word Can Be Placed In Crossword",
    "titleSlug": "check-if-word-can-be-placed-in-crossword",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Word Can Be Placed In Crossword",
    "example_output": "# Expected output for Check if Word Can Be Placed In Crossword",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Word Can Be Placed In Crossword\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2019",
    "title": "The Score of Students Solving Math Expression",
    "titleSlug": "the-score-of-students-solving-math-expression",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Score of Students Solving Math Expression",
    "example_output": "# Expected output for The Score of Students Solving Math Expression",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"The Score of Students Solving Math Expression\"."
  },
  {
    "id": "2020",
    "title": "Number of Accounts That Did Not Stream",
    "titleSlug": "number-of-accounts-that-did-not-stream",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Accounts That Did Not Stream",
    "example_output": "# Expected output for Number of Accounts That Did Not Stream",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Accounts That Did Not Stream\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2021",
    "title": "Brightest Position on Street",
    "titleSlug": "brightest-position-on-street",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Brightest Position on Street",
    "example_output": "# Expected output for Brightest Position on Street",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Brightest Position on Street\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2022",
    "title": "Convert 1D Array Into 2D Array",
    "titleSlug": "convert-1d-array-into-2d-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert 1D Array Into 2D Array",
    "example_output": "# Expected output for Convert 1D Array Into 2D Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert 1D Array Into 2D Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2023",
    "title": "Number of Pairs of Strings With Concatenation Equal to Target",
    "titleSlug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Pairs of Strings With Concatenation Equal to Target",
    "example_output": "# Expected output for Number of Pairs of Strings With Concatenation Equal to Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Pairs of Strings With Concatenation Equal to Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2024",
    "title": "Maximize the Confusion of an Exam",
    "titleSlug": "maximize-the-confusion-of-an-exam",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize the Confusion of an Exam",
    "example_output": "# Expected output for Maximize the Confusion of an Exam",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize the Confusion of an Exam\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2025",
    "title": "Maximum Number of Ways to Partition an Array",
    "titleSlug": "maximum-number-of-ways-to-partition-an-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Ways to Partition an Array",
    "example_output": "# Expected output for Maximum Number of Ways to Partition an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Ways to Partition an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2026",
    "title": "Low-Quality Problems",
    "titleSlug": "low-quality-problems",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Low-Quality Problems",
    "example_output": "# Expected output for Low-Quality Problems",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Low-Quality Problems\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2027",
    "title": "Minimum Moves to Convert String",
    "titleSlug": "minimum-moves-to-convert-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Moves to Convert String",
    "example_output": "# Expected output for Minimum Moves to Convert String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Moves to Convert String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2028",
    "title": "Find Missing Observations",
    "titleSlug": "find-missing-observations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Missing Observations",
    "example_output": "# Expected output for Find Missing Observations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Missing Observations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2029",
    "title": "Stone Game IX",
    "titleSlug": "stone-game-ix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stone Game IX",
    "example_output": "# Expected output for Stone Game IX",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stone Game IX\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2030",
    "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
    "titleSlug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest K-Length Subsequence With Occurrences of a Letter",
    "example_output": "# Expected output for Smallest K-Length Subsequence With Occurrences of a Letter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest K-Length Subsequence With Occurrences of a Letter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2031",
    "title": "Count Subarrays With More Ones Than Zeros",
    "titleSlug": "count-subarrays-with-more-ones-than-zeros",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Subarrays With More Ones Than Zeros",
    "example_output": "# Expected output for Count Subarrays With More Ones Than Zeros",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Subarrays With More Ones Than Zeros\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2032",
    "title": "Two Out of Three",
    "titleSlug": "two-out-of-three",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Two Out of Three",
    "example_output": "# Expected output for Two Out of Three",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Two Out of Three\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2033",
    "title": "Minimum Operations to Make a Uni-Value Grid",
    "titleSlug": "minimum-operations-to-make-a-uni-value-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make a Uni-Value Grid",
    "example_output": "# Expected output for Minimum Operations to Make a Uni-Value Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make a Uni-Value Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2034",
    "title": "Stock Price Fluctuation ",
    "titleSlug": "stock-price-fluctuation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Data Stream"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stock Price Fluctuation ",
    "example_output": "# Expected output for Stock Price Fluctuation ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stock Price Fluctuation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2035",
    "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
    "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Ordered Set"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition Array Into Two Arrays to Minimize Sum Difference",
    "example_output": "# Expected output for Partition Array Into Two Arrays to Minimize Sum Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition Array Into Two Arrays to Minimize Sum Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2036",
    "title": "Maximum Alternating Subarray Sum",
    "titleSlug": "maximum-alternating-subarray-sum",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Alternating Subarray Sum",
    "example_output": "# Expected output for Maximum Alternating Subarray Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Alternating Subarray Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2037",
    "title": "Minimum Number of Moves to Seat Everyone",
    "titleSlug": "minimum-number-of-moves-to-seat-everyone",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Moves to Seat Everyone",
    "example_output": "# Expected output for Minimum Number of Moves to Seat Everyone",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Moves to Seat Everyone\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2038",
    "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
    "titleSlug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Colored Pieces if Both Neighbors are the Same Color",
    "example_output": "# Expected output for Remove Colored Pieces if Both Neighbors are the Same Color",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Colored Pieces if Both Neighbors are the Same Color\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2039",
    "title": "The Time When the Network Becomes Idle",
    "titleSlug": "the-time-when-the-network-becomes-idle",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Time When the Network Becomes Idle",
    "example_output": "# Expected output for The Time When the Network Becomes Idle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Time When the Network Becomes Idle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2040",
    "title": "Kth Smallest Product of Two Sorted Arrays",
    "titleSlug": "kth-smallest-product-of-two-sorted-arrays",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Smallest Product of Two Sorted Arrays",
    "example_output": "# Expected output for Kth Smallest Product of Two Sorted Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Smallest Product of Two Sorted Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2041",
    "title": "Accepted Candidates From the Interviews",
    "titleSlug": "accepted-candidates-from-the-interviews",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Accepted Candidates From the Interviews",
    "example_output": "# Expected output for Accepted Candidates From the Interviews",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Accepted Candidates From the Interviews\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2042",
    "title": "Check if Numbers Are Ascending in a Sentence",
    "titleSlug": "check-if-numbers-are-ascending-in-a-sentence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Numbers Are Ascending in a Sentence",
    "example_output": "# Expected output for Check if Numbers Are Ascending in a Sentence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Numbers Are Ascending in a Sentence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2043",
    "title": "Simple Bank System",
    "titleSlug": "simple-bank-system",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Simple Bank System",
    "example_output": "# Expected output for Simple Bank System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Simple Bank System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2044",
    "title": "Count Number of Maximum Bitwise-OR Subsets",
    "titleSlug": "count-number-of-maximum-bitwise-or-subsets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Maximum Bitwise-OR Subsets",
    "example_output": "# Expected output for Count Number of Maximum Bitwise-OR Subsets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Maximum Bitwise-OR Subsets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2045",
    "title": "Second Minimum Time to Reach Destination",
    "titleSlug": "second-minimum-time-to-reach-destination",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Second Minimum Time to Reach Destination",
    "example_output": "# Expected output for Second Minimum Time to Reach Destination",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Second Minimum Time to Reach Destination\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2046",
    "title": "Sort Linked List Already Sorted Using Absolute Values",
    "titleSlug": "sort-linked-list-already-sorted-using-absolute-values",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Linked List Already Sorted Using Absolute Values",
    "example_output": "# Expected output for Sort Linked List Already Sorted Using Absolute Values",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Linked List Already Sorted Using Absolute Values\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2047",
    "title": "Number of Valid Words in a Sentence",
    "titleSlug": "number-of-valid-words-in-a-sentence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Valid Words in a Sentence",
    "example_output": "# Expected output for Number of Valid Words in a Sentence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Valid Words in a Sentence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2048",
    "title": "Next Greater Numerically Balanced Number",
    "titleSlug": "next-greater-numerically-balanced-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Greater Numerically Balanced Number",
    "example_output": "# Expected output for Next Greater Numerically Balanced Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Next Greater Numerically Balanced Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2049",
    "title": "Count Nodes With the Highest Score",
    "titleSlug": "count-nodes-with-the-highest-score",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Nodes With the Highest Score",
    "example_output": "# Expected output for Count Nodes With the Highest Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Nodes With the Highest Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2050",
    "title": "Parallel Courses III",
    "titleSlug": "parallel-courses-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Parallel Courses III",
    "example_output": "# Expected output for Parallel Courses III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Parallel Courses III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2051",
    "title": "The Category of Each Member in the Store",
    "titleSlug": "the-category-of-each-member-in-the-store",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Category of Each Member in the Store",
    "example_output": "# Expected output for The Category of Each Member in the Store",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Category of Each Member in the Store\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2052",
    "title": "Minimum Cost to Separate Sentence Into Rows",
    "titleSlug": "minimum-cost-to-separate-sentence-into-rows",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Separate Sentence Into Rows",
    "example_output": "# Expected output for Minimum Cost to Separate Sentence Into Rows",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Separate Sentence Into Rows\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2053",
    "title": "Kth Distinct String in an Array",
    "titleSlug": "kth-distinct-string-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Distinct String in an Array",
    "example_output": "# Expected output for Kth Distinct String in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Distinct String in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2054",
    "title": "Two Best Non-Overlapping Events",
    "titleSlug": "two-best-non-overlapping-events",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Two Best Non-Overlapping Events",
    "example_output": "# Expected output for Two Best Non-Overlapping Events",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Two Best Non-Overlapping Events\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2055",
    "title": "Plates Between Candles",
    "titleSlug": "plates-between-candles",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Plates Between Candles",
    "example_output": "# Expected output for Plates Between Candles",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Plates Between Candles\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2056",
    "title": "Number of Valid Move Combinations On Chessboard",
    "titleSlug": "number-of-valid-move-combinations-on-chessboard",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Valid Move Combinations On Chessboard",
    "example_output": "# Expected output for Number of Valid Move Combinations On Chessboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Valid Move Combinations On Chessboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2057",
    "title": "Smallest Index With Equal Value",
    "titleSlug": "smallest-index-with-equal-value",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Index With Equal Value",
    "example_output": "# Expected output for Smallest Index With Equal Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Index With Equal Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2058",
    "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
    "titleSlug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Minimum and Maximum Number of Nodes Between Critical Points",
    "example_output": "# Expected output for Find the Minimum and Maximum Number of Nodes Between Critical Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Minimum and Maximum Number of Nodes Between Critical Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2059",
    "title": "Minimum Operations to Convert Number",
    "titleSlug": "minimum-operations-to-convert-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Convert Number",
    "example_output": "# Expected output for Minimum Operations to Convert Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Convert Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2060",
    "title": "Check if an Original String Exists Given Two Encoded Strings",
    "titleSlug": "check-if-an-original-string-exists-given-two-encoded-strings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if an Original String Exists Given Two Encoded Strings",
    "example_output": "# Expected output for Check if an Original String Exists Given Two Encoded Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if an Original String Exists Given Two Encoded Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2061",
    "title": "Number of Spaces Cleaning Robot Cleaned",
    "titleSlug": "number-of-spaces-cleaning-robot-cleaned",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Spaces Cleaning Robot Cleaned",
    "example_output": "# Expected output for Number of Spaces Cleaning Robot Cleaned",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Spaces Cleaning Robot Cleaned\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2062",
    "title": "Count Vowel Substrings of a String",
    "titleSlug": "count-vowel-substrings-of-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Vowel Substrings of a String",
    "example_output": "# Expected output for Count Vowel Substrings of a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Vowel Substrings of a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2063",
    "title": "Vowels of All Substrings",
    "titleSlug": "vowels-of-all-substrings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Vowels of All Substrings",
    "example_output": "# Expected output for Vowels of All Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Vowels of All Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2064",
    "title": "Minimized Maximum of Products Distributed to Any Store",
    "titleSlug": "minimized-maximum-of-products-distributed-to-any-store",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimized Maximum of Products Distributed to Any Store",
    "example_output": "# Expected output for Minimized Maximum of Products Distributed to Any Store",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimized Maximum of Products Distributed to Any Store\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2065",
    "title": "Maximum Path Quality of a Graph",
    "titleSlug": "maximum-path-quality-of-a-graph",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Path Quality of a Graph",
    "example_output": "# Expected output for Maximum Path Quality of a Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Path Quality of a Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2066",
    "title": "Account Balance",
    "titleSlug": "account-balance",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Account Balance",
    "example_output": "# Expected output for Account Balance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Account Balance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2067",
    "title": "Number of Equal Count Substrings",
    "titleSlug": "number-of-equal-count-substrings",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Equal Count Substrings",
    "example_output": "# Expected output for Number of Equal Count Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Equal Count Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2068",
    "title": "Check Whether Two Strings are Almost Equivalent",
    "titleSlug": "check-whether-two-strings-are-almost-equivalent",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check Whether Two Strings are Almost Equivalent",
    "example_output": "# Expected output for Check Whether Two Strings are Almost Equivalent",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check Whether Two Strings are Almost Equivalent\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2069",
    "title": "Walking Robot Simulation II",
    "titleSlug": "walking-robot-simulation-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Walking Robot Simulation II",
    "example_output": "# Expected output for Walking Robot Simulation II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Walking Robot Simulation II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2070",
    "title": "Most Beautiful Item for Each Query",
    "titleSlug": "most-beautiful-item-for-each-query",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Beautiful Item for Each Query",
    "example_output": "# Expected output for Most Beautiful Item for Each Query",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Beautiful Item for Each Query\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2071",
    "title": "Maximum Number of Tasks You Can Assign",
    "titleSlug": "maximum-number-of-tasks-you-can-assign",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Tasks You Can Assign",
    "example_output": "# Expected output for Maximum Number of Tasks You Can Assign",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Tasks You Can Assign\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2072",
    "title": "The Winner University",
    "titleSlug": "the-winner-university",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Winner University",
    "example_output": "# Expected output for The Winner University",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Winner University\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2073",
    "title": "Time Needed to Buy Tickets",
    "titleSlug": "time-needed-to-buy-tickets",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Time Needed to Buy Tickets",
    "example_output": "# Expected output for Time Needed to Buy Tickets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Time Needed to Buy Tickets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2074",
    "title": "Reverse Nodes in Even Length Groups",
    "titleSlug": "reverse-nodes-in-even-length-groups",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Nodes in Even Length Groups",
    "example_output": "# Expected output for Reverse Nodes in Even Length Groups",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Nodes in Even Length Groups\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2075",
    "title": "Decode the Slanted Ciphertext",
    "titleSlug": "decode-the-slanted-ciphertext",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decode the Slanted Ciphertext",
    "example_output": "# Expected output for Decode the Slanted Ciphertext",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decode the Slanted Ciphertext\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2076",
    "title": "Process Restricted Friend Requests",
    "titleSlug": "process-restricted-friend-requests",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Process Restricted Friend Requests",
    "example_output": "# Expected output for Process Restricted Friend Requests",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Process Restricted Friend Requests\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2077",
    "title": "Paths in Maze That Lead to Same Room",
    "titleSlug": "paths-in-maze-that-lead-to-same-room",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Paths in Maze That Lead to Same Room",
    "example_output": "# Expected output for Paths in Maze That Lead to Same Room",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Paths in Maze That Lead to Same Room\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2078",
    "title": "Two Furthest Houses With Different Colors",
    "titleSlug": "two-furthest-houses-with-different-colors",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Two Furthest Houses With Different Colors",
    "example_output": "# Expected output for Two Furthest Houses With Different Colors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Two Furthest Houses With Different Colors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2079",
    "title": "Watering Plants",
    "titleSlug": "watering-plants",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Watering Plants",
    "example_output": "# Expected output for Watering Plants",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Watering Plants\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2080",
    "title": "Range Frequency Queries",
    "titleSlug": "range-frequency-queries",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Frequency Queries",
    "example_output": "# Expected output for Range Frequency Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Frequency Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2081",
    "title": "Sum of k-Mirror Numbers",
    "titleSlug": "sum-of-k-mirror-numbers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of k-Mirror Numbers",
    "example_output": "# Expected output for Sum of k-Mirror Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of k-Mirror Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2082",
    "title": "The Number of Rich Customers",
    "titleSlug": "the-number-of-rich-customers",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Rich Customers",
    "example_output": "# Expected output for The Number of Rich Customers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Rich Customers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2083",
    "title": "Substrings That Begin and End With the Same Letter",
    "titleSlug": "substrings-that-begin-and-end-with-the-same-letter",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Substrings That Begin and End With the Same Letter",
    "example_output": "# Expected output for Substrings That Begin and End With the Same Letter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Substrings That Begin and End With the Same Letter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2084",
    "title": "Drop Type 1 Orders for Customers With Type 0 Orders",
    "titleSlug": "drop-type-1-orders-for-customers-with-type-0-orders",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Drop Type 1 Orders for Customers With Type 0 Orders",
    "example_output": "# Expected output for Drop Type 1 Orders for Customers With Type 0 Orders",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Drop Type 1 Orders for Customers With Type 0 Orders\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2085",
    "title": "Count Common Words With One Occurrence",
    "titleSlug": "count-common-words-with-one-occurrence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Common Words With One Occurrence",
    "example_output": "# Expected output for Count Common Words With One Occurrence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Common Words With One Occurrence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2086",
    "title": "Minimum Number of Food Buckets to Feed the Hamsters",
    "titleSlug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Food Buckets to Feed the Hamsters",
    "example_output": "# Expected output for Minimum Number of Food Buckets to Feed the Hamsters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Food Buckets to Feed the Hamsters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2087",
    "title": "Minimum Cost Homecoming of a Robot in a Grid",
    "titleSlug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost Homecoming of a Robot in a Grid",
    "example_output": "# Expected output for Minimum Cost Homecoming of a Robot in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost Homecoming of a Robot in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2088",
    "title": "Count Fertile Pyramids in a Land",
    "titleSlug": "count-fertile-pyramids-in-a-land",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Fertile Pyramids in a Land",
    "example_output": "# Expected output for Count Fertile Pyramids in a Land",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Fertile Pyramids in a Land\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2089",
    "title": "Find Target Indices After Sorting Array",
    "titleSlug": "find-target-indices-after-sorting-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Target Indices After Sorting Array",
    "example_output": "# Expected output for Find Target Indices After Sorting Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Target Indices After Sorting Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2090",
    "title": "K Radius Subarray Averages",
    "titleSlug": "k-radius-subarray-averages",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K Radius Subarray Averages",
    "example_output": "# Expected output for K Radius Subarray Averages",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K Radius Subarray Averages\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2091",
    "title": "Removing Minimum and Maximum From Array",
    "titleSlug": "removing-minimum-and-maximum-from-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Removing Minimum and Maximum From Array",
    "example_output": "# Expected output for Removing Minimum and Maximum From Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Removing Minimum and Maximum From Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2092",
    "title": "Find All People With Secret",
    "titleSlug": "find-all-people-with-secret",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All People With Secret",
    "example_output": "# Expected output for Find All People With Secret",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All People With Secret\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2093",
    "title": "Minimum Cost to Reach City With Discounts",
    "titleSlug": "minimum-cost-to-reach-city-with-discounts",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Reach City With Discounts",
    "example_output": "# Expected output for Minimum Cost to Reach City With Discounts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Reach City With Discounts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2094",
    "title": "Finding 3-Digit Even Numbers",
    "titleSlug": "finding-3-digit-even-numbers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Finding 3-Digit Even Numbers",
    "example_output": "# Expected output for Finding 3-Digit Even Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Finding 3-Digit Even Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2095",
    "title": "Delete the Middle Node of a Linked List",
    "titleSlug": "delete-the-middle-node-of-a-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete the Middle Node of a Linked List",
    "example_output": "# Expected output for Delete the Middle Node of a Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete the Middle Node of a Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2096",
    "title": "Step-By-Step Directions From a Binary Tree Node to Another",
    "titleSlug": "step-by-step-directions-from-a-binary-tree-node-to-another",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Step-By-Step Directions From a Binary Tree Node to Another",
    "example_output": "# Expected output for Step-By-Step Directions From a Binary Tree Node to Another",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Step-By-Step Directions From a Binary Tree Node to Another\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2097",
    "title": "Valid Arrangement of Pairs",
    "titleSlug": "valid-arrangement-of-pairs",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Eulerian Circuit"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Valid Arrangement of Pairs",
    "example_output": "# Expected output for Valid Arrangement of Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Valid Arrangement of Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2098",
    "title": "Subsequence of Size K With the Largest Even Sum",
    "titleSlug": "subsequence-of-size-k-with-the-largest-even-sum",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subsequence of Size K With the Largest Even Sum",
    "example_output": "# Expected output for Subsequence of Size K With the Largest Even Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subsequence of Size K With the Largest Even Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2099",
    "title": "Find Subsequence of Length K With the Largest Sum",
    "titleSlug": "find-subsequence-of-length-k-with-the-largest-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Subsequence of Length K With the Largest Sum",
    "example_output": "# Expected output for Find Subsequence of Length K With the Largest Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Subsequence of Length K With the Largest Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2100",
    "title": "Find Good Days to Rob the Bank",
    "titleSlug": "find-good-days-to-rob-the-bank",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Good Days to Rob the Bank",
    "example_output": "# Expected output for Find Good Days to Rob the Bank",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Good Days to Rob the Bank\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2101",
    "title": "Detonate the Maximum Bombs",
    "titleSlug": "detonate-the-maximum-bombs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Detonate the Maximum Bombs",
    "example_output": "# Expected output for Detonate the Maximum Bombs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Detonate the Maximum Bombs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2102",
    "title": "Sequentially Ordinal Rank Tracker",
    "titleSlug": "sequentially-ordinal-rank-tracker",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Data Stream"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sequentially Ordinal Rank Tracker",
    "example_output": "# Expected output for Sequentially Ordinal Rank Tracker",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sequentially Ordinal Rank Tracker\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2103",
    "title": "Rings and Rods",
    "titleSlug": "rings-and-rods",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rings and Rods",
    "example_output": "# Expected output for Rings and Rods",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rings and Rods\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2104",
    "title": "Sum of Subarray Ranges",
    "titleSlug": "sum-of-subarray-ranges",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Subarray Ranges",
    "example_output": "# Expected output for Sum of Subarray Ranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Subarray Ranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2105",
    "title": "Watering Plants II",
    "titleSlug": "watering-plants-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Watering Plants II",
    "example_output": "# Expected output for Watering Plants II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Watering Plants II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2106",
    "title": "Maximum Fruits Harvested After at Most K Steps",
    "titleSlug": "maximum-fruits-harvested-after-at-most-k-steps",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Fruits Harvested After at Most K Steps",
    "example_output": "# Expected output for Maximum Fruits Harvested After at Most K Steps",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Fruits Harvested After at Most K Steps\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2107",
    "title": "Number of Unique Flavors After Sharing K Candies",
    "titleSlug": "number-of-unique-flavors-after-sharing-k-candies",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Unique Flavors After Sharing K Candies",
    "example_output": "# Expected output for Number of Unique Flavors After Sharing K Candies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Unique Flavors After Sharing K Candies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2108",
    "title": "Find First Palindromic String in the Array",
    "titleSlug": "find-first-palindromic-string-in-the-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find First Palindromic String in the Array",
    "example_output": "# Expected output for Find First Palindromic String in the Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find First Palindromic String in the Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2109",
    "title": "Adding Spaces to a String",
    "titleSlug": "adding-spaces-to-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Adding Spaces to a String",
    "example_output": "# Expected output for Adding Spaces to a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Adding Spaces to a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2110",
    "title": "Number of Smooth Descent Periods of a Stock",
    "titleSlug": "number-of-smooth-descent-periods-of-a-stock",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Smooth Descent Periods of a Stock",
    "example_output": "# Expected output for Number of Smooth Descent Periods of a Stock",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Smooth Descent Periods of a Stock\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2111",
    "title": "Minimum Operations to Make the Array K-Increasing",
    "titleSlug": "minimum-operations-to-make-the-array-k-increasing",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make the Array K-Increasing",
    "example_output": "# Expected output for Minimum Operations to Make the Array K-Increasing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make the Array K-Increasing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2112",
    "title": "The Airport With the Most Traffic",
    "titleSlug": "the-airport-with-the-most-traffic",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Airport With the Most Traffic",
    "example_output": "# Expected output for The Airport With the Most Traffic",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Airport With the Most Traffic\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2113",
    "title": "Elements in Array After Removing and Replacing Elements",
    "titleSlug": "elements-in-array-after-removing-and-replacing-elements",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Elements in Array After Removing and Replacing Elements",
    "example_output": "# Expected output for Elements in Array After Removing and Replacing Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Elements in Array After Removing and Replacing Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2114",
    "title": "Maximum Number of Words Found in Sentences",
    "titleSlug": "maximum-number-of-words-found-in-sentences",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Words Found in Sentences",
    "example_output": "# Expected output for Maximum Number of Words Found in Sentences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Words Found in Sentences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2115",
    "title": "Find All Possible Recipes from Given Supplies",
    "titleSlug": "find-all-possible-recipes-from-given-supplies",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All Possible Recipes from Given Supplies",
    "example_output": "# Expected output for Find All Possible Recipes from Given Supplies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All Possible Recipes from Given Supplies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2116",
    "title": "Check if a Parentheses String Can Be Valid",
    "titleSlug": "check-if-a-parentheses-string-can-be-valid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if a Parentheses String Can Be Valid",
    "example_output": "# Expected output for Check if a Parentheses String Can Be Valid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if a Parentheses String Can Be Valid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2117",
    "title": "Abbreviating the Product of a Range",
    "titleSlug": "abbreviating-the-product-of-a-range",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Abbreviating the Product of a Range",
    "example_output": "# Expected output for Abbreviating the Product of a Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Abbreviating the Product of a Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2118",
    "title": "Build the Equation",
    "titleSlug": "build-the-equation",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Build the Equation",
    "example_output": "# Expected output for Build the Equation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Build the Equation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2119",
    "title": "A Number After a Double Reversal",
    "titleSlug": "a-number-after-a-double-reversal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for A Number After a Double Reversal",
    "example_output": "# Expected output for A Number After a Double Reversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"A Number After a Double Reversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2120",
    "title": "Execution of All Suffix Instructions Staying in a Grid",
    "titleSlug": "execution-of-all-suffix-instructions-staying-in-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Execution of All Suffix Instructions Staying in a Grid",
    "example_output": "# Expected output for Execution of All Suffix Instructions Staying in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Execution of All Suffix Instructions Staying in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2121",
    "title": "Intervals Between Identical Elements",
    "titleSlug": "intervals-between-identical-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Intervals Between Identical Elements",
    "example_output": "# Expected output for Intervals Between Identical Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Intervals Between Identical Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2122",
    "title": "Recover the Original Array",
    "titleSlug": "recover-the-original-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Recover the Original Array",
    "example_output": "# Expected output for Recover the Original Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Recover the Original Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2123",
    "title": "Minimum Operations to Remove Adjacent Ones in Matrix",
    "titleSlug": "minimum-operations-to-remove-adjacent-ones-in-matrix",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Remove Adjacent Ones in Matrix",
    "example_output": "# Expected output for Minimum Operations to Remove Adjacent Ones in Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Minimum Operations to Remove Adjacent Ones in Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2124",
    "title": "Check if All A's Appears Before All B's",
    "titleSlug": "check-if-all-as-appears-before-all-bs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if All A's Appears Before All B's",
    "example_output": "# Expected output for Check if All A's Appears Before All B's",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if All A's Appears Before All B's\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2125",
    "title": "Number of Laser Beams in a Bank",
    "titleSlug": "number-of-laser-beams-in-a-bank",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Laser Beams in a Bank",
    "example_output": "# Expected output for Number of Laser Beams in a Bank",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Laser Beams in a Bank\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2126",
    "title": "Destroying Asteroids",
    "titleSlug": "destroying-asteroids",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Destroying Asteroids",
    "example_output": "# Expected output for Destroying Asteroids",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Destroying Asteroids\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2127",
    "title": "Maximum Employees to Be Invited to a Meeting",
    "titleSlug": "maximum-employees-to-be-invited-to-a-meeting",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Employees to Be Invited to a Meeting",
    "example_output": "# Expected output for Maximum Employees to Be Invited to a Meeting",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Employees to Be Invited to a Meeting\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2128",
    "title": "Remove All Ones With Row and Column Flips",
    "titleSlug": "remove-all-ones-with-row-and-column-flips",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove All Ones With Row and Column Flips",
    "example_output": "# Expected output for Remove All Ones With Row and Column Flips",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove All Ones With Row and Column Flips\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2129",
    "title": "Capitalize the Title",
    "titleSlug": "capitalize-the-title",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Capitalize the Title",
    "example_output": "# Expected output for Capitalize the Title",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Capitalize the Title\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2130",
    "title": "Maximum Twin Sum of a Linked List",
    "titleSlug": "maximum-twin-sum-of-a-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Twin Sum of a Linked List",
    "example_output": "# Expected output for Maximum Twin Sum of a Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Twin Sum of a Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2131",
    "title": "Longest Palindrome by Concatenating Two Letter Words",
    "titleSlug": "longest-palindrome-by-concatenating-two-letter-words",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Palindrome by Concatenating Two Letter Words",
    "example_output": "# Expected output for Longest Palindrome by Concatenating Two Letter Words",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Longest Palindrome by Concatenating Two Letter Words\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2132",
    "title": "Stamping the Grid",
    "titleSlug": "stamping-the-grid",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Stamping the Grid",
    "example_output": "# Expected output for Stamping the Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Stamping the Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2133",
    "title": "Check if Every Row and Column Contains All Numbers",
    "titleSlug": "check-if-every-row-and-column-contains-all-numbers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Every Row and Column Contains All Numbers",
    "example_output": "# Expected output for Check if Every Row and Column Contains All Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Every Row and Column Contains All Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2134",
    "title": "Minimum Swaps to Group All 1's Together II",
    "titleSlug": "minimum-swaps-to-group-all-1s-together-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Swaps to Group All 1's Together II",
    "example_output": "# Expected output for Minimum Swaps to Group All 1's Together II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Swaps to Group All 1's Together II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2135",
    "title": "Count Words Obtained After Adding a Letter",
    "titleSlug": "count-words-obtained-after-adding-a-letter",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Words Obtained After Adding a Letter",
    "example_output": "# Expected output for Count Words Obtained After Adding a Letter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Words Obtained After Adding a Letter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2136",
    "title": "Earliest Possible Day of Full Bloom",
    "titleSlug": "earliest-possible-day-of-full-bloom",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Earliest Possible Day of Full Bloom",
    "example_output": "# Expected output for Earliest Possible Day of Full Bloom",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Earliest Possible Day of Full Bloom\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2137",
    "title": "Pour Water Between Buckets to Make Water Levels Equal",
    "titleSlug": "pour-water-between-buckets-to-make-water-levels-equal",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pour Water Between Buckets to Make Water Levels Equal",
    "example_output": "# Expected output for Pour Water Between Buckets to Make Water Levels Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pour Water Between Buckets to Make Water Levels Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2138",
    "title": "Divide a String Into Groups of Size k",
    "titleSlug": "divide-a-string-into-groups-of-size-k",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide a String Into Groups of Size k",
    "example_output": "# Expected output for Divide a String Into Groups of Size k",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide a String Into Groups of Size k\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2139",
    "title": "Minimum Moves to Reach Target Score",
    "titleSlug": "minimum-moves-to-reach-target-score",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Moves to Reach Target Score",
    "example_output": "# Expected output for Minimum Moves to Reach Target Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Moves to Reach Target Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2140",
    "title": "Solving Questions With Brainpower",
    "titleSlug": "solving-questions-with-brainpower",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Solving Questions With Brainpower",
    "example_output": "# Expected output for Solving Questions With Brainpower",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Solving Questions With Brainpower\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2141",
    "title": "Maximum Running Time of N Computers",
    "titleSlug": "maximum-running-time-of-n-computers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Running Time of N Computers",
    "example_output": "# Expected output for Maximum Running Time of N Computers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Running Time of N Computers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2142",
    "title": "The Number of Passengers in Each Bus I",
    "titleSlug": "the-number-of-passengers-in-each-bus-i",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Passengers in Each Bus I",
    "example_output": "# Expected output for The Number of Passengers in Each Bus I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Passengers in Each Bus I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2143",
    "title": "Choose Numbers From Two Arrays in Range",
    "titleSlug": "choose-numbers-from-two-arrays-in-range",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Choose Numbers From Two Arrays in Range",
    "example_output": "# Expected output for Choose Numbers From Two Arrays in Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Choose Numbers From Two Arrays in Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2144",
    "title": "Minimum Cost of Buying Candies With Discount",
    "titleSlug": "minimum-cost-of-buying-candies-with-discount",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost of Buying Candies With Discount",
    "example_output": "# Expected output for Minimum Cost of Buying Candies With Discount",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost of Buying Candies With Discount\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2145",
    "title": "Count the Hidden Sequences",
    "titleSlug": "count-the-hidden-sequences",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Hidden Sequences",
    "example_output": "# Expected output for Count the Hidden Sequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Hidden Sequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2146",
    "title": "K Highest Ranked Items Within a Price Range",
    "titleSlug": "k-highest-ranked-items-within-a-price-range",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K Highest Ranked Items Within a Price Range",
    "example_output": "# Expected output for K Highest Ranked Items Within a Price Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K Highest Ranked Items Within a Price Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2147",
    "title": "Number of Ways to Divide a Long Corridor",
    "titleSlug": "number-of-ways-to-divide-a-long-corridor",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Divide a Long Corridor",
    "example_output": "# Expected output for Number of Ways to Divide a Long Corridor",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Divide a Long Corridor\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2148",
    "title": "Count Elements With Strictly Smaller and Greater Elements ",
    "titleSlug": "count-elements-with-strictly-smaller-and-greater-elements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Elements With Strictly Smaller and Greater Elements ",
    "example_output": "# Expected output for Count Elements With Strictly Smaller and Greater Elements ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Elements With Strictly Smaller and Greater Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2149",
    "title": "Rearrange Array Elements by Sign",
    "titleSlug": "rearrange-array-elements-by-sign",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rearrange Array Elements by Sign",
    "example_output": "# Expected output for Rearrange Array Elements by Sign",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rearrange Array Elements by Sign\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2150",
    "title": "Find All Lonely Numbers in the Array",
    "titleSlug": "find-all-lonely-numbers-in-the-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All Lonely Numbers in the Array",
    "example_output": "# Expected output for Find All Lonely Numbers in the Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All Lonely Numbers in the Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2151",
    "title": "Maximum Good People Based on Statements",
    "titleSlug": "maximum-good-people-based-on-statements",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Good People Based on Statements",
    "example_output": "# Expected output for Maximum Good People Based on Statements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Good People Based on Statements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2152",
    "title": "Minimum Number of Lines to Cover Points",
    "titleSlug": "minimum-number-of-lines-to-cover-points",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Lines to Cover Points",
    "example_output": "# Expected output for Minimum Number of Lines to Cover Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Lines to Cover Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2153",
    "title": "The Number of Passengers in Each Bus II",
    "titleSlug": "the-number-of-passengers-in-each-bus-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Passengers in Each Bus II",
    "example_output": "# Expected output for The Number of Passengers in Each Bus II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Passengers in Each Bus II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2154",
    "title": "Keep Multiplying Found Values by Two",
    "titleSlug": "keep-multiplying-found-values-by-two",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Keep Multiplying Found Values by Two",
    "example_output": "# Expected output for Keep Multiplying Found Values by Two",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Keep Multiplying Found Values by Two\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2155",
    "title": "All Divisions With the Highest Score of a Binary Array",
    "titleSlug": "all-divisions-with-the-highest-score-of-a-binary-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All Divisions With the Highest Score of a Binary Array",
    "example_output": "# Expected output for All Divisions With the Highest Score of a Binary Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All Divisions With the Highest Score of a Binary Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2156",
    "title": "Find Substring With Given Hash Value",
    "titleSlug": "find-substring-with-given-hash-value",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Substring With Given Hash Value",
    "example_output": "# Expected output for Find Substring With Given Hash Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Substring With Given Hash Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2157",
    "title": "Groups of Strings",
    "titleSlug": "groups-of-strings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Union Find"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Groups of Strings",
    "example_output": "# Expected output for Groups of Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Groups of Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2158",
    "title": "Amount of New Area Painted Each Day",
    "titleSlug": "amount-of-new-area-painted-each-day",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Amount of New Area Painted Each Day",
    "example_output": "# Expected output for Amount of New Area Painted Each Day",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Amount of New Area Painted Each Day\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2159",
    "title": "Order Two Columns Independently",
    "titleSlug": "order-two-columns-independently",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Order Two Columns Independently",
    "example_output": "# Expected output for Order Two Columns Independently",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Order Two Columns Independently\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2160",
    "title": "Minimum Sum of Four Digit Number After Splitting Digits",
    "titleSlug": "minimum-sum-of-four-digit-number-after-splitting-digits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Sum of Four Digit Number After Splitting Digits",
    "example_output": "# Expected output for Minimum Sum of Four Digit Number After Splitting Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Sum of Four Digit Number After Splitting Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2161",
    "title": "Partition Array According to Given Pivot",
    "titleSlug": "partition-array-according-to-given-pivot",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition Array According to Given Pivot",
    "example_output": "# Expected output for Partition Array According to Given Pivot",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition Array According to Given Pivot\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2162",
    "title": "Minimum Cost to Set Cooking Time",
    "titleSlug": "minimum-cost-to-set-cooking-time",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Set Cooking Time",
    "example_output": "# Expected output for Minimum Cost to Set Cooking Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Set Cooking Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2163",
    "title": "Minimum Difference in Sums After Removal of Elements",
    "titleSlug": "minimum-difference-in-sums-after-removal-of-elements",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Difference in Sums After Removal of Elements",
    "example_output": "# Expected output for Minimum Difference in Sums After Removal of Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Difference in Sums After Removal of Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2164",
    "title": "Sort Even and Odd Indices Independently",
    "titleSlug": "sort-even-and-odd-indices-independently",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Even and Odd Indices Independently",
    "example_output": "# Expected output for Sort Even and Odd Indices Independently",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Even and Odd Indices Independently\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2165",
    "title": "Smallest Value of the Rearranged Number",
    "titleSlug": "smallest-value-of-the-rearranged-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Value of the Rearranged Number",
    "example_output": "# Expected output for Smallest Value of the Rearranged Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Value of the Rearranged Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2166",
    "title": "Design Bitset",
    "titleSlug": "design-bitset",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Bitset",
    "example_output": "# Expected output for Design Bitset",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Bitset\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2167",
    "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
    "titleSlug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Remove All Cars Containing Illegal Goods",
    "example_output": "# Expected output for Minimum Time to Remove All Cars Containing Illegal Goods",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Remove All Cars Containing Illegal Goods\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2168",
    "title": "Unique Substrings With Equal Digit Frequency",
    "titleSlug": "unique-substrings-with-equal-digit-frequency",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Unique Substrings With Equal Digit Frequency",
    "example_output": "# Expected output for Unique Substrings With Equal Digit Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Unique Substrings With Equal Digit Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2169",
    "title": "Count Operations to Obtain Zero",
    "titleSlug": "count-operations-to-obtain-zero",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Operations to Obtain Zero",
    "example_output": "# Expected output for Count Operations to Obtain Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Operations to Obtain Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2170",
    "title": "Minimum Operations to Make the Array Alternating",
    "titleSlug": "minimum-operations-to-make-the-array-alternating",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make the Array Alternating",
    "example_output": "# Expected output for Minimum Operations to Make the Array Alternating",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make the Array Alternating\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2171",
    "title": "Removing Minimum Number of Magic Beans",
    "titleSlug": "removing-minimum-number-of-magic-beans",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Removing Minimum Number of Magic Beans",
    "example_output": "# Expected output for Removing Minimum Number of Magic Beans",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Removing Minimum Number of Magic Beans\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2172",
    "title": "Maximum AND Sum of Array",
    "titleSlug": "maximum-and-sum-of-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum AND Sum of Array",
    "example_output": "# Expected output for Maximum AND Sum of Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum AND Sum of Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2173",
    "title": "Longest Winning Streak",
    "titleSlug": "longest-winning-streak",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Winning Streak",
    "example_output": "# Expected output for Longest Winning Streak",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Winning Streak\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2174",
    "title": "Remove All Ones With Row and Column Flips II",
    "titleSlug": "remove-all-ones-with-row-and-column-flips-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove All Ones With Row and Column Flips II",
    "example_output": "# Expected output for Remove All Ones With Row and Column Flips II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove All Ones With Row and Column Flips II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2175",
    "title": "The Change in Global Rankings",
    "titleSlug": "the-change-in-global-rankings",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Change in Global Rankings",
    "example_output": "# Expected output for The Change in Global Rankings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Change in Global Rankings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2176",
    "title": "Count Equal and Divisible Pairs in an Array",
    "titleSlug": "count-equal-and-divisible-pairs-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Equal and Divisible Pairs in an Array",
    "example_output": "# Expected output for Count Equal and Divisible Pairs in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Equal and Divisible Pairs in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2177",
    "title": "Find Three Consecutive Integers That Sum to a Given Number",
    "titleSlug": "find-three-consecutive-integers-that-sum-to-a-given-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Three Consecutive Integers That Sum to a Given Number",
    "example_output": "# Expected output for Find Three Consecutive Integers That Sum to a Given Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Three Consecutive Integers That Sum to a Given Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2178",
    "title": "Maximum Split of Positive Even Integers",
    "titleSlug": "maximum-split-of-positive-even-integers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Split of Positive Even Integers",
    "example_output": "# Expected output for Maximum Split of Positive Even Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Split of Positive Even Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2179",
    "title": "Count Good Triplets in an Array",
    "titleSlug": "count-good-triplets-in-an-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Good Triplets in an Array",
    "example_output": "# Expected output for Count Good Triplets in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Good Triplets in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2180",
    "title": "Count Integers With Even Digit Sum",
    "titleSlug": "count-integers-with-even-digit-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Integers With Even Digit Sum",
    "example_output": "# Expected output for Count Integers With Even Digit Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Integers With Even Digit Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2181",
    "title": "Merge Nodes in Between Zeros",
    "titleSlug": "merge-nodes-in-between-zeros",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Nodes in Between Zeros",
    "example_output": "# Expected output for Merge Nodes in Between Zeros",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge Nodes in Between Zeros\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2182",
    "title": "Construct String With Repeat Limit",
    "titleSlug": "construct-string-with-repeat-limit",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct String With Repeat Limit",
    "example_output": "# Expected output for Construct String With Repeat Limit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct String With Repeat Limit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2183",
    "title": "Count Array Pairs Divisible by K",
    "titleSlug": "count-array-pairs-divisible-by-k",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Array Pairs Divisible by K",
    "example_output": "# Expected output for Count Array Pairs Divisible by K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Array Pairs Divisible by K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2184",
    "title": "Number of Ways to Build Sturdy Brick Wall",
    "titleSlug": "number-of-ways-to-build-sturdy-brick-wall",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Build Sturdy Brick Wall",
    "example_output": "# Expected output for Number of Ways to Build Sturdy Brick Wall",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Build Sturdy Brick Wall\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2185",
    "title": "Counting Words With a Given Prefix",
    "titleSlug": "counting-words-with-a-given-prefix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Counting Words With a Given Prefix",
    "example_output": "# Expected output for Counting Words With a Given Prefix",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Counting Words With a Given Prefix\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2186",
    "title": "Minimum Number of Steps to Make Two Strings Anagram II",
    "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Steps to Make Two Strings Anagram II",
    "example_output": "# Expected output for Minimum Number of Steps to Make Two Strings Anagram II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Steps to Make Two Strings Anagram II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2187",
    "title": "Minimum Time to Complete Trips",
    "titleSlug": "minimum-time-to-complete-trips",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Complete Trips",
    "example_output": "# Expected output for Minimum Time to Complete Trips",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Complete Trips\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2188",
    "title": "Minimum Time to Finish the Race",
    "titleSlug": "minimum-time-to-finish-the-race",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Finish the Race",
    "example_output": "# Expected output for Minimum Time to Finish the Race",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Finish the Race\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2189",
    "title": "Number of Ways to Build House of Cards",
    "titleSlug": "number-of-ways-to-build-house-of-cards",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Build House of Cards",
    "example_output": "# Expected output for Number of Ways to Build House of Cards",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Build House of Cards\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2190",
    "title": "Most Frequent Number Following Key In an Array",
    "titleSlug": "most-frequent-number-following-key-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Frequent Number Following Key In an Array",
    "example_output": "# Expected output for Most Frequent Number Following Key In an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Frequent Number Following Key In an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2191",
    "title": "Sort the Jumbled Numbers",
    "titleSlug": "sort-the-jumbled-numbers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort the Jumbled Numbers",
    "example_output": "# Expected output for Sort the Jumbled Numbers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort the Jumbled Numbers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2192",
    "title": "All Ancestors of a Node in a Directed Acyclic Graph",
    "titleSlug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All Ancestors of a Node in a Directed Acyclic Graph",
    "example_output": "# Expected output for All Ancestors of a Node in a Directed Acyclic Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All Ancestors of a Node in a Directed Acyclic Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2193",
    "title": "Minimum Number of Moves to Make Palindrome",
    "titleSlug": "minimum-number-of-moves-to-make-palindrome",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Binary Indexed Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Moves to Make Palindrome",
    "example_output": "# Expected output for Minimum Number of Moves to Make Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Minimum Number of Moves to Make Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2194",
    "title": "Cells in a Range on an Excel Sheet",
    "titleSlug": "cells-in-a-range-on-an-excel-sheet",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cells in a Range on an Excel Sheet",
    "example_output": "# Expected output for Cells in a Range on an Excel Sheet",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cells in a Range on an Excel Sheet\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2195",
    "title": "Append K Integers With Minimal Sum",
    "titleSlug": "append-k-integers-with-minimal-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Append K Integers With Minimal Sum",
    "example_output": "# Expected output for Append K Integers With Minimal Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Append K Integers With Minimal Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2196",
    "title": "Create Binary Tree From Descriptions",
    "titleSlug": "create-binary-tree-from-descriptions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create Binary Tree From Descriptions",
    "example_output": "# Expected output for Create Binary Tree From Descriptions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create Binary Tree From Descriptions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2197",
    "title": "Replace Non-Coprime Numbers in Array",
    "titleSlug": "replace-non-coprime-numbers-in-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Replace Non-Coprime Numbers in Array",
    "example_output": "# Expected output for Replace Non-Coprime Numbers in Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Replace Non-Coprime Numbers in Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2198",
    "title": "Number of Single Divisor Triplets",
    "titleSlug": "number-of-single-divisor-triplets",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Single Divisor Triplets",
    "example_output": "# Expected output for Number of Single Divisor Triplets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Single Divisor Triplets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2199",
    "title": "Finding the Topic of Each Post",
    "titleSlug": "finding-the-topic-of-each-post",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Finding the Topic of Each Post",
    "example_output": "# Expected output for Finding the Topic of Each Post",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Finding the Topic of Each Post\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2200",
    "title": "Find All K-Distant Indices in an Array",
    "titleSlug": "find-all-k-distant-indices-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All K-Distant Indices in an Array",
    "example_output": "# Expected output for Find All K-Distant Indices in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All K-Distant Indices in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2201",
    "title": "Count Artifacts That Can Be Extracted",
    "titleSlug": "count-artifacts-that-can-be-extracted",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Artifacts That Can Be Extracted",
    "example_output": "# Expected output for Count Artifacts That Can Be Extracted",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Artifacts That Can Be Extracted\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2202",
    "title": "Maximize the Topmost Element After K Moves",
    "titleSlug": "maximize-the-topmost-element-after-k-moves",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize the Topmost Element After K Moves",
    "example_output": "# Expected output for Maximize the Topmost Element After K Moves",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize the Topmost Element After K Moves\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2203",
    "title": "Minimum Weighted Subgraph With the Required Paths",
    "titleSlug": "minimum-weighted-subgraph-with-the-required-paths",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Graph"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Weighted Subgraph With the Required Paths",
    "example_output": "# Expected output for Minimum Weighted Subgraph With the Required Paths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Weighted Subgraph With the Required Paths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2204",
    "title": "Distance to a Cycle in Undirected Graph",
    "titleSlug": "distance-to-a-cycle-in-undirected-graph",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distance to a Cycle in Undirected Graph",
    "example_output": "# Expected output for Distance to a Cycle in Undirected Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distance to a Cycle in Undirected Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2205",
    "title": "The Number of Users That Are Eligible for Discount",
    "titleSlug": "the-number-of-users-that-are-eligible-for-discount",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Users That Are Eligible for Discount",
    "example_output": "# Expected output for The Number of Users That Are Eligible for Discount",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Users That Are Eligible for Discount\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2206",
    "title": "Divide Array Into Equal Pairs",
    "titleSlug": "divide-array-into-equal-pairs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Array Into Equal Pairs",
    "example_output": "# Expected output for Divide Array Into Equal Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide Array Into Equal Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2207",
    "title": "Maximize Number of Subsequences in a String",
    "titleSlug": "maximize-number-of-subsequences-in-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Number of Subsequences in a String",
    "example_output": "# Expected output for Maximize Number of Subsequences in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Number of Subsequences in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2208",
    "title": "Minimum Operations to Halve Array Sum",
    "titleSlug": "minimum-operations-to-halve-array-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Halve Array Sum",
    "example_output": "# Expected output for Minimum Operations to Halve Array Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Halve Array Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2209",
    "title": "Minimum White Tiles After Covering With Carpets",
    "titleSlug": "minimum-white-tiles-after-covering-with-carpets",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum White Tiles After Covering With Carpets",
    "example_output": "# Expected output for Minimum White Tiles After Covering With Carpets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum White Tiles After Covering With Carpets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2210",
    "title": "Count Hills and Valleys in an Array",
    "titleSlug": "count-hills-and-valleys-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Hills and Valleys in an Array",
    "example_output": "# Expected output for Count Hills and Valleys in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Hills and Valleys in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2211",
    "title": "Count Collisions on a Road",
    "titleSlug": "count-collisions-on-a-road",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Collisions on a Road",
    "example_output": "# Expected output for Count Collisions on a Road",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Collisions on a Road\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2212",
    "title": "Maximum Points in an Archery Competition",
    "titleSlug": "maximum-points-in-an-archery-competition",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Points in an Archery Competition",
    "example_output": "# Expected output for Maximum Points in an Archery Competition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Points in an Archery Competition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2213",
    "title": "Longest Substring of One Repeating Character",
    "titleSlug": "longest-substring-of-one-repeating-character",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Substring of One Repeating Character",
    "example_output": "# Expected output for Longest Substring of One Repeating Character",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Substring of One Repeating Character\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2214",
    "title": "Minimum Health to Beat Game",
    "titleSlug": "minimum-health-to-beat-game",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Health to Beat Game",
    "example_output": "# Expected output for Minimum Health to Beat Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Health to Beat Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2215",
    "title": "Find the Difference of Two Arrays",
    "titleSlug": "find-the-difference-of-two-arrays",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Difference of Two Arrays",
    "example_output": "# Expected output for Find the Difference of Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Difference of Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2216",
    "title": "Minimum Deletions to Make Array Beautiful",
    "titleSlug": "minimum-deletions-to-make-array-beautiful",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Deletions to Make Array Beautiful",
    "example_output": "# Expected output for Minimum Deletions to Make Array Beautiful",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Deletions to Make Array Beautiful\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2217",
    "title": "Find Palindrome With Fixed Length",
    "titleSlug": "find-palindrome-with-fixed-length",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Palindrome With Fixed Length",
    "example_output": "# Expected output for Find Palindrome With Fixed Length",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Find Palindrome With Fixed Length\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2218",
    "title": "Maximum Value of K Coins From Piles",
    "titleSlug": "maximum-value-of-k-coins-from-piles",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Value of K Coins From Piles",
    "example_output": "# Expected output for Maximum Value of K Coins From Piles",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Value of K Coins From Piles\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2219",
    "title": "Maximum Sum Score of Array",
    "titleSlug": "maximum-sum-score-of-array",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum Score of Array",
    "example_output": "# Expected output for Maximum Sum Score of Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum Score of Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2220",
    "title": "Minimum Bit Flips to Convert Number",
    "titleSlug": "minimum-bit-flips-to-convert-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Bit Flips to Convert Number",
    "example_output": "# Expected output for Minimum Bit Flips to Convert Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Bit Flips to Convert Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2221",
    "title": "Find Triangular Sum of an Array",
    "titleSlug": "find-triangular-sum-of-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Triangular Sum of an Array",
    "example_output": "# Expected output for Find Triangular Sum of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Triangular Sum of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2222",
    "title": "Number of Ways to Select Buildings",
    "titleSlug": "number-of-ways-to-select-buildings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Select Buildings",
    "example_output": "# Expected output for Number of Ways to Select Buildings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Select Buildings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2223",
    "title": "Sum of Scores of Built Strings",
    "titleSlug": "sum-of-scores-of-built-strings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Suffix Array"
      },
      {
        "name": "String Matching"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Scores of Built Strings",
    "example_output": "# Expected output for Sum of Scores of Built Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Scores of Built Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2224",
    "title": "Minimum Number of Operations to Convert Time",
    "titleSlug": "minimum-number-of-operations-to-convert-time",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Convert Time",
    "example_output": "# Expected output for Minimum Number of Operations to Convert Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Convert Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2225",
    "title": "Find Players With Zero or One Losses",
    "titleSlug": "find-players-with-zero-or-one-losses",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Players With Zero or One Losses",
    "example_output": "# Expected output for Find Players With Zero or One Losses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Players With Zero or One Losses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2226",
    "title": "Maximum Candies Allocated to K Children",
    "titleSlug": "maximum-candies-allocated-to-k-children",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Candies Allocated to K Children",
    "example_output": "# Expected output for Maximum Candies Allocated to K Children",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Candies Allocated to K Children\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2227",
    "title": "Encrypt and Decrypt Strings",
    "titleSlug": "encrypt-and-decrypt-strings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Encrypt and Decrypt Strings",
    "example_output": "# Expected output for Encrypt and Decrypt Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Encrypt and Decrypt Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2228",
    "title": "Users With Two Purchases Within Seven Days",
    "titleSlug": "users-with-two-purchases-within-seven-days",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Users With Two Purchases Within Seven Days",
    "example_output": "# Expected output for Users With Two Purchases Within Seven Days",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Users With Two Purchases Within Seven Days\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2229",
    "title": "Check if an Array Is Consecutive",
    "titleSlug": "check-if-an-array-is-consecutive",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if an Array Is Consecutive",
    "example_output": "# Expected output for Check if an Array Is Consecutive",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if an Array Is Consecutive\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2230",
    "title": "The Users That Are Eligible for Discount",
    "titleSlug": "the-users-that-are-eligible-for-discount",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Users That Are Eligible for Discount",
    "example_output": "# Expected output for The Users That Are Eligible for Discount",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Users That Are Eligible for Discount\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2231",
    "title": "Largest Number After Digit Swaps by Parity",
    "titleSlug": "largest-number-after-digit-swaps-by-parity",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Number After Digit Swaps by Parity",
    "example_output": "# Expected output for Largest Number After Digit Swaps by Parity",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Number After Digit Swaps by Parity\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2232",
    "title": "Minimize Result by Adding Parentheses to Expression",
    "titleSlug": "minimize-result-by-adding-parentheses-to-expression",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Result by Adding Parentheses to Expression",
    "example_output": "# Expected output for Minimize Result by Adding Parentheses to Expression",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Minimize Result by Adding Parentheses to Expression\"."
  },
  {
    "id": "2233",
    "title": "Maximum Product After K Increments",
    "titleSlug": "maximum-product-after-k-increments",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Product After K Increments",
    "example_output": "# Expected output for Maximum Product After K Increments",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Product After K Increments\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2234",
    "title": "Maximum Total Beauty of the Gardens",
    "titleSlug": "maximum-total-beauty-of-the-gardens",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Total Beauty of the Gardens",
    "example_output": "# Expected output for Maximum Total Beauty of the Gardens",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Total Beauty of the Gardens\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2235",
    "title": "Add Two Integers",
    "titleSlug": "add-two-integers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Two Integers",
    "example_output": "# Expected output for Add Two Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Two Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2236",
    "title": "Root Equals Sum of Children",
    "titleSlug": "root-equals-sum-of-children",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Root Equals Sum of Children",
    "example_output": "# Expected output for Root Equals Sum of Children",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Root Equals Sum of Children\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2237",
    "title": "Count Positions on Street With Required Brightness",
    "titleSlug": "count-positions-on-street-with-required-brightness",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Positions on Street With Required Brightness",
    "example_output": "# Expected output for Count Positions on Street With Required Brightness",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Positions on Street With Required Brightness\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2238",
    "title": "Number of Times a Driver Was a Passenger",
    "titleSlug": "number-of-times-a-driver-was-a-passenger",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Times a Driver Was a Passenger",
    "example_output": "# Expected output for Number of Times a Driver Was a Passenger",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Times a Driver Was a Passenger\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2239",
    "title": "Find Closest Number to Zero",
    "titleSlug": "find-closest-number-to-zero",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Closest Number to Zero",
    "example_output": "# Expected output for Find Closest Number to Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Closest Number to Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2240",
    "title": "Number of Ways to Buy Pens and Pencils",
    "titleSlug": "number-of-ways-to-buy-pens-and-pencils",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Buy Pens and Pencils",
    "example_output": "# Expected output for Number of Ways to Buy Pens and Pencils",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Buy Pens and Pencils\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2241",
    "title": "Design an ATM Machine",
    "titleSlug": "design-an-atm-machine",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design an ATM Machine",
    "example_output": "# Expected output for Design an ATM Machine",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design an ATM Machine\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2242",
    "title": "Maximum Score of a Node Sequence",
    "titleSlug": "maximum-score-of-a-node-sequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score of a Node Sequence",
    "example_output": "# Expected output for Maximum Score of a Node Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score of a Node Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2243",
    "title": "Calculate Digit Sum of a String",
    "titleSlug": "calculate-digit-sum-of-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate Digit Sum of a String",
    "example_output": "# Expected output for Calculate Digit Sum of a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate Digit Sum of a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2244",
    "title": "Minimum Rounds to Complete All Tasks",
    "titleSlug": "minimum-rounds-to-complete-all-tasks",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Rounds to Complete All Tasks",
    "example_output": "# Expected output for Minimum Rounds to Complete All Tasks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Rounds to Complete All Tasks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2245",
    "title": "Maximum Trailing Zeros in a Cornered Path",
    "titleSlug": "maximum-trailing-zeros-in-a-cornered-path",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Trailing Zeros in a Cornered Path",
    "example_output": "# Expected output for Maximum Trailing Zeros in a Cornered Path",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Trailing Zeros in a Cornered Path\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2246",
    "title": "Longest Path With Different Adjacent Characters",
    "titleSlug": "longest-path-with-different-adjacent-characters",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Path With Different Adjacent Characters",
    "example_output": "# Expected output for Longest Path With Different Adjacent Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Path With Different Adjacent Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2247",
    "title": "Maximum Cost of Trip With K Highways",
    "titleSlug": "maximum-cost-of-trip-with-k-highways",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Cost of Trip With K Highways",
    "example_output": "# Expected output for Maximum Cost of Trip With K Highways",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Cost of Trip With K Highways\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2248",
    "title": "Intersection of Multiple Arrays",
    "titleSlug": "intersection-of-multiple-arrays",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Intersection of Multiple Arrays",
    "example_output": "# Expected output for Intersection of Multiple Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Intersection of Multiple Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2249",
    "title": "Count Lattice Points Inside a Circle",
    "titleSlug": "count-lattice-points-inside-a-circle",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Lattice Points Inside a Circle",
    "example_output": "# Expected output for Count Lattice Points Inside a Circle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Lattice Points Inside a Circle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2250",
    "title": "Count Number of Rectangles Containing Each Point",
    "titleSlug": "count-number-of-rectangles-containing-each-point",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Rectangles Containing Each Point",
    "example_output": "# Expected output for Count Number of Rectangles Containing Each Point",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Rectangles Containing Each Point\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2251",
    "title": "Number of Flowers in Full Bloom",
    "titleSlug": "number-of-flowers-in-full-bloom",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Flowers in Full Bloom",
    "example_output": "# Expected output for Number of Flowers in Full Bloom",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Flowers in Full Bloom\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2252",
    "title": "Dynamic Pivoting of a Table",
    "titleSlug": "dynamic-pivoting-of-a-table",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Dynamic Pivoting of a Table",
    "example_output": "# Expected output for Dynamic Pivoting of a Table",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Dynamic Pivoting of a Table\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2253",
    "title": "Dynamic Unpivoting of a Table",
    "titleSlug": "dynamic-unpivoting-of-a-table",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Dynamic Unpivoting of a Table",
    "example_output": "# Expected output for Dynamic Unpivoting of a Table",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Dynamic Unpivoting of a Table\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2254",
    "title": "Design Video Sharing Platform",
    "titleSlug": "design-video-sharing-platform",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Video Sharing Platform",
    "example_output": "# Expected output for Design Video Sharing Platform",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Video Sharing Platform\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2255",
    "title": "Count Prefixes of a Given String",
    "titleSlug": "count-prefixes-of-a-given-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Prefixes of a Given String",
    "example_output": "# Expected output for Count Prefixes of a Given String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Prefixes of a Given String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2256",
    "title": "Minimum Average Difference",
    "titleSlug": "minimum-average-difference",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Average Difference",
    "example_output": "# Expected output for Minimum Average Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Average Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2257",
    "title": "Count Unguarded Cells in the Grid",
    "titleSlug": "count-unguarded-cells-in-the-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Unguarded Cells in the Grid",
    "example_output": "# Expected output for Count Unguarded Cells in the Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Unguarded Cells in the Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2258",
    "title": "Escape the Spreading Fire",
    "titleSlug": "escape-the-spreading-fire",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Escape the Spreading Fire",
    "example_output": "# Expected output for Escape the Spreading Fire",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Escape the Spreading Fire\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2259",
    "title": "Remove Digit From Number to Maximize Result",
    "titleSlug": "remove-digit-from-number-to-maximize-result",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Digit From Number to Maximize Result",
    "example_output": "# Expected output for Remove Digit From Number to Maximize Result",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Digit From Number to Maximize Result\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2260",
    "title": "Minimum Consecutive Cards to Pick Up",
    "titleSlug": "minimum-consecutive-cards-to-pick-up",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Consecutive Cards to Pick Up",
    "example_output": "# Expected output for Minimum Consecutive Cards to Pick Up",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Consecutive Cards to Pick Up\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2261",
    "title": "K Divisible Elements Subarrays",
    "titleSlug": "k-divisible-elements-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "Hash Function"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K Divisible Elements Subarrays",
    "example_output": "# Expected output for K Divisible Elements Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K Divisible Elements Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2262",
    "title": "Total Appeal of A String",
    "titleSlug": "total-appeal-of-a-string",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Total Appeal of A String",
    "example_output": "# Expected output for Total Appeal of A String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Total Appeal of A String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2263",
    "title": "Make Array Non-decreasing or Non-increasing",
    "titleSlug": "make-array-non-decreasing-or-non-increasing",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Array Non-decreasing or Non-increasing",
    "example_output": "# Expected output for Make Array Non-decreasing or Non-increasing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Array Non-decreasing or Non-increasing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2264",
    "title": "Largest 3-Same-Digit Number in String",
    "titleSlug": "largest-3-same-digit-number-in-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest 3-Same-Digit Number in String",
    "example_output": "# Expected output for Largest 3-Same-Digit Number in String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest 3-Same-Digit Number in String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2265",
    "title": "Count Nodes Equal to Average of Subtree",
    "titleSlug": "count-nodes-equal-to-average-of-subtree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Nodes Equal to Average of Subtree",
    "example_output": "# Expected output for Count Nodes Equal to Average of Subtree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Nodes Equal to Average of Subtree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2266",
    "title": "Count Number of Texts",
    "titleSlug": "count-number-of-texts",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Texts",
    "example_output": "# Expected output for Count Number of Texts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Texts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2267",
    "title": " Check if There Is a Valid Parentheses String Path",
    "titleSlug": "check-if-there-is-a-valid-parentheses-string-path",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for  Check if There Is a Valid Parentheses String Path",
    "example_output": "# Expected output for  Check if There Is a Valid Parentheses String Path",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if There Is a Valid Parentheses String Path\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2268",
    "title": "Minimum Number of Keypresses",
    "titleSlug": "minimum-number-of-keypresses",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Keypresses",
    "example_output": "# Expected output for Minimum Number of Keypresses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Keypresses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2269",
    "title": "Find the K-Beauty of a Number",
    "titleSlug": "find-the-k-beauty-of-a-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the K-Beauty of a Number",
    "example_output": "# Expected output for Find the K-Beauty of a Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the K-Beauty of a Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2270",
    "title": "Number of Ways to Split Array",
    "titleSlug": "number-of-ways-to-split-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Split Array",
    "example_output": "# Expected output for Number of Ways to Split Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Split Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2271",
    "title": "Maximum White Tiles Covered by a Carpet",
    "titleSlug": "maximum-white-tiles-covered-by-a-carpet",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum White Tiles Covered by a Carpet",
    "example_output": "# Expected output for Maximum White Tiles Covered by a Carpet",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum White Tiles Covered by a Carpet\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2272",
    "title": "Substring With Largest Variance",
    "titleSlug": "substring-with-largest-variance",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Substring With Largest Variance",
    "example_output": "# Expected output for Substring With Largest Variance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Substring With Largest Variance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2273",
    "title": "Find Resultant Array After Removing Anagrams",
    "titleSlug": "find-resultant-array-after-removing-anagrams",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Resultant Array After Removing Anagrams",
    "example_output": "# Expected output for Find Resultant Array After Removing Anagrams",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Resultant Array After Removing Anagrams\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2274",
    "title": "Maximum Consecutive Floors Without Special Floors",
    "titleSlug": "maximum-consecutive-floors-without-special-floors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Consecutive Floors Without Special Floors",
    "example_output": "# Expected output for Maximum Consecutive Floors Without Special Floors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Consecutive Floors Without Special Floors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2275",
    "title": "Largest Combination With Bitwise AND Greater Than Zero",
    "titleSlug": "largest-combination-with-bitwise-and-greater-than-zero",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Combination With Bitwise AND Greater Than Zero",
    "example_output": "# Expected output for Largest Combination With Bitwise AND Greater Than Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Combination With Bitwise AND Greater Than Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2276",
    "title": "Count Integers in Intervals",
    "titleSlug": "count-integers-in-intervals",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Design"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Integers in Intervals",
    "example_output": "# Expected output for Count Integers in Intervals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Integers in Intervals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2277",
    "title": "Closest Node to Path in Tree",
    "titleSlug": "closest-node-to-path-in-tree",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Node to Path in Tree",
    "example_output": "# Expected output for Closest Node to Path in Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Node to Path in Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2278",
    "title": "Percentage of Letter in String",
    "titleSlug": "percentage-of-letter-in-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Percentage of Letter in String",
    "example_output": "# Expected output for Percentage of Letter in String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Percentage of Letter in String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2279",
    "title": "Maximum Bags With Full Capacity of Rocks",
    "titleSlug": "maximum-bags-with-full-capacity-of-rocks",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Bags With Full Capacity of Rocks",
    "example_output": "# Expected output for Maximum Bags With Full Capacity of Rocks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Bags With Full Capacity of Rocks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2280",
    "title": "Minimum Lines to Represent a Line Chart",
    "titleSlug": "minimum-lines-to-represent-a-line-chart",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Lines to Represent a Line Chart",
    "example_output": "# Expected output for Minimum Lines to Represent a Line Chart",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Lines to Represent a Line Chart\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2281",
    "title": "Sum of Total Strength of Wizards",
    "titleSlug": "sum-of-total-strength-of-wizards",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Total Strength of Wizards",
    "example_output": "# Expected output for Sum of Total Strength of Wizards",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Total Strength of Wizards\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2282",
    "title": "Number of People That Can Be Seen in a Grid",
    "titleSlug": "number-of-people-that-can-be-seen-in-a-grid",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of People That Can Be Seen in a Grid",
    "example_output": "# Expected output for Number of People That Can Be Seen in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of People That Can Be Seen in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2283",
    "title": "Check if Number Has Equal Digit Count and Digit Value",
    "titleSlug": "check-if-number-has-equal-digit-count-and-digit-value",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Number Has Equal Digit Count and Digit Value",
    "example_output": "# Expected output for Check if Number Has Equal Digit Count and Digit Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Number Has Equal Digit Count and Digit Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2284",
    "title": "Sender With Largest Word Count",
    "titleSlug": "sender-with-largest-word-count",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sender With Largest Word Count",
    "example_output": "# Expected output for Sender With Largest Word Count",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sender With Largest Word Count\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2285",
    "title": "Maximum Total Importance of Roads",
    "titleSlug": "maximum-total-importance-of-roads",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Greedy"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Total Importance of Roads",
    "example_output": "# Expected output for Maximum Total Importance of Roads",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Total Importance of Roads\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2286",
    "title": "Booking Concert Tickets in Groups",
    "titleSlug": "booking-concert-tickets-in-groups",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Binary Search"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Booking Concert Tickets in Groups",
    "example_output": "# Expected output for Booking Concert Tickets in Groups",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Booking Concert Tickets in Groups\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2287",
    "title": "Rearrange Characters to Make Target String",
    "titleSlug": "rearrange-characters-to-make-target-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rearrange Characters to Make Target String",
    "example_output": "# Expected output for Rearrange Characters to Make Target String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rearrange Characters to Make Target String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2288",
    "title": "Apply Discount to Prices",
    "titleSlug": "apply-discount-to-prices",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Discount to Prices",
    "example_output": "# Expected output for Apply Discount to Prices",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Discount to Prices\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2289",
    "title": "Steps to Make Array Non-decreasing",
    "titleSlug": "steps-to-make-array-non-decreasing",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Steps to Make Array Non-decreasing",
    "example_output": "# Expected output for Steps to Make Array Non-decreasing",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Steps to Make Array Non-decreasing\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2290",
    "title": "Minimum Obstacle Removal to Reach Corner",
    "titleSlug": "minimum-obstacle-removal-to-reach-corner",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Obstacle Removal to Reach Corner",
    "example_output": "# Expected output for Minimum Obstacle Removal to Reach Corner",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Obstacle Removal to Reach Corner\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2291",
    "title": "Maximum Profit From Trading Stocks",
    "titleSlug": "maximum-profit-from-trading-stocks",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Profit From Trading Stocks",
    "example_output": "# Expected output for Maximum Profit From Trading Stocks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Profit From Trading Stocks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2292",
    "title": "Products With Three or More Orders in Two Consecutive Years",
    "titleSlug": "products-with-three-or-more-orders-in-two-consecutive-years",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Products With Three or More Orders in Two Consecutive Years",
    "example_output": "# Expected output for Products With Three or More Orders in Two Consecutive Years",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Products With Three or More Orders in Two Consecutive Years\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2293",
    "title": "Min Max Game",
    "titleSlug": "min-max-game",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Min Max Game",
    "example_output": "# Expected output for Min Max Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Min Max Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2294",
    "title": "Partition Array Such That Maximum Difference Is K",
    "titleSlug": "partition-array-such-that-maximum-difference-is-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition Array Such That Maximum Difference Is K",
    "example_output": "# Expected output for Partition Array Such That Maximum Difference Is K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition Array Such That Maximum Difference Is K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2295",
    "title": "Replace Elements in an Array",
    "titleSlug": "replace-elements-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Replace Elements in an Array",
    "example_output": "# Expected output for Replace Elements in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Replace Elements in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2296",
    "title": "Design a Text Editor",
    "titleSlug": "design-a-text-editor",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Design"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Doubly-Linked List"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design a Text Editor",
    "example_output": "# Expected output for Design a Text Editor",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design a Text Editor\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2297",
    "title": "Jump Game VIII",
    "titleSlug": "jump-game-viii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Jump Game VIII",
    "example_output": "# Expected output for Jump Game VIII",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Jump Game VIII\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2298",
    "title": "Tasks Count in the Weekend",
    "titleSlug": "tasks-count-in-the-weekend",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Tasks Count in the Weekend",
    "example_output": "# Expected output for Tasks Count in the Weekend",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Tasks Count in the Weekend\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2299",
    "title": "Strong Password Checker II",
    "titleSlug": "strong-password-checker-ii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strong Password Checker II",
    "example_output": "# Expected output for Strong Password Checker II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strong Password Checker II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2300",
    "title": "Successful Pairs of Spells and Potions",
    "titleSlug": "successful-pairs-of-spells-and-potions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Successful Pairs of Spells and Potions",
    "example_output": "# Expected output for Successful Pairs of Spells and Potions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Successful Pairs of Spells and Potions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2301",
    "title": "Match Substring After Replacement",
    "titleSlug": "match-substring-after-replacement",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Match Substring After Replacement",
    "example_output": "# Expected output for Match Substring After Replacement",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Match Substring After Replacement\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2302",
    "title": "Count Subarrays With Score Less Than K",
    "titleSlug": "count-subarrays-with-score-less-than-k",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Subarrays With Score Less Than K",
    "example_output": "# Expected output for Count Subarrays With Score Less Than K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Subarrays With Score Less Than K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2303",
    "title": "Calculate Amount Paid in Taxes",
    "titleSlug": "calculate-amount-paid-in-taxes",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate Amount Paid in Taxes",
    "example_output": "# Expected output for Calculate Amount Paid in Taxes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate Amount Paid in Taxes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2304",
    "title": "Minimum Path Cost in a Grid",
    "titleSlug": "minimum-path-cost-in-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Path Cost in a Grid",
    "example_output": "# Expected output for Minimum Path Cost in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Path Cost in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2305",
    "title": "Fair Distribution of Cookies",
    "titleSlug": "fair-distribution-of-cookies",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fair Distribution of Cookies",
    "example_output": "# Expected output for Fair Distribution of Cookies",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fair Distribution of Cookies\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2306",
    "title": "Naming a Company",
    "titleSlug": "naming-a-company",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Naming a Company",
    "example_output": "# Expected output for Naming a Company",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Naming a Company\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2307",
    "title": "Check for Contradictions in Equations",
    "titleSlug": "check-for-contradictions-in-equations",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check for Contradictions in Equations",
    "example_output": "# Expected output for Check for Contradictions in Equations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check for Contradictions in Equations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2308",
    "title": "Arrange Table by Gender",
    "titleSlug": "arrange-table-by-gender",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Arrange Table by Gender",
    "example_output": "# Expected output for Arrange Table by Gender",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Arrange Table by Gender\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2309",
    "title": "Greatest English Letter in Upper and Lower Case",
    "titleSlug": "greatest-english-letter-in-upper-and-lower-case",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Greatest English Letter in Upper and Lower Case",
    "example_output": "# Expected output for Greatest English Letter in Upper and Lower Case",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Greatest English Letter in Upper and Lower Case\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2310",
    "title": "Sum of Numbers With Units Digit K",
    "titleSlug": "sum-of-numbers-with-units-digit-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Numbers With Units Digit K",
    "example_output": "# Expected output for Sum of Numbers With Units Digit K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Numbers With Units Digit K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2311",
    "title": "Longest Binary Subsequence Less Than or Equal to K",
    "titleSlug": "longest-binary-subsequence-less-than-or-equal-to-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Binary Subsequence Less Than or Equal to K",
    "example_output": "# Expected output for Longest Binary Subsequence Less Than or Equal to K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Binary Subsequence Less Than or Equal to K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2312",
    "title": "Selling Pieces of Wood",
    "titleSlug": "selling-pieces-of-wood",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Selling Pieces of Wood",
    "example_output": "# Expected output for Selling Pieces of Wood",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Selling Pieces of Wood\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2313",
    "title": "Minimum Flips in Binary Tree to Get Result",
    "titleSlug": "minimum-flips-in-binary-tree-to-get-result",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Flips in Binary Tree to Get Result",
    "example_output": "# Expected output for Minimum Flips in Binary Tree to Get Result",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Flips in Binary Tree to Get Result\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2314",
    "title": "The First Day of the Maximum Recorded Degree in Each City",
    "titleSlug": "the-first-day-of-the-maximum-recorded-degree-in-each-city",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The First Day of the Maximum Recorded Degree in Each City",
    "example_output": "# Expected output for The First Day of the Maximum Recorded Degree in Each City",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The First Day of the Maximum Recorded Degree in Each City\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2315",
    "title": "Count Asterisks",
    "titleSlug": "count-asterisks",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Asterisks",
    "example_output": "# Expected output for Count Asterisks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Asterisks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2316",
    "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
    "titleSlug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Unreachable Pairs of Nodes in an Undirected Graph",
    "example_output": "# Expected output for Count Unreachable Pairs of Nodes in an Undirected Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Unreachable Pairs of Nodes in an Undirected Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2317",
    "title": "Maximum XOR After Operations ",
    "titleSlug": "maximum-xor-after-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum XOR After Operations ",
    "example_output": "# Expected output for Maximum XOR After Operations ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum XOR After Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2318",
    "title": "Number of Distinct Roll Sequences",
    "titleSlug": "number-of-distinct-roll-sequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Distinct Roll Sequences",
    "example_output": "# Expected output for Number of Distinct Roll Sequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Distinct Roll Sequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2319",
    "title": "Check if Matrix Is X-Matrix",
    "titleSlug": "check-if-matrix-is-x-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Matrix Is X-Matrix",
    "example_output": "# Expected output for Check if Matrix Is X-Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Check if Matrix Is X-Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2320",
    "title": "Count Number of Ways to Place Houses",
    "titleSlug": "count-number-of-ways-to-place-houses",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Ways to Place Houses",
    "example_output": "# Expected output for Count Number of Ways to Place Houses",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Ways to Place Houses\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2321",
    "title": "Maximum Score Of Spliced Array",
    "titleSlug": "maximum-score-of-spliced-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score Of Spliced Array",
    "example_output": "# Expected output for Maximum Score Of Spliced Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score Of Spliced Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2322",
    "title": "Minimum Score After Removals on a Tree",
    "titleSlug": "minimum-score-after-removals-on-a-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Score After Removals on a Tree",
    "example_output": "# Expected output for Minimum Score After Removals on a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Score After Removals on a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2323",
    "title": "Find Minimum Time to Finish All Jobs II",
    "titleSlug": "find-minimum-time-to-finish-all-jobs-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Minimum Time to Finish All Jobs II",
    "example_output": "# Expected output for Find Minimum Time to Finish All Jobs II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Minimum Time to Finish All Jobs II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2324",
    "title": "Product Sales Analysis IV",
    "titleSlug": "product-sales-analysis-iv",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product Sales Analysis IV",
    "example_output": "# Expected output for Product Sales Analysis IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product Sales Analysis IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2325",
    "title": "Decode the Message",
    "titleSlug": "decode-the-message",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decode the Message",
    "example_output": "# Expected output for Decode the Message",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decode the Message\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2326",
    "title": "Spiral Matrix IV",
    "titleSlug": "spiral-matrix-iv",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Linked List"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Spiral Matrix IV",
    "example_output": "# Expected output for Spiral Matrix IV",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Spiral Matrix IV\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2327",
    "title": "Number of People Aware of a Secret",
    "titleSlug": "number-of-people-aware-of-a-secret",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of People Aware of a Secret",
    "example_output": "# Expected output for Number of People Aware of a Secret",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of People Aware of a Secret\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2328",
    "title": "Number of Increasing Paths in a Grid",
    "titleSlug": "number-of-increasing-paths-in-a-grid",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Increasing Paths in a Grid",
    "example_output": "# Expected output for Number of Increasing Paths in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Increasing Paths in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2329",
    "title": "Product Sales Analysis V",
    "titleSlug": "product-sales-analysis-v",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Product Sales Analysis V",
    "example_output": "# Expected output for Product Sales Analysis V",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Product Sales Analysis V\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2331",
    "title": "Evaluate Boolean Binary Tree",
    "titleSlug": "evaluate-boolean-binary-tree",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Evaluate Boolean Binary Tree",
    "example_output": "# Expected output for Evaluate Boolean Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Evaluate Boolean Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2332",
    "title": "The Latest Time to Catch a Bus",
    "titleSlug": "the-latest-time-to-catch-a-bus",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Latest Time to Catch a Bus",
    "example_output": "# Expected output for The Latest Time to Catch a Bus",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Latest Time to Catch a Bus\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2333",
    "title": "Minimum Sum of Squared Difference",
    "titleSlug": "minimum-sum-of-squared-difference",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Sum of Squared Difference",
    "example_output": "# Expected output for Minimum Sum of Squared Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Sum of Squared Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2334",
    "title": "Subarray With Elements Greater Than Varying Threshold",
    "titleSlug": "subarray-with-elements-greater-than-varying-threshold",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subarray With Elements Greater Than Varying Threshold",
    "example_output": "# Expected output for Subarray With Elements Greater Than Varying Threshold",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subarray With Elements Greater Than Varying Threshold\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2335",
    "title": "Minimum Amount of Time to Fill Cups",
    "titleSlug": "minimum-amount-of-time-to-fill-cups",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Amount of Time to Fill Cups",
    "example_output": "# Expected output for Minimum Amount of Time to Fill Cups",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Amount of Time to Fill Cups\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2336",
    "title": "Smallest Number in Infinite Set",
    "titleSlug": "smallest-number-in-infinite-set",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Number in Infinite Set",
    "example_output": "# Expected output for Smallest Number in Infinite Set",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Number in Infinite Set\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2337",
    "title": "Move Pieces to Obtain a String",
    "titleSlug": "move-pieces-to-obtain-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Move Pieces to Obtain a String",
    "example_output": "# Expected output for Move Pieces to Obtain a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Move Pieces to Obtain a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2338",
    "title": "Count the Number of Ideal Arrays",
    "titleSlug": "count-the-number-of-ideal-arrays",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Ideal Arrays",
    "example_output": "# Expected output for Count the Number of Ideal Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Ideal Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2339",
    "title": "All the Matches of the League",
    "titleSlug": "all-the-matches-of-the-league",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for All the Matches of the League",
    "example_output": "# Expected output for All the Matches of the League",
    "status": "TO_DO",
    "description": "Solve the problem titled \"All the Matches of the League\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2340",
    "title": "Minimum Adjacent Swaps to Make a Valid Array",
    "titleSlug": "minimum-adjacent-swaps-to-make-a-valid-array",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Adjacent Swaps to Make a Valid Array",
    "example_output": "# Expected output for Minimum Adjacent Swaps to Make a Valid Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Adjacent Swaps to Make a Valid Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2341",
    "title": "Maximum Number of Pairs in Array",
    "titleSlug": "maximum-number-of-pairs-in-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Pairs in Array",
    "example_output": "# Expected output for Maximum Number of Pairs in Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Pairs in Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2342",
    "title": "Max Sum of a Pair With Equal Sum of Digits",
    "titleSlug": "max-sum-of-a-pair-with-equal-sum-of-digits",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Sum of a Pair With Equal Sum of Digits",
    "example_output": "# Expected output for Max Sum of a Pair With Equal Sum of Digits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Sum of a Pair With Equal Sum of Digits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2343",
    "title": "Query Kth Smallest Trimmed Number",
    "titleSlug": "query-kth-smallest-trimmed-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Radix Sort"
      },
      {
        "name": "Quickselect"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Query Kth Smallest Trimmed Number",
    "example_output": "# Expected output for Query Kth Smallest Trimmed Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Query Kth Smallest Trimmed Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2344",
    "title": "Minimum Deletions to Make Array Divisible",
    "titleSlug": "minimum-deletions-to-make-array-divisible",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Deletions to Make Array Divisible",
    "example_output": "# Expected output for Minimum Deletions to Make Array Divisible",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Deletions to Make Array Divisible\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2345",
    "title": "Finding the Number of Visible Mountains",
    "titleSlug": "finding-the-number-of-visible-mountains",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Finding the Number of Visible Mountains",
    "example_output": "# Expected output for Finding the Number of Visible Mountains",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Finding the Number of Visible Mountains\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2346",
    "title": "Compute the Rank as a Percentage",
    "titleSlug": "compute-the-rank-as-a-percentage",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Compute the Rank as a Percentage",
    "example_output": "# Expected output for Compute the Rank as a Percentage",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Compute the Rank as a Percentage\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2347",
    "title": "Best Poker Hand",
    "titleSlug": "best-poker-hand",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Best Poker Hand",
    "example_output": "# Expected output for Best Poker Hand",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Best Poker Hand\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2348",
    "title": "Number of Zero-Filled Subarrays",
    "titleSlug": "number-of-zero-filled-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Zero-Filled Subarrays",
    "example_output": "# Expected output for Number of Zero-Filled Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Zero-Filled Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2349",
    "title": "Design a Number Container System",
    "titleSlug": "design-a-number-container-system",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design a Number Container System",
    "example_output": "# Expected output for Design a Number Container System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design a Number Container System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2350",
    "title": "Shortest Impossible Sequence of Rolls",
    "titleSlug": "shortest-impossible-sequence-of-rolls",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Impossible Sequence of Rolls",
    "example_output": "# Expected output for Shortest Impossible Sequence of Rolls",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Impossible Sequence of Rolls\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2351",
    "title": "First Letter to Appear Twice",
    "titleSlug": "first-letter-to-appear-twice",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for First Letter to Appear Twice",
    "example_output": "# Expected output for First Letter to Appear Twice",
    "status": "TO_DO",
    "description": "Solve the problem titled \"First Letter to Appear Twice\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2352",
    "title": "Equal Row and Column Pairs",
    "titleSlug": "equal-row-and-column-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Equal Row and Column Pairs",
    "example_output": "# Expected output for Equal Row and Column Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Equal Row and Column Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2353",
    "title": "Design a Food Rating System",
    "titleSlug": "design-a-food-rating-system",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design a Food Rating System",
    "example_output": "# Expected output for Design a Food Rating System",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design a Food Rating System\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2354",
    "title": "Number of Excellent Pairs",
    "titleSlug": "number-of-excellent-pairs",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Excellent Pairs",
    "example_output": "# Expected output for Number of Excellent Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Excellent Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2355",
    "title": "Maximum Number of Books You Can Take",
    "titleSlug": "maximum-number-of-books-you-can-take",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Books You Can Take",
    "example_output": "# Expected output for Maximum Number of Books You Can Take",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Books You Can Take\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2356",
    "title": "Number of Unique Subjects Taught by Each Teacher",
    "titleSlug": "number-of-unique-subjects-taught-by-each-teacher",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Unique Subjects Taught by Each Teacher",
    "example_output": "# Expected output for Number of Unique Subjects Taught by Each Teacher",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Unique Subjects Taught by Each Teacher\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2357",
    "title": "Make Array Zero by Subtracting Equal Amounts",
    "titleSlug": "make-array-zero-by-subtracting-equal-amounts",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Array Zero by Subtracting Equal Amounts",
    "example_output": "# Expected output for Make Array Zero by Subtracting Equal Amounts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Array Zero by Subtracting Equal Amounts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2358",
    "title": "Maximum Number of Groups Entering a Competition",
    "titleSlug": "maximum-number-of-groups-entering-a-competition",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Groups Entering a Competition",
    "example_output": "# Expected output for Maximum Number of Groups Entering a Competition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Groups Entering a Competition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2359",
    "title": "Find Closest Node to Given Two Nodes",
    "titleSlug": "find-closest-node-to-given-two-nodes",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Closest Node to Given Two Nodes",
    "example_output": "# Expected output for Find Closest Node to Given Two Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Closest Node to Given Two Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2360",
    "title": "Longest Cycle in a Graph",
    "titleSlug": "longest-cycle-in-a-graph",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Cycle in a Graph",
    "example_output": "# Expected output for Longest Cycle in a Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Cycle in a Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2361",
    "title": "Minimum Costs Using the Train Line",
    "titleSlug": "minimum-costs-using-the-train-line",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Costs Using the Train Line",
    "example_output": "# Expected output for Minimum Costs Using the Train Line",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Costs Using the Train Line\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2362",
    "title": "Generate the Invoice",
    "titleSlug": "generate-the-invoice",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Generate the Invoice",
    "example_output": "# Expected output for Generate the Invoice",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Generate the Invoice\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2363",
    "title": "Merge Similar Items",
    "titleSlug": "merge-similar-items",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Similar Items",
    "example_output": "# Expected output for Merge Similar Items",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge Similar Items\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2364",
    "title": "Count Number of Bad Pairs",
    "titleSlug": "count-number-of-bad-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Bad Pairs",
    "example_output": "# Expected output for Count Number of Bad Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Bad Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2365",
    "title": "Task Scheduler II",
    "titleSlug": "task-scheduler-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Task Scheduler II",
    "example_output": "# Expected output for Task Scheduler II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Task Scheduler II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2366",
    "title": "Minimum Replacements to Sort the Array",
    "titleSlug": "minimum-replacements-to-sort-the-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Replacements to Sort the Array",
    "example_output": "# Expected output for Minimum Replacements to Sort the Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Replacements to Sort the Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2367",
    "title": "Number of Arithmetic Triplets",
    "titleSlug": "number-of-arithmetic-triplets",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Arithmetic Triplets",
    "example_output": "# Expected output for Number of Arithmetic Triplets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Arithmetic Triplets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2368",
    "title": "Reachable Nodes With Restrictions",
    "titleSlug": "reachable-nodes-with-restrictions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reachable Nodes With Restrictions",
    "example_output": "# Expected output for Reachable Nodes With Restrictions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reachable Nodes With Restrictions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2369",
    "title": "Check if There is a Valid Partition For The Array",
    "titleSlug": "check-if-there-is-a-valid-partition-for-the-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if There is a Valid Partition For The Array",
    "example_output": "# Expected output for Check if There is a Valid Partition For The Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if There is a Valid Partition For The Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2370",
    "title": "Longest Ideal Subsequence",
    "titleSlug": "longest-ideal-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Ideal Subsequence",
    "example_output": "# Expected output for Longest Ideal Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Ideal Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2371",
    "title": "Minimize Maximum Value in a Grid",
    "titleSlug": "minimize-maximum-value-in-a-grid",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Maximum Value in a Grid",
    "example_output": "# Expected output for Minimize Maximum Value in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Maximum Value in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2372",
    "title": "Calculate the Influence of Each Salesperson",
    "titleSlug": "calculate-the-influence-of-each-salesperson",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate the Influence of Each Salesperson",
    "example_output": "# Expected output for Calculate the Influence of Each Salesperson",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate the Influence of Each Salesperson\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2373",
    "title": "Largest Local Values in a Matrix",
    "titleSlug": "largest-local-values-in-a-matrix",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Local Values in a Matrix",
    "example_output": "# Expected output for Largest Local Values in a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Largest Local Values in a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2374",
    "title": "Node With Highest Edge Score",
    "titleSlug": "node-with-highest-edge-score",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Node With Highest Edge Score",
    "example_output": "# Expected output for Node With Highest Edge Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Node With Highest Edge Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2375",
    "title": "Construct Smallest Number From DI String",
    "titleSlug": "construct-smallest-number-from-di-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Smallest Number From DI String",
    "example_output": "# Expected output for Construct Smallest Number From DI String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct Smallest Number From DI String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2376",
    "title": "Count Special Integers",
    "titleSlug": "count-special-integers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Special Integers",
    "example_output": "# Expected output for Count Special Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Special Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2377",
    "title": "Sort the Olympic Table",
    "titleSlug": "sort-the-olympic-table",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort the Olympic Table",
    "example_output": "# Expected output for Sort the Olympic Table",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort the Olympic Table\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2378",
    "title": "Choose Edges to Maximize Score in a Tree",
    "titleSlug": "choose-edges-to-maximize-score-in-a-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Choose Edges to Maximize Score in a Tree",
    "example_output": "# Expected output for Choose Edges to Maximize Score in a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Choose Edges to Maximize Score in a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2379",
    "title": "Minimum Recolors to Get K Consecutive Black Blocks",
    "titleSlug": "minimum-recolors-to-get-k-consecutive-black-blocks",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Recolors to Get K Consecutive Black Blocks",
    "example_output": "# Expected output for Minimum Recolors to Get K Consecutive Black Blocks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Recolors to Get K Consecutive Black Blocks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2380",
    "title": "Time Needed to Rearrange a Binary String",
    "titleSlug": "time-needed-to-rearrange-a-binary-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Time Needed to Rearrange a Binary String",
    "example_output": "# Expected output for Time Needed to Rearrange a Binary String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Time Needed to Rearrange a Binary String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2381",
    "title": "Shifting Letters II",
    "titleSlug": "shifting-letters-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shifting Letters II",
    "example_output": "# Expected output for Shifting Letters II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shifting Letters II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2382",
    "title": "Maximum Segment Sum After Removals",
    "titleSlug": "maximum-segment-sum-after-removals",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Segment Sum After Removals",
    "example_output": "# Expected output for Maximum Segment Sum After Removals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Segment Sum After Removals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2383",
    "title": "Minimum Hours of Training to Win a Competition",
    "titleSlug": "minimum-hours-of-training-to-win-a-competition",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Hours of Training to Win a Competition",
    "example_output": "# Expected output for Minimum Hours of Training to Win a Competition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Hours of Training to Win a Competition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2384",
    "title": "Largest Palindromic Number",
    "titleSlug": "largest-palindromic-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Palindromic Number",
    "example_output": "# Expected output for Largest Palindromic Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Palindromic Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2385",
    "title": "Amount of Time for Binary Tree to Be Infected",
    "titleSlug": "amount-of-time-for-binary-tree-to-be-infected",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Amount of Time for Binary Tree to Be Infected",
    "example_output": "# Expected output for Amount of Time for Binary Tree to Be Infected",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Amount of Time for Binary Tree to Be Infected\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2386",
    "title": "Find the K-Sum of an Array",
    "titleSlug": "find-the-k-sum-of-an-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the K-Sum of an Array",
    "example_output": "# Expected output for Find the K-Sum of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the K-Sum of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2387",
    "title": "Median of a Row Wise Sorted Matrix",
    "titleSlug": "median-of-a-row-wise-sorted-matrix",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Median of a Row Wise Sorted Matrix",
    "example_output": "# Expected output for Median of a Row Wise Sorted Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Median of a Row Wise Sorted Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2388",
    "title": "Change Null Values in a Table to the Previous Value",
    "titleSlug": "change-null-values-in-a-table-to-the-previous-value",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Change Null Values in a Table to the Previous Value",
    "example_output": "# Expected output for Change Null Values in a Table to the Previous Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Change Null Values in a Table to the Previous Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2389",
    "title": "Longest Subsequence With Limited Sum",
    "titleSlug": "longest-subsequence-with-limited-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Subsequence With Limited Sum",
    "example_output": "# Expected output for Longest Subsequence With Limited Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Subsequence With Limited Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2390",
    "title": "Removing Stars From a String",
    "titleSlug": "removing-stars-from-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Removing Stars From a String",
    "example_output": "# Expected output for Removing Stars From a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Removing Stars From a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2391",
    "title": "Minimum Amount of Time to Collect Garbage",
    "titleSlug": "minimum-amount-of-time-to-collect-garbage",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Amount of Time to Collect Garbage",
    "example_output": "# Expected output for Minimum Amount of Time to Collect Garbage",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Amount of Time to Collect Garbage\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2392",
    "title": "Build a Matrix With Conditions",
    "titleSlug": "build-a-matrix-with-conditions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Build a Matrix With Conditions",
    "example_output": "# Expected output for Build a Matrix With Conditions",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Build a Matrix With Conditions\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2393",
    "title": "Count Strictly Increasing Subarrays",
    "titleSlug": "count-strictly-increasing-subarrays",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Strictly Increasing Subarrays",
    "example_output": "# Expected output for Count Strictly Increasing Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Strictly Increasing Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2394",
    "title": "Employees With Deductions",
    "titleSlug": "employees-with-deductions",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Employees With Deductions",
    "example_output": "# Expected output for Employees With Deductions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Employees With Deductions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2395",
    "title": "Find Subarrays With Equal Sum",
    "titleSlug": "find-subarrays-with-equal-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Subarrays With Equal Sum",
    "example_output": "# Expected output for Find Subarrays With Equal Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Subarrays With Equal Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2396",
    "title": "Strictly Palindromic Number",
    "titleSlug": "strictly-palindromic-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Brainteaser"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Strictly Palindromic Number",
    "example_output": "# Expected output for Strictly Palindromic Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Strictly Palindromic Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2397",
    "title": "Maximum Rows Covered by Columns",
    "titleSlug": "maximum-rows-covered-by-columns",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Rows Covered by Columns",
    "example_output": "# Expected output for Maximum Rows Covered by Columns",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Rows Covered by Columns\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2398",
    "title": "Maximum Number of Robots Within Budget",
    "titleSlug": "maximum-number-of-robots-within-budget",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Prefix Sum"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Robots Within Budget",
    "example_output": "# Expected output for Maximum Number of Robots Within Budget",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Robots Within Budget\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2399",
    "title": "Check Distances Between Same Letters",
    "titleSlug": "check-distances-between-same-letters",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check Distances Between Same Letters",
    "example_output": "# Expected output for Check Distances Between Same Letters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check Distances Between Same Letters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2400",
    "title": "Number of Ways to Reach a Position After Exactly k Steps",
    "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Reach a Position After Exactly k Steps",
    "example_output": "# Expected output for Number of Ways to Reach a Position After Exactly k Steps",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Reach a Position After Exactly k Steps\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2401",
    "title": "Longest Nice Subarray",
    "titleSlug": "longest-nice-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Nice Subarray",
    "example_output": "# Expected output for Longest Nice Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Nice Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2402",
    "title": "Meeting Rooms III",
    "titleSlug": "meeting-rooms-iii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Meeting Rooms III",
    "example_output": "# Expected output for Meeting Rooms III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Meeting Rooms III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2403",
    "title": "Minimum Time to Kill All Monsters",
    "titleSlug": "minimum-time-to-kill-all-monsters",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Kill All Monsters",
    "example_output": "# Expected output for Minimum Time to Kill All Monsters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Kill All Monsters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2404",
    "title": "Most Frequent Even Element",
    "titleSlug": "most-frequent-even-element",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Frequent Even Element",
    "example_output": "# Expected output for Most Frequent Even Element",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Frequent Even Element\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2405",
    "title": "Optimal Partition of String",
    "titleSlug": "optimal-partition-of-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Optimal Partition of String",
    "example_output": "# Expected output for Optimal Partition of String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Optimal Partition of String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2406",
    "title": "Divide Intervals Into Minimum Number of Groups",
    "titleSlug": "divide-intervals-into-minimum-number-of-groups",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Intervals Into Minimum Number of Groups",
    "example_output": "# Expected output for Divide Intervals Into Minimum Number of Groups",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide Intervals Into Minimum Number of Groups\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2407",
    "title": "Longest Increasing Subsequence II",
    "titleSlug": "longest-increasing-subsequence-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Increasing Subsequence II",
    "example_output": "# Expected output for Longest Increasing Subsequence II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Increasing Subsequence II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2408",
    "title": "Design SQL",
    "titleSlug": "design-sql",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design SQL",
    "example_output": "# Expected output for Design SQL",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design SQL\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2409",
    "title": "Count Days Spent Together",
    "titleSlug": "count-days-spent-together",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Days Spent Together",
    "example_output": "# Expected output for Count Days Spent Together",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Days Spent Together\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2410",
    "title": "Maximum Matching of Players With Trainers",
    "titleSlug": "maximum-matching-of-players-with-trainers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Matching of Players With Trainers",
    "example_output": "# Expected output for Maximum Matching of Players With Trainers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Matching of Players With Trainers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2411",
    "title": "Smallest Subarrays With Maximum Bitwise OR",
    "titleSlug": "smallest-subarrays-with-maximum-bitwise-or",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Subarrays With Maximum Bitwise OR",
    "example_output": "# Expected output for Smallest Subarrays With Maximum Bitwise OR",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Subarrays With Maximum Bitwise OR\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2412",
    "title": "Minimum Money Required Before Transactions",
    "titleSlug": "minimum-money-required-before-transactions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Money Required Before Transactions",
    "example_output": "# Expected output for Minimum Money Required Before Transactions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Money Required Before Transactions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2413",
    "title": "Smallest Even Multiple",
    "titleSlug": "smallest-even-multiple",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Even Multiple",
    "example_output": "# Expected output for Smallest Even Multiple",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Even Multiple\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2414",
    "title": "Length of the Longest Alphabetical Continuous Substring",
    "titleSlug": "length-of-the-longest-alphabetical-continuous-substring",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Length of the Longest Alphabetical Continuous Substring",
    "example_output": "# Expected output for Length of the Longest Alphabetical Continuous Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Length of the Longest Alphabetical Continuous Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2415",
    "title": "Reverse Odd Levels of Binary Tree",
    "titleSlug": "reverse-odd-levels-of-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reverse Odd Levels of Binary Tree",
    "example_output": "# Expected output for Reverse Odd Levels of Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reverse Odd Levels of Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2416",
    "title": "Sum of Prefix Scores of Strings",
    "titleSlug": "sum-of-prefix-scores-of-strings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Prefix Scores of Strings",
    "example_output": "# Expected output for Sum of Prefix Scores of Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Prefix Scores of Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2417",
    "title": "Closest Fair Integer",
    "titleSlug": "closest-fair-integer",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Fair Integer",
    "example_output": "# Expected output for Closest Fair Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Fair Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2418",
    "title": "Sort the People",
    "titleSlug": "sort-the-people",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort the People",
    "example_output": "# Expected output for Sort the People",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort the People\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2419",
    "title": "Longest Subarray With Maximum Bitwise AND",
    "titleSlug": "longest-subarray-with-maximum-bitwise-and",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Brainteaser"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Subarray With Maximum Bitwise AND",
    "example_output": "# Expected output for Longest Subarray With Maximum Bitwise AND",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Subarray With Maximum Bitwise AND\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2420",
    "title": "Find All Good Indices",
    "titleSlug": "find-all-good-indices",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find All Good Indices",
    "example_output": "# Expected output for Find All Good Indices",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find All Good Indices\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2421",
    "title": "Number of Good Paths",
    "titleSlug": "number-of-good-paths",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Good Paths",
    "example_output": "# Expected output for Number of Good Paths",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Good Paths\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2422",
    "title": "Merge Operations to Turn Array Into a Palindrome",
    "titleSlug": "merge-operations-to-turn-array-into-a-palindrome",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Operations to Turn Array Into a Palindrome",
    "example_output": "# Expected output for Merge Operations to Turn Array Into a Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Merge Operations to Turn Array Into a Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2423",
    "title": "Remove Letter To Equalize Frequency",
    "titleSlug": "remove-letter-to-equalize-frequency",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Letter To Equalize Frequency",
    "example_output": "# Expected output for Remove Letter To Equalize Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Letter To Equalize Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2424",
    "title": "Longest Uploaded Prefix",
    "titleSlug": "longest-uploaded-prefix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Design"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Uploaded Prefix",
    "example_output": "# Expected output for Longest Uploaded Prefix",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Uploaded Prefix\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2425",
    "title": "Bitwise XOR of All Pairings",
    "titleSlug": "bitwise-xor-of-all-pairings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Brainteaser"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bitwise XOR of All Pairings",
    "example_output": "# Expected output for Bitwise XOR of All Pairings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bitwise XOR of All Pairings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2426",
    "title": "Number of Pairs Satisfying Inequality",
    "titleSlug": "number-of-pairs-satisfying-inequality",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Pairs Satisfying Inequality",
    "example_output": "# Expected output for Number of Pairs Satisfying Inequality",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Pairs Satisfying Inequality\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2427",
    "title": "Number of Common Factors",
    "titleSlug": "number-of-common-factors",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Common Factors",
    "example_output": "# Expected output for Number of Common Factors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Common Factors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2428",
    "title": "Maximum Sum of an Hourglass",
    "titleSlug": "maximum-sum-of-an-hourglass",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum of an Hourglass",
    "example_output": "# Expected output for Maximum Sum of an Hourglass",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum of an Hourglass\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2429",
    "title": "Minimize XOR",
    "titleSlug": "minimize-xor",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize XOR",
    "example_output": "# Expected output for Minimize XOR",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize XOR\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2430",
    "title": "Maximum Deletions on a String",
    "titleSlug": "maximum-deletions-on-a-string",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Rolling Hash"
      },
      {
        "name": "String Matching"
      },
      {
        "name": "Hash Function"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Deletions on a String",
    "example_output": "# Expected output for Maximum Deletions on a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Deletions on a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2431",
    "title": "Maximize Total Tastiness of Purchased Fruits",
    "titleSlug": "maximize-total-tastiness-of-purchased-fruits",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Total Tastiness of Purchased Fruits",
    "example_output": "# Expected output for Maximize Total Tastiness of Purchased Fruits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Total Tastiness of Purchased Fruits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2432",
    "title": "The Employee That Worked on the Longest Task",
    "titleSlug": "the-employee-that-worked-on-the-longest-task",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Employee That Worked on the Longest Task",
    "example_output": "# Expected output for The Employee That Worked on the Longest Task",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Employee That Worked on the Longest Task\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2433",
    "title": "Find The Original Array of Prefix Xor",
    "titleSlug": "find-the-original-array-of-prefix-xor",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find The Original Array of Prefix Xor",
    "example_output": "# Expected output for Find The Original Array of Prefix Xor",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find The Original Array of Prefix Xor\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2434",
    "title": "Using a Robot to Print the Lexicographically Smallest String",
    "titleSlug": "using-a-robot-to-print-the-lexicographically-smallest-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Using a Robot to Print the Lexicographically Smallest String",
    "example_output": "# Expected output for Using a Robot to Print the Lexicographically Smallest String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Using a Robot to Print the Lexicographically Smallest String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2435",
    "title": "Paths in Matrix Whose Sum Is Divisible by K",
    "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Paths in Matrix Whose Sum Is Divisible by K",
    "example_output": "# Expected output for Paths in Matrix Whose Sum Is Divisible by K",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Paths in Matrix Whose Sum Is Divisible by K\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2436",
    "title": "Minimum Split Into Subarrays With GCD Greater Than One",
    "titleSlug": "minimum-split-into-subarrays-with-gcd-greater-than-one",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Split Into Subarrays With GCD Greater Than One",
    "example_output": "# Expected output for Minimum Split Into Subarrays With GCD Greater Than One",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Split Into Subarrays With GCD Greater Than One\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2437",
    "title": "Number of Valid Clock Times",
    "titleSlug": "number-of-valid-clock-times",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Valid Clock Times",
    "example_output": "# Expected output for Number of Valid Clock Times",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Valid Clock Times\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2438",
    "title": "Range Product Queries of Powers",
    "titleSlug": "range-product-queries-of-powers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Range Product Queries of Powers",
    "example_output": "# Expected output for Range Product Queries of Powers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Range Product Queries of Powers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2439",
    "title": "Minimize Maximum of Array",
    "titleSlug": "minimize-maximum-of-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize Maximum of Array",
    "example_output": "# Expected output for Minimize Maximum of Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize Maximum of Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2440",
    "title": "Create Components With Same Value",
    "titleSlug": "create-components-with-same-value",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create Components With Same Value",
    "example_output": "# Expected output for Create Components With Same Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create Components With Same Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2441",
    "title": "Largest Positive Integer That Exists With Its Negative",
    "titleSlug": "largest-positive-integer-that-exists-with-its-negative",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Positive Integer That Exists With Its Negative",
    "example_output": "# Expected output for Largest Positive Integer That Exists With Its Negative",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Positive Integer That Exists With Its Negative\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2442",
    "title": "Count Number of Distinct Integers After Reverse Operations",
    "titleSlug": "count-number-of-distinct-integers-after-reverse-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Distinct Integers After Reverse Operations",
    "example_output": "# Expected output for Count Number of Distinct Integers After Reverse Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Distinct Integers After Reverse Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2443",
    "title": "Sum of Number and Its Reverse",
    "titleSlug": "sum-of-number-and-its-reverse",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Number and Its Reverse",
    "example_output": "# Expected output for Sum of Number and Its Reverse",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Number and Its Reverse\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2444",
    "title": "Count Subarrays With Fixed Bounds",
    "titleSlug": "count-subarrays-with-fixed-bounds",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Subarrays With Fixed Bounds",
    "example_output": "# Expected output for Count Subarrays With Fixed Bounds",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Subarrays With Fixed Bounds\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2445",
    "title": "Number of Nodes With Value One",
    "titleSlug": "number-of-nodes-with-value-one",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Nodes With Value One",
    "example_output": "# Expected output for Number of Nodes With Value One",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Nodes With Value One\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2446",
    "title": "Determine if Two Events Have Conflict",
    "titleSlug": "determine-if-two-events-have-conflict",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Determine if Two Events Have Conflict",
    "example_output": "# Expected output for Determine if Two Events Have Conflict",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Determine if Two Events Have Conflict\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2447",
    "title": "Number of Subarrays With GCD Equal to K",
    "titleSlug": "number-of-subarrays-with-gcd-equal-to-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Subarrays With GCD Equal to K",
    "example_output": "# Expected output for Number of Subarrays With GCD Equal to K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Subarrays With GCD Equal to K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2448",
    "title": "Minimum Cost to Make Array Equal",
    "titleSlug": "minimum-cost-to-make-array-equal",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Make Array Equal",
    "example_output": "# Expected output for Minimum Cost to Make Array Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Make Array Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2449",
    "title": "Minimum Number of Operations to Make Arrays Similar",
    "titleSlug": "minimum-number-of-operations-to-make-arrays-similar",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Make Arrays Similar",
    "example_output": "# Expected output for Minimum Number of Operations to Make Arrays Similar",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Make Arrays Similar\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2450",
    "title": "Number of Distinct Binary Strings After Applying Operations",
    "titleSlug": "number-of-distinct-binary-strings-after-applying-operations",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Distinct Binary Strings After Applying Operations",
    "example_output": "# Expected output for Number of Distinct Binary Strings After Applying Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Distinct Binary Strings After Applying Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2451",
    "title": "Odd String Difference",
    "titleSlug": "odd-string-difference",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Odd String Difference",
    "example_output": "# Expected output for Odd String Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Odd String Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2452",
    "title": "Words Within Two Edits of Dictionary",
    "titleSlug": "words-within-two-edits-of-dictionary",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Words Within Two Edits of Dictionary",
    "example_output": "# Expected output for Words Within Two Edits of Dictionary",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Words Within Two Edits of Dictionary\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2453",
    "title": "Destroy Sequential Targets",
    "titleSlug": "destroy-sequential-targets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Destroy Sequential Targets",
    "example_output": "# Expected output for Destroy Sequential Targets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Destroy Sequential Targets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2454",
    "title": "Next Greater Element IV",
    "titleSlug": "next-greater-element-iv",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Greater Element IV",
    "example_output": "# Expected output for Next Greater Element IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Next Greater Element IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2455",
    "title": "Average Value of Even Numbers That Are Divisible by Three",
    "titleSlug": "average-value-of-even-numbers-that-are-divisible-by-three",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Average Value of Even Numbers That Are Divisible by Three",
    "example_output": "# Expected output for Average Value of Even Numbers That Are Divisible by Three",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Average Value of Even Numbers That Are Divisible by Three\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2456",
    "title": "Most Popular Video Creator",
    "titleSlug": "most-popular-video-creator",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Popular Video Creator",
    "example_output": "# Expected output for Most Popular Video Creator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Popular Video Creator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2457",
    "title": "Minimum Addition to Make Integer Beautiful",
    "titleSlug": "minimum-addition-to-make-integer-beautiful",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Addition to Make Integer Beautiful",
    "example_output": "# Expected output for Minimum Addition to Make Integer Beautiful",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Addition to Make Integer Beautiful\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2458",
    "title": "Height of Binary Tree After Subtree Removal Queries",
    "titleSlug": "height-of-binary-tree-after-subtree-removal-queries",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Height of Binary Tree After Subtree Removal Queries",
    "example_output": "# Expected output for Height of Binary Tree After Subtree Removal Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Height of Binary Tree After Subtree Removal Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2459",
    "title": "Sort Array by Moving Items to Empty Space",
    "titleSlug": "sort-array-by-moving-items-to-empty-space",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Array by Moving Items to Empty Space",
    "example_output": "# Expected output for Sort Array by Moving Items to Empty Space",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Array by Moving Items to Empty Space\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2460",
    "title": "Apply Operations to an Array",
    "titleSlug": "apply-operations-to-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Operations to an Array",
    "example_output": "# Expected output for Apply Operations to an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Operations to an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2461",
    "title": "Maximum Sum of Distinct Subarrays With Length K",
    "titleSlug": "maximum-sum-of-distinct-subarrays-with-length-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum of Distinct Subarrays With Length K",
    "example_output": "# Expected output for Maximum Sum of Distinct Subarrays With Length K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum of Distinct Subarrays With Length K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2462",
    "title": "Total Cost to Hire K Workers",
    "titleSlug": "total-cost-to-hire-k-workers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Total Cost to Hire K Workers",
    "example_output": "# Expected output for Total Cost to Hire K Workers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Total Cost to Hire K Workers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2463",
    "title": "Minimum Total Distance Traveled",
    "titleSlug": "minimum-total-distance-traveled",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Total Distance Traveled",
    "example_output": "# Expected output for Minimum Total Distance Traveled",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Total Distance Traveled\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2464",
    "title": "Minimum Subarrays in a Valid Split",
    "titleSlug": "minimum-subarrays-in-a-valid-split",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Subarrays in a Valid Split",
    "example_output": "# Expected output for Minimum Subarrays in a Valid Split",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Subarrays in a Valid Split\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2465",
    "title": "Number of Distinct Averages",
    "titleSlug": "number-of-distinct-averages",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Distinct Averages",
    "example_output": "# Expected output for Number of Distinct Averages",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Distinct Averages\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2466",
    "title": "Count Ways To Build Good Strings",
    "titleSlug": "count-ways-to-build-good-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Ways To Build Good Strings",
    "example_output": "# Expected output for Count Ways To Build Good Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Ways To Build Good Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2467",
    "title": "Most Profitable Path in a Tree",
    "titleSlug": "most-profitable-path-in-a-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Profitable Path in a Tree",
    "example_output": "# Expected output for Most Profitable Path in a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Profitable Path in a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2468",
    "title": "Split Message Based on Limit",
    "titleSlug": "split-message-based-on-limit",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Message Based on Limit",
    "example_output": "# Expected output for Split Message Based on Limit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Message Based on Limit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2469",
    "title": "Convert the Temperature",
    "titleSlug": "convert-the-temperature",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert the Temperature",
    "example_output": "# Expected output for Convert the Temperature",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert the Temperature\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2470",
    "title": "Number of Subarrays With LCM Equal to K",
    "titleSlug": "number-of-subarrays-with-lcm-equal-to-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Subarrays With LCM Equal to K",
    "example_output": "# Expected output for Number of Subarrays With LCM Equal to K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Subarrays With LCM Equal to K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2471",
    "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
    "titleSlug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Sort a Binary Tree by Level",
    "example_output": "# Expected output for Minimum Number of Operations to Sort a Binary Tree by Level",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Sort a Binary Tree by Level\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2472",
    "title": "Maximum Number of Non-overlapping Palindrome Substrings",
    "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Non-overlapping Palindrome Substrings",
    "example_output": "# Expected output for Maximum Number of Non-overlapping Palindrome Substrings",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Maximum Number of Non-overlapping Palindrome Substrings\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2473",
    "title": "Minimum Cost to Buy Apples",
    "titleSlug": "minimum-cost-to-buy-apples",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Buy Apples",
    "example_output": "# Expected output for Minimum Cost to Buy Apples",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Buy Apples\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2474",
    "title": "Customers With Strictly Increasing Purchases",
    "titleSlug": "customers-with-strictly-increasing-purchases",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Customers With Strictly Increasing Purchases",
    "example_output": "# Expected output for Customers With Strictly Increasing Purchases",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Customers With Strictly Increasing Purchases\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2475",
    "title": "Number of Unequal Triplets in Array",
    "titleSlug": "number-of-unequal-triplets-in-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Unequal Triplets in Array",
    "example_output": "# Expected output for Number of Unequal Triplets in Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Unequal Triplets in Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2476",
    "title": "Closest Nodes Queries in a Binary Search Tree",
    "titleSlug": "closest-nodes-queries-in-a-binary-search-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Search Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Nodes Queries in a Binary Search Tree",
    "example_output": "# Expected output for Closest Nodes Queries in a Binary Search Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Nodes Queries in a Binary Search Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2477",
    "title": "Minimum Fuel Cost to Report to the Capital",
    "titleSlug": "minimum-fuel-cost-to-report-to-the-capital",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Fuel Cost to Report to the Capital",
    "example_output": "# Expected output for Minimum Fuel Cost to Report to the Capital",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Fuel Cost to Report to the Capital\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2478",
    "title": "Number of Beautiful Partitions",
    "titleSlug": "number-of-beautiful-partitions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Beautiful Partitions",
    "example_output": "# Expected output for Number of Beautiful Partitions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Beautiful Partitions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2479",
    "title": "Maximum XOR of Two Non-Overlapping Subtrees",
    "titleSlug": "maximum-xor-of-two-non-overlapping-subtrees",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum XOR of Two Non-Overlapping Subtrees",
    "example_output": "# Expected output for Maximum XOR of Two Non-Overlapping Subtrees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum XOR of Two Non-Overlapping Subtrees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2480",
    "title": "Form a Chemical Bond",
    "titleSlug": "form-a-chemical-bond",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Form a Chemical Bond",
    "example_output": "# Expected output for Form a Chemical Bond",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Form a Chemical Bond\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2481",
    "title": "Minimum Cuts to Divide a Circle",
    "titleSlug": "minimum-cuts-to-divide-a-circle",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Geometry"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cuts to Divide a Circle",
    "example_output": "# Expected output for Minimum Cuts to Divide a Circle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cuts to Divide a Circle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2482",
    "title": "Difference Between Ones and Zeros in Row and Column",
    "titleSlug": "difference-between-ones-and-zeros-in-row-and-column",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Difference Between Ones and Zeros in Row and Column",
    "example_output": "# Expected output for Difference Between Ones and Zeros in Row and Column",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Difference Between Ones and Zeros in Row and Column\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2483",
    "title": "Minimum Penalty for a Shop",
    "titleSlug": "minimum-penalty-for-a-shop",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Penalty for a Shop",
    "example_output": "# Expected output for Minimum Penalty for a Shop",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Penalty for a Shop\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2484",
    "title": "Count Palindromic Subsequences",
    "titleSlug": "count-palindromic-subsequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Palindromic Subsequences",
    "example_output": "# Expected output for Count Palindromic Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Palindromic Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2485",
    "title": "Find the Pivot Integer",
    "titleSlug": "find-the-pivot-integer",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Pivot Integer",
    "example_output": "# Expected output for Find the Pivot Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Pivot Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2486",
    "title": "Append Characters to String to Make Subsequence",
    "titleSlug": "append-characters-to-string-to-make-subsequence",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Append Characters to String to Make Subsequence",
    "example_output": "# Expected output for Append Characters to String to Make Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Append Characters to String to Make Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2487",
    "title": "Remove Nodes From Linked List",
    "titleSlug": "remove-nodes-from-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Recursion"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Nodes From Linked List",
    "example_output": "# Expected output for Remove Nodes From Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Nodes From Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2488",
    "title": "Count Subarrays With Median K",
    "titleSlug": "count-subarrays-with-median-k",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Subarrays With Median K",
    "example_output": "# Expected output for Count Subarrays With Median K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Subarrays With Median K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2489",
    "title": "Number of Substrings With Fixed Ratio",
    "titleSlug": "number-of-substrings-with-fixed-ratio",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Substrings With Fixed Ratio",
    "example_output": "# Expected output for Number of Substrings With Fixed Ratio",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Substrings With Fixed Ratio\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2490",
    "title": "Circular Sentence",
    "titleSlug": "circular-sentence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Circular Sentence",
    "example_output": "# Expected output for Circular Sentence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Circular Sentence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2491",
    "title": "Divide Players Into Teams of Equal Skill",
    "titleSlug": "divide-players-into-teams-of-equal-skill",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Players Into Teams of Equal Skill",
    "example_output": "# Expected output for Divide Players Into Teams of Equal Skill",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide Players Into Teams of Equal Skill\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2492",
    "title": "Minimum Score of a Path Between Two Cities",
    "titleSlug": "minimum-score-of-a-path-between-two-cities",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Score of a Path Between Two Cities",
    "example_output": "# Expected output for Minimum Score of a Path Between Two Cities",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Score of a Path Between Two Cities\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2493",
    "title": "Divide Nodes Into the Maximum Number of Groups",
    "titleSlug": "divide-nodes-into-the-maximum-number-of-groups",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Nodes Into the Maximum Number of Groups",
    "example_output": "# Expected output for Divide Nodes Into the Maximum Number of Groups",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide Nodes Into the Maximum Number of Groups\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2494",
    "title": "Merge Overlapping Events in the Same Hall",
    "titleSlug": "merge-overlapping-events-in-the-same-hall",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Overlapping Events in the Same Hall",
    "example_output": "# Expected output for Merge Overlapping Events in the Same Hall",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge Overlapping Events in the Same Hall\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2495",
    "title": "Number of Subarrays Having Even Product",
    "titleSlug": "number-of-subarrays-having-even-product",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Subarrays Having Even Product",
    "example_output": "# Expected output for Number of Subarrays Having Even Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Subarrays Having Even Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2496",
    "title": "Maximum Value of a String in an Array",
    "titleSlug": "maximum-value-of-a-string-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Value of a String in an Array",
    "example_output": "# Expected output for Maximum Value of a String in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Value of a String in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2497",
    "title": "Maximum Star Sum of a Graph",
    "titleSlug": "maximum-star-sum-of-a-graph",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Star Sum of a Graph",
    "example_output": "# Expected output for Maximum Star Sum of a Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Star Sum of a Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2498",
    "title": "Frog Jump II",
    "titleSlug": "frog-jump-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Frog Jump II",
    "example_output": "# Expected output for Frog Jump II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Frog Jump II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2499",
    "title": "Minimum Total Cost to Make Arrays Unequal",
    "titleSlug": "minimum-total-cost-to-make-arrays-unequal",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Total Cost to Make Arrays Unequal",
    "example_output": "# Expected output for Minimum Total Cost to Make Arrays Unequal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Total Cost to Make Arrays Unequal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2500",
    "title": "Delete Greatest Value in Each Row",
    "titleSlug": "delete-greatest-value-in-each-row",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delete Greatest Value in Each Row",
    "example_output": "# Expected output for Delete Greatest Value in Each Row",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delete Greatest Value in Each Row\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2501",
    "title": "Longest Square Streak in an Array",
    "titleSlug": "longest-square-streak-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Square Streak in an Array",
    "example_output": "# Expected output for Longest Square Streak in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Square Streak in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2502",
    "title": "Design Memory Allocator",
    "titleSlug": "design-memory-allocator",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Memory Allocator",
    "example_output": "# Expected output for Design Memory Allocator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Memory Allocator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2503",
    "title": "Maximum Number of Points From Grid Queries",
    "titleSlug": "maximum-number-of-points-from-grid-queries",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Points From Grid Queries",
    "example_output": "# Expected output for Maximum Number of Points From Grid Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Points From Grid Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2504",
    "title": "Concatenate the Name and the Profession",
    "titleSlug": "concatenate-the-name-and-the-profession",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Concatenate the Name and the Profession",
    "example_output": "# Expected output for Concatenate the Name and the Profession",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Concatenate the Name and the Profession\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2505",
    "title": "Bitwise OR of All Subsequence Sums",
    "titleSlug": "bitwise-or-of-all-subsequence-sums",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bitwise OR of All Subsequence Sums",
    "example_output": "# Expected output for Bitwise OR of All Subsequence Sums",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bitwise OR of All Subsequence Sums\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2506",
    "title": "Count Pairs Of Similar Strings",
    "titleSlug": "count-pairs-of-similar-strings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Pairs Of Similar Strings",
    "example_output": "# Expected output for Count Pairs Of Similar Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Pairs Of Similar Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2507",
    "title": "Smallest Value After Replacing With Sum of Prime Factors",
    "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Value After Replacing With Sum of Prime Factors",
    "example_output": "# Expected output for Smallest Value After Replacing With Sum of Prime Factors",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Value After Replacing With Sum of Prime Factors\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2508",
    "title": "Add Edges to Make Degrees of All Nodes Even",
    "titleSlug": "add-edges-to-make-degrees-of-all-nodes-even",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Edges to Make Degrees of All Nodes Even",
    "example_output": "# Expected output for Add Edges to Make Degrees of All Nodes Even",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Edges to Make Degrees of All Nodes Even\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2509",
    "title": "Cycle Length Queries in a Tree",
    "titleSlug": "cycle-length-queries-in-a-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cycle Length Queries in a Tree",
    "example_output": "# Expected output for Cycle Length Queries in a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cycle Length Queries in a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2510",
    "title": "Check if There is a Path With Equal Number of 0's And 1's",
    "titleSlug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if There is a Path With Equal Number of 0's And 1's",
    "example_output": "# Expected output for Check if There is a Path With Equal Number of 0's And 1's",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if There is a Path With Equal Number of 0's And 1's\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2511",
    "title": "Maximum Enemy Forts That Can Be Captured",
    "titleSlug": "maximum-enemy-forts-that-can-be-captured",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Enemy Forts That Can Be Captured",
    "example_output": "# Expected output for Maximum Enemy Forts That Can Be Captured",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Enemy Forts That Can Be Captured\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2512",
    "title": "Reward Top K Students",
    "titleSlug": "reward-top-k-students",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reward Top K Students",
    "example_output": "# Expected output for Reward Top K Students",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reward Top K Students\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2513",
    "title": "Minimize the Maximum of Two Arrays",
    "titleSlug": "minimize-the-maximum-of-two-arrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize the Maximum of Two Arrays",
    "example_output": "# Expected output for Minimize the Maximum of Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize the Maximum of Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2514",
    "title": "Count Anagrams",
    "titleSlug": "count-anagrams",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Anagrams",
    "example_output": "# Expected output for Count Anagrams",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Anagrams\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2515",
    "title": "Shortest Distance to Target String in a Circular Array",
    "titleSlug": "shortest-distance-to-target-string-in-a-circular-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Distance to Target String in a Circular Array",
    "example_output": "# Expected output for Shortest Distance to Target String in a Circular Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Distance to Target String in a Circular Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2516",
    "title": "Take K of Each Character From Left and Right",
    "titleSlug": "take-k-of-each-character-from-left-and-right",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Take K of Each Character From Left and Right",
    "example_output": "# Expected output for Take K of Each Character From Left and Right",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Take K of Each Character From Left and Right\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2517",
    "title": "Maximum Tastiness of Candy Basket",
    "titleSlug": "maximum-tastiness-of-candy-basket",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Tastiness of Candy Basket",
    "example_output": "# Expected output for Maximum Tastiness of Candy Basket",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Tastiness of Candy Basket\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2518",
    "title": "Number of Great Partitions",
    "titleSlug": "number-of-great-partitions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Great Partitions",
    "example_output": "# Expected output for Number of Great Partitions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Great Partitions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2519",
    "title": "Count the Number of K-Big Indices",
    "titleSlug": "count-the-number-of-k-big-indices",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Merge Sort"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of K-Big Indices",
    "example_output": "# Expected output for Count the Number of K-Big Indices",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of K-Big Indices\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2520",
    "title": "Count the Digits That Divide a Number",
    "titleSlug": "count-the-digits-that-divide-a-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Digits That Divide a Number",
    "example_output": "# Expected output for Count the Digits That Divide a Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Digits That Divide a Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2521",
    "title": "Distinct Prime Factors of Product of Array",
    "titleSlug": "distinct-prime-factors-of-product-of-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distinct Prime Factors of Product of Array",
    "example_output": "# Expected output for Distinct Prime Factors of Product of Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distinct Prime Factors of Product of Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2522",
    "title": "Partition String Into Substrings With Values at Most K",
    "titleSlug": "partition-string-into-substrings-with-values-at-most-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition String Into Substrings With Values at Most K",
    "example_output": "# Expected output for Partition String Into Substrings With Values at Most K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition String Into Substrings With Values at Most K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2523",
    "title": "Closest Prime Numbers in Range",
    "titleSlug": "closest-prime-numbers-in-range",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Closest Prime Numbers in Range",
    "example_output": "# Expected output for Closest Prime Numbers in Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Closest Prime Numbers in Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2524",
    "title": "Maximum Frequency Score of a Subarray",
    "titleSlug": "maximum-frequency-score-of-a-subarray",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Frequency Score of a Subarray",
    "example_output": "# Expected output for Maximum Frequency Score of a Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Frequency Score of a Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2525",
    "title": "Categorize Box According to Criteria",
    "titleSlug": "categorize-box-according-to-criteria",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Categorize Box According to Criteria",
    "example_output": "# Expected output for Categorize Box According to Criteria",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Categorize Box According to Criteria\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2526",
    "title": "Find Consecutive Integers from a Data Stream",
    "titleSlug": "find-consecutive-integers-from-a-data-stream",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Data Stream"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Consecutive Integers from a Data Stream",
    "example_output": "# Expected output for Find Consecutive Integers from a Data Stream",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Consecutive Integers from a Data Stream\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2527",
    "title": "Find Xor-Beauty of Array",
    "titleSlug": "find-xor-beauty-of-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Xor-Beauty of Array",
    "example_output": "# Expected output for Find Xor-Beauty of Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Xor-Beauty of Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2528",
    "title": "Maximize the Minimum Powered City",
    "titleSlug": "maximize-the-minimum-powered-city",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize the Minimum Powered City",
    "example_output": "# Expected output for Maximize the Minimum Powered City",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize the Minimum Powered City\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2529",
    "title": "Maximum Count of Positive Integer and Negative Integer",
    "titleSlug": "maximum-count-of-positive-integer-and-negative-integer",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Count of Positive Integer and Negative Integer",
    "example_output": "# Expected output for Maximum Count of Positive Integer and Negative Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Count of Positive Integer and Negative Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2530",
    "title": "Maximal Score After Applying K Operations",
    "titleSlug": "maximal-score-after-applying-k-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximal Score After Applying K Operations",
    "example_output": "# Expected output for Maximal Score After Applying K Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximal Score After Applying K Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2531",
    "title": "Make Number of Distinct Characters Equal",
    "titleSlug": "make-number-of-distinct-characters-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Number of Distinct Characters Equal",
    "example_output": "# Expected output for Make Number of Distinct Characters Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Number of Distinct Characters Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2532",
    "title": "Time to Cross a Bridge",
    "titleSlug": "time-to-cross-a-bridge",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Time to Cross a Bridge",
    "example_output": "# Expected output for Time to Cross a Bridge",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Time to Cross a Bridge\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2533",
    "title": "Number of Good Binary Strings",
    "titleSlug": "number-of-good-binary-strings",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Good Binary Strings",
    "example_output": "# Expected output for Number of Good Binary Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Good Binary Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2534",
    "title": "Time Taken to Cross the Door",
    "titleSlug": "time-taken-to-cross-the-door",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Time Taken to Cross the Door",
    "example_output": "# Expected output for Time Taken to Cross the Door",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Time Taken to Cross the Door\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2535",
    "title": "Difference Between Element Sum and Digit Sum of an Array",
    "titleSlug": "difference-between-element-sum-and-digit-sum-of-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Difference Between Element Sum and Digit Sum of an Array",
    "example_output": "# Expected output for Difference Between Element Sum and Digit Sum of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Difference Between Element Sum and Digit Sum of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2536",
    "title": "Increment Submatrices by One",
    "titleSlug": "increment-submatrices-by-one",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Increment Submatrices by One",
    "example_output": "# Expected output for Increment Submatrices by One",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Increment Submatrices by One\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2537",
    "title": "Count the Number of Good Subarrays",
    "titleSlug": "count-the-number-of-good-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Good Subarrays",
    "example_output": "# Expected output for Count the Number of Good Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Good Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2538",
    "title": "Difference Between Maximum and Minimum Price Sum",
    "titleSlug": "difference-between-maximum-and-minimum-price-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Difference Between Maximum and Minimum Price Sum",
    "example_output": "# Expected output for Difference Between Maximum and Minimum Price Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Difference Between Maximum and Minimum Price Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2539",
    "title": "Count the Number of Good Subsequences",
    "titleSlug": "count-the-number-of-good-subsequences",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Good Subsequences",
    "example_output": "# Expected output for Count the Number of Good Subsequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Good Subsequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2540",
    "title": "Minimum Common Value",
    "titleSlug": "minimum-common-value",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Common Value",
    "example_output": "# Expected output for Minimum Common Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Common Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2541",
    "title": "Minimum Operations to Make Array Equal II",
    "titleSlug": "minimum-operations-to-make-array-equal-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make Array Equal II",
    "example_output": "# Expected output for Minimum Operations to Make Array Equal II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make Array Equal II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2542",
    "title": "Maximum Subsequence Score",
    "titleSlug": "maximum-subsequence-score",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Subsequence Score",
    "example_output": "# Expected output for Maximum Subsequence Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Subsequence Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2543",
    "title": "Check if Point Is Reachable",
    "titleSlug": "check-if-point-is-reachable",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Point Is Reachable",
    "example_output": "# Expected output for Check if Point Is Reachable",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Point Is Reachable\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2544",
    "title": "Alternating Digit Sum",
    "titleSlug": "alternating-digit-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Alternating Digit Sum",
    "example_output": "# Expected output for Alternating Digit Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Alternating Digit Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2545",
    "title": "Sort the Students by Their Kth Score",
    "titleSlug": "sort-the-students-by-their-kth-score",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort the Students by Their Kth Score",
    "example_output": "# Expected output for Sort the Students by Their Kth Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort the Students by Their Kth Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2546",
    "title": "Apply Bitwise Operations to Make Strings Equal",
    "titleSlug": "apply-bitwise-operations-to-make-strings-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Bitwise Operations to Make Strings Equal",
    "example_output": "# Expected output for Apply Bitwise Operations to Make Strings Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Bitwise Operations to Make Strings Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2547",
    "title": "Minimum Cost to Split an Array",
    "titleSlug": "minimum-cost-to-split-an-array",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Split an Array",
    "example_output": "# Expected output for Minimum Cost to Split an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Split an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2548",
    "title": "Maximum Price to Fill a Bag",
    "titleSlug": "maximum-price-to-fill-a-bag",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Price to Fill a Bag",
    "example_output": "# Expected output for Maximum Price to Fill a Bag",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Price to Fill a Bag\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2549",
    "title": "Count Distinct Numbers on Board",
    "titleSlug": "count-distinct-numbers-on-board",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Distinct Numbers on Board",
    "example_output": "# Expected output for Count Distinct Numbers on Board",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Distinct Numbers on Board\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2550",
    "title": "Count Collisions of Monkeys on a Polygon",
    "titleSlug": "count-collisions-of-monkeys-on-a-polygon",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Recursion"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Collisions of Monkeys on a Polygon",
    "example_output": "# Expected output for Count Collisions of Monkeys on a Polygon",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Collisions of Monkeys on a Polygon\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2551",
    "title": "Put Marbles in Bags",
    "titleSlug": "put-marbles-in-bags",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Put Marbles in Bags",
    "example_output": "# Expected output for Put Marbles in Bags",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Put Marbles in Bags\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2552",
    "title": "Count Increasing Quadruplets",
    "titleSlug": "count-increasing-quadruplets",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Increasing Quadruplets",
    "example_output": "# Expected output for Count Increasing Quadruplets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Increasing Quadruplets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2553",
    "title": "Separate the Digits in an Array",
    "titleSlug": "separate-the-digits-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Separate the Digits in an Array",
    "example_output": "# Expected output for Separate the Digits in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Separate the Digits in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2554",
    "title": "Maximum Number of Integers to Choose From a Range I",
    "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-i",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Integers to Choose From a Range I",
    "example_output": "# Expected output for Maximum Number of Integers to Choose From a Range I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Integers to Choose From a Range I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2555",
    "title": "Maximize Win From Two Segments",
    "titleSlug": "maximize-win-from-two-segments",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Win From Two Segments",
    "example_output": "# Expected output for Maximize Win From Two Segments",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Win From Two Segments\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2556",
    "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
    "titleSlug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Disconnect Path in a Binary Matrix by at Most One Flip",
    "example_output": "# Expected output for Disconnect Path in a Binary Matrix by at Most One Flip",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Disconnect Path in a Binary Matrix by at Most One Flip\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2557",
    "title": "Maximum Number of Integers to Choose From a Range II",
    "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-ii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Integers to Choose From a Range II",
    "example_output": "# Expected output for Maximum Number of Integers to Choose From a Range II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Integers to Choose From a Range II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2558",
    "title": "Take Gifts From the Richest Pile",
    "titleSlug": "take-gifts-from-the-richest-pile",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Take Gifts From the Richest Pile",
    "example_output": "# Expected output for Take Gifts From the Richest Pile",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Take Gifts From the Richest Pile\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2559",
    "title": "Count Vowel Strings in Ranges",
    "titleSlug": "count-vowel-strings-in-ranges",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Vowel Strings in Ranges",
    "example_output": "# Expected output for Count Vowel Strings in Ranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Vowel Strings in Ranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2560",
    "title": "House Robber IV",
    "titleSlug": "house-robber-iv",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for House Robber IV",
    "example_output": "# Expected output for House Robber IV",
    "status": "TO_DO",
    "description": "Solve the problem titled \"House Robber IV\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2561",
    "title": "Rearranging Fruits",
    "titleSlug": "rearranging-fruits",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rearranging Fruits",
    "example_output": "# Expected output for Rearranging Fruits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rearranging Fruits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2562",
    "title": "Find the Array Concatenation Value",
    "titleSlug": "find-the-array-concatenation-value",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Array Concatenation Value",
    "example_output": "# Expected output for Find the Array Concatenation Value",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Array Concatenation Value\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2563",
    "title": "Count the Number of Fair Pairs",
    "titleSlug": "count-the-number-of-fair-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Fair Pairs",
    "example_output": "# Expected output for Count the Number of Fair Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Fair Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2564",
    "title": "Substring XOR Queries",
    "titleSlug": "substring-xor-queries",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Substring XOR Queries",
    "example_output": "# Expected output for Substring XOR Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Substring XOR Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2565",
    "title": "Subsequence With the Minimum Score",
    "titleSlug": "subsequence-with-the-minimum-score",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subsequence With the Minimum Score",
    "example_output": "# Expected output for Subsequence With the Minimum Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subsequence With the Minimum Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2566",
    "title": "Maximum Difference by Remapping a Digit",
    "titleSlug": "maximum-difference-by-remapping-a-digit",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Difference by Remapping a Digit",
    "example_output": "# Expected output for Maximum Difference by Remapping a Digit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Difference by Remapping a Digit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2567",
    "title": "Minimum Score by Changing Two Elements",
    "titleSlug": "minimum-score-by-changing-two-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Score by Changing Two Elements",
    "example_output": "# Expected output for Minimum Score by Changing Two Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Score by Changing Two Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2568",
    "title": "Minimum Impossible OR",
    "titleSlug": "minimum-impossible-or",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Brainteaser"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Impossible OR",
    "example_output": "# Expected output for Minimum Impossible OR",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Impossible OR\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2569",
    "title": "Handling Sum Queries After Update",
    "titleSlug": "handling-sum-queries-after-update",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Handling Sum Queries After Update",
    "example_output": "# Expected output for Handling Sum Queries After Update",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Handling Sum Queries After Update\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2570",
    "title": "Merge Two 2D Arrays by Summing Values",
    "titleSlug": "merge-two-2d-arrays-by-summing-values",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Merge Two 2D Arrays by Summing Values",
    "example_output": "# Expected output for Merge Two 2D Arrays by Summing Values",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Merge Two 2D Arrays by Summing Values\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2571",
    "title": "Minimum Operations to Reduce an Integer to 0",
    "titleSlug": "minimum-operations-to-reduce-an-integer-to-0",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Reduce an Integer to 0",
    "example_output": "# Expected output for Minimum Operations to Reduce an Integer to 0",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Reduce an Integer to 0\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2572",
    "title": "Count the Number of Square-Free Subsets",
    "titleSlug": "count-the-number-of-square-free-subsets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Square-Free Subsets",
    "example_output": "# Expected output for Count the Number of Square-Free Subsets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Square-Free Subsets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2573",
    "title": "Find the String with LCP",
    "titleSlug": "find-the-string-with-lcp",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the String with LCP",
    "example_output": "# Expected output for Find the String with LCP",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the String with LCP\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2574",
    "title": "Left and Right Sum Differences",
    "titleSlug": "left-and-right-sum-differences",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Left and Right Sum Differences",
    "example_output": "# Expected output for Left and Right Sum Differences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Left and Right Sum Differences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2575",
    "title": "Find the Divisibility Array of a String",
    "titleSlug": "find-the-divisibility-array-of-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Divisibility Array of a String",
    "example_output": "# Expected output for Find the Divisibility Array of a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Divisibility Array of a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2576",
    "title": "Find the Maximum Number of Marked Indices",
    "titleSlug": "find-the-maximum-number-of-marked-indices",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Maximum Number of Marked Indices",
    "example_output": "# Expected output for Find the Maximum Number of Marked Indices",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Maximum Number of Marked Indices\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2577",
    "title": "Minimum Time to Visit a Cell In a Grid",
    "titleSlug": "minimum-time-to-visit-a-cell-in-a-grid",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Visit a Cell In a Grid",
    "example_output": "# Expected output for Minimum Time to Visit a Cell In a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Visit a Cell In a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2578",
    "title": "Split With Minimum Sum",
    "titleSlug": "split-with-minimum-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split With Minimum Sum",
    "example_output": "# Expected output for Split With Minimum Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split With Minimum Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2579",
    "title": "Count Total Number of Colored Cells",
    "titleSlug": "count-total-number-of-colored-cells",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Total Number of Colored Cells",
    "example_output": "# Expected output for Count Total Number of Colored Cells",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Total Number of Colored Cells\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2580",
    "title": "Count Ways to Group Overlapping Ranges",
    "titleSlug": "count-ways-to-group-overlapping-ranges",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Ways to Group Overlapping Ranges",
    "example_output": "# Expected output for Count Ways to Group Overlapping Ranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Ways to Group Overlapping Ranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2581",
    "title": "Count Number of Possible Root Nodes",
    "titleSlug": "count-number-of-possible-root-nodes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Number of Possible Root Nodes",
    "example_output": "# Expected output for Count Number of Possible Root Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Number of Possible Root Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2582",
    "title": "Pass the Pillow",
    "titleSlug": "pass-the-pillow",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Pass the Pillow",
    "example_output": "# Expected output for Pass the Pillow",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Pass the Pillow\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2583",
    "title": "Kth Largest Sum in a Binary Tree",
    "titleSlug": "kth-largest-sum-in-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Kth Largest Sum in a Binary Tree",
    "example_output": "# Expected output for Kth Largest Sum in a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Kth Largest Sum in a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2584",
    "title": "Split the Array to Make Coprime Products",
    "titleSlug": "split-the-array-to-make-coprime-products",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split the Array to Make Coprime Products",
    "example_output": "# Expected output for Split the Array to Make Coprime Products",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split the Array to Make Coprime Products\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2585",
    "title": "Number of Ways to Earn Points",
    "titleSlug": "number-of-ways-to-earn-points",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Earn Points",
    "example_output": "# Expected output for Number of Ways to Earn Points",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Earn Points\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2586",
    "title": "Count the Number of Vowel Strings in Range",
    "titleSlug": "count-the-number-of-vowel-strings-in-range",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Vowel Strings in Range",
    "example_output": "# Expected output for Count the Number of Vowel Strings in Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Vowel Strings in Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2587",
    "title": "Rearrange Array to Maximize Prefix Score",
    "titleSlug": "rearrange-array-to-maximize-prefix-score",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rearrange Array to Maximize Prefix Score",
    "example_output": "# Expected output for Rearrange Array to Maximize Prefix Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rearrange Array to Maximize Prefix Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2588",
    "title": "Count the Number of Beautiful Subarrays",
    "titleSlug": "count-the-number-of-beautiful-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Beautiful Subarrays",
    "example_output": "# Expected output for Count the Number of Beautiful Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Beautiful Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2589",
    "title": "Minimum Time to Complete All Tasks",
    "titleSlug": "minimum-time-to-complete-all-tasks",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Complete All Tasks",
    "example_output": "# Expected output for Minimum Time to Complete All Tasks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Complete All Tasks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2590",
    "title": "Design a Todo List",
    "titleSlug": "design-a-todo-list",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Design"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design a Todo List",
    "example_output": "# Expected output for Design a Todo List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design a Todo List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2591",
    "title": "Distribute Money to Maximum Children",
    "titleSlug": "distribute-money-to-maximum-children",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distribute Money to Maximum Children",
    "example_output": "# Expected output for Distribute Money to Maximum Children",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distribute Money to Maximum Children\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2592",
    "title": "Maximize Greatness of an Array",
    "titleSlug": "maximize-greatness-of-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Greatness of an Array",
    "example_output": "# Expected output for Maximize Greatness of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Greatness of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2593",
    "title": "Find Score of an Array After Marking All Elements",
    "titleSlug": "find-score-of-an-array-after-marking-all-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Score of an Array After Marking All Elements",
    "example_output": "# Expected output for Find Score of an Array After Marking All Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Score of an Array After Marking All Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2594",
    "title": "Minimum Time to Repair Cars",
    "titleSlug": "minimum-time-to-repair-cars",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Repair Cars",
    "example_output": "# Expected output for Minimum Time to Repair Cars",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Repair Cars\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2595",
    "title": "Number of Even and Odd Bits",
    "titleSlug": "number-of-even-and-odd-bits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Even and Odd Bits",
    "example_output": "# Expected output for Number of Even and Odd Bits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Even and Odd Bits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2596",
    "title": "Check Knight Tour Configuration",
    "titleSlug": "check-knight-tour-configuration",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check Knight Tour Configuration",
    "example_output": "# Expected output for Check Knight Tour Configuration",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check Knight Tour Configuration\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2597",
    "title": "The Number of Beautiful Subsets",
    "titleSlug": "the-number-of-beautiful-subsets",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Number of Beautiful Subsets",
    "example_output": "# Expected output for The Number of Beautiful Subsets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Number of Beautiful Subsets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2598",
    "title": "Smallest Missing Non-negative Integer After Operations",
    "titleSlug": "smallest-missing-non-negative-integer-after-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Missing Non-negative Integer After Operations",
    "example_output": "# Expected output for Smallest Missing Non-negative Integer After Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Missing Non-negative Integer After Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2599",
    "title": "Make the Prefix Sum Non-negative",
    "titleSlug": "make-the-prefix-sum-non-negative",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make the Prefix Sum Non-negative",
    "example_output": "# Expected output for Make the Prefix Sum Non-negative",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make the Prefix Sum Non-negative\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2600",
    "title": "K Items With the Maximum Sum",
    "titleSlug": "k-items-with-the-maximum-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for K Items With the Maximum Sum",
    "example_output": "# Expected output for K Items With the Maximum Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"K Items With the Maximum Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2601",
    "title": "Prime Subtraction Operation",
    "titleSlug": "prime-subtraction-operation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Prime Subtraction Operation",
    "example_output": "# Expected output for Prime Subtraction Operation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Prime Subtraction Operation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2602",
    "title": "Minimum Operations to Make All Array Elements Equal",
    "titleSlug": "minimum-operations-to-make-all-array-elements-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make All Array Elements Equal",
    "example_output": "# Expected output for Minimum Operations to Make All Array Elements Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make All Array Elements Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2603",
    "title": "Collect Coins in a Tree",
    "titleSlug": "collect-coins-in-a-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Topological Sort"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Collect Coins in a Tree",
    "example_output": "# Expected output for Collect Coins in a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Collect Coins in a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2604",
    "title": "Minimum Time to Eat All Grains",
    "titleSlug": "minimum-time-to-eat-all-grains",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Eat All Grains",
    "example_output": "# Expected output for Minimum Time to Eat All Grains",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Eat All Grains\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2605",
    "title": "Form Smallest Number From Two Digit Arrays",
    "titleSlug": "form-smallest-number-from-two-digit-arrays",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Form Smallest Number From Two Digit Arrays",
    "example_output": "# Expected output for Form Smallest Number From Two Digit Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Form Smallest Number From Two Digit Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2606",
    "title": "Find the Substring With Maximum Cost",
    "titleSlug": "find-the-substring-with-maximum-cost",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Substring With Maximum Cost",
    "example_output": "# Expected output for Find the Substring With Maximum Cost",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Substring With Maximum Cost\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2607",
    "title": "Make K-Subarray Sums Equal",
    "titleSlug": "make-k-subarray-sums-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make K-Subarray Sums Equal",
    "example_output": "# Expected output for Make K-Subarray Sums Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make K-Subarray Sums Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2608",
    "title": "Shortest Cycle in a Graph",
    "titleSlug": "shortest-cycle-in-a-graph",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest Cycle in a Graph",
    "example_output": "# Expected output for Shortest Cycle in a Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest Cycle in a Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2609",
    "title": "Find the Longest Balanced Substring of a Binary String",
    "titleSlug": "find-the-longest-balanced-substring-of-a-binary-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Longest Balanced Substring of a Binary String",
    "example_output": "# Expected output for Find the Longest Balanced Substring of a Binary String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Longest Balanced Substring of a Binary String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2610",
    "title": "Convert an Array Into a 2D Array With Conditions",
    "titleSlug": "convert-an-array-into-a-2d-array-with-conditions",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert an Array Into a 2D Array With Conditions",
    "example_output": "# Expected output for Convert an Array Into a 2D Array With Conditions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert an Array Into a 2D Array With Conditions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2611",
    "title": "Mice and Cheese",
    "titleSlug": "mice-and-cheese",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Mice and Cheese",
    "example_output": "# Expected output for Mice and Cheese",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Mice and Cheese\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2612",
    "title": "Minimum Reverse Operations",
    "titleSlug": "minimum-reverse-operations",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Reverse Operations",
    "example_output": "# Expected output for Minimum Reverse Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Reverse Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2613",
    "title": "Beautiful Pairs",
    "titleSlug": "beautiful-pairs",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Geometry"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Beautiful Pairs",
    "example_output": "# Expected output for Beautiful Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Beautiful Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2614",
    "title": "Prime In Diagonal",
    "titleSlug": "prime-in-diagonal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Prime In Diagonal",
    "example_output": "# Expected output for Prime In Diagonal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Prime In Diagonal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2615",
    "title": "Sum of Distances",
    "titleSlug": "sum-of-distances",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Distances",
    "example_output": "# Expected output for Sum of Distances",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Distances\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2616",
    "title": "Minimize the Maximum Difference of Pairs",
    "titleSlug": "minimize-the-maximum-difference-of-pairs",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize the Maximum Difference of Pairs",
    "example_output": "# Expected output for Minimize the Maximum Difference of Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize the Maximum Difference of Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2617",
    "title": "Minimum Number of Visited Cells in a Grid",
    "titleSlug": "minimum-number-of-visited-cells-in-a-grid",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Visited Cells in a Grid",
    "example_output": "# Expected output for Minimum Number of Visited Cells in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Visited Cells in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2618",
    "title": "Check if Object Instance of Class",
    "titleSlug": "check-if-object-instance-of-class",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Object Instance of Class",
    "example_output": "# Expected output for Check if Object Instance of Class",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Object Instance of Class\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2619",
    "title": "Array Prototype Last",
    "titleSlug": "array-prototype-last",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array Prototype Last",
    "example_output": "# Expected output for Array Prototype Last",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array Prototype Last\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2620",
    "title": "Counter",
    "titleSlug": "counter",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Counter",
    "example_output": "# Expected output for Counter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Counter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2621",
    "title": "Sleep",
    "titleSlug": "sleep",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sleep",
    "example_output": "# Expected output for Sleep",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sleep\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2622",
    "title": "Cache With Time Limit",
    "titleSlug": "cache-with-time-limit",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cache With Time Limit",
    "example_output": "# Expected output for Cache With Time Limit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cache With Time Limit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2623",
    "title": "Memoize",
    "titleSlug": "memoize",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Memoize",
    "example_output": "# Expected output for Memoize",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Memoize\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2624",
    "title": "Snail Traversal",
    "titleSlug": "snail-traversal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Snail Traversal",
    "example_output": "# Expected output for Snail Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Snail Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2625",
    "title": "Flatten Deeply Nested Array",
    "titleSlug": "flatten-deeply-nested-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flatten Deeply Nested Array",
    "example_output": "# Expected output for Flatten Deeply Nested Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flatten Deeply Nested Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2626",
    "title": "Array Reduce Transformation",
    "titleSlug": "array-reduce-transformation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array Reduce Transformation",
    "example_output": "# Expected output for Array Reduce Transformation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array Reduce Transformation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2627",
    "title": "Debounce",
    "titleSlug": "debounce",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Debounce",
    "example_output": "# Expected output for Debounce",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Debounce\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2628",
    "title": "JSON Deep Equal",
    "titleSlug": "json-deep-equal",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for JSON Deep Equal",
    "example_output": "# Expected output for JSON Deep Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"JSON Deep Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2629",
    "title": "Function Composition",
    "titleSlug": "function-composition",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Function Composition",
    "example_output": "# Expected output for Function Composition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Function Composition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2630",
    "title": "Memoize II",
    "titleSlug": "memoize-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Memoize II",
    "example_output": "# Expected output for Memoize II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Memoize II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2631",
    "title": "Group By",
    "titleSlug": "group-by",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Group By",
    "example_output": "# Expected output for Group By",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Group By\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2632",
    "title": "Curry",
    "titleSlug": "curry",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Curry",
    "example_output": "# Expected output for Curry",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Curry\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2633",
    "title": "Convert Object to JSON String",
    "titleSlug": "convert-object-to-json-string",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert Object to JSON String",
    "example_output": "# Expected output for Convert Object to JSON String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert Object to JSON String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2634",
    "title": "Filter Elements from Array",
    "titleSlug": "filter-elements-from-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Filter Elements from Array",
    "example_output": "# Expected output for Filter Elements from Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Filter Elements from Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2635",
    "title": "Apply Transform Over Each Element in Array",
    "titleSlug": "apply-transform-over-each-element-in-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Transform Over Each Element in Array",
    "example_output": "# Expected output for Apply Transform Over Each Element in Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Transform Over Each Element in Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2636",
    "title": "Promise Pool",
    "titleSlug": "promise-pool",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Promise Pool",
    "example_output": "# Expected output for Promise Pool",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Promise Pool\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2637",
    "title": "Promise Time Limit",
    "titleSlug": "promise-time-limit",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Promise Time Limit",
    "example_output": "# Expected output for Promise Time Limit",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Promise Time Limit\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2638",
    "title": "Count the Number of K-Free Subsets",
    "titleSlug": "count-the-number-of-k-free-subsets",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of K-Free Subsets",
    "example_output": "# Expected output for Count the Number of K-Free Subsets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of K-Free Subsets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2639",
    "title": "Find the Width of Columns of a Grid",
    "titleSlug": "find-the-width-of-columns-of-a-grid",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Width of Columns of a Grid",
    "example_output": "# Expected output for Find the Width of Columns of a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Width of Columns of a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2640",
    "title": "Find the Score of All Prefixes of an Array",
    "titleSlug": "find-the-score-of-all-prefixes-of-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Score of All Prefixes of an Array",
    "example_output": "# Expected output for Find the Score of All Prefixes of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Score of All Prefixes of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2641",
    "title": "Cousins in Binary Tree II",
    "titleSlug": "cousins-in-binary-tree-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Cousins in Binary Tree II",
    "example_output": "# Expected output for Cousins in Binary Tree II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Cousins in Binary Tree II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2642",
    "title": "Design Graph With Shortest Path Calculator",
    "titleSlug": "design-graph-with-shortest-path-calculator",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Graph"
      },
      {
        "name": "Design"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Graph With Shortest Path Calculator",
    "example_output": "# Expected output for Design Graph With Shortest Path Calculator",
    "status": "TO_DO",
    "description": "Implement a calculator that supports the logic described in \"Design Graph With Shortest Path Calculator\". The calculator may need to parse expressions and compute results."
  },
  {
    "id": "2643",
    "title": "Row With Maximum Ones",
    "titleSlug": "row-with-maximum-ones",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Row With Maximum Ones",
    "example_output": "# Expected output for Row With Maximum Ones",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Row With Maximum Ones\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2644",
    "title": "Find the Maximum Divisibility Score",
    "titleSlug": "find-the-maximum-divisibility-score",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Maximum Divisibility Score",
    "example_output": "# Expected output for Find the Maximum Divisibility Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Maximum Divisibility Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2645",
    "title": "Minimum Additions to Make Valid String",
    "titleSlug": "minimum-additions-to-make-valid-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Additions to Make Valid String",
    "example_output": "# Expected output for Minimum Additions to Make Valid String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Additions to Make Valid String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2646",
    "title": "Minimize the Total Price of the Trips",
    "titleSlug": "minimize-the-total-price-of-the-trips",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize the Total Price of the Trips",
    "example_output": "# Expected output for Minimize the Total Price of the Trips",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize the Total Price of the Trips\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2647",
    "title": "Color the Triangle Red",
    "titleSlug": "color-the-triangle-red",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Color the Triangle Red",
    "example_output": "# Expected output for Color the Triangle Red",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Color the Triangle Red\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2648",
    "title": "Generate Fibonacci Sequence",
    "titleSlug": "generate-fibonacci-sequence",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Generate Fibonacci Sequence",
    "example_output": "# Expected output for Generate Fibonacci Sequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Generate Fibonacci Sequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2649",
    "title": "Nested Array Generator",
    "titleSlug": "nested-array-generator",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Nested Array Generator",
    "example_output": "# Expected output for Nested Array Generator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Nested Array Generator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2650",
    "title": "Design Cancellable Function",
    "titleSlug": "design-cancellable-function",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Design Cancellable Function",
    "example_output": "# Expected output for Design Cancellable Function",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Design Cancellable Function\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2651",
    "title": "Calculate Delayed Arrival Time",
    "titleSlug": "calculate-delayed-arrival-time",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate Delayed Arrival Time",
    "example_output": "# Expected output for Calculate Delayed Arrival Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate Delayed Arrival Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2652",
    "title": "Sum Multiples",
    "titleSlug": "sum-multiples",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum Multiples",
    "example_output": "# Expected output for Sum Multiples",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum Multiples\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2653",
    "title": "Sliding Subarray Beauty",
    "titleSlug": "sliding-subarray-beauty",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sliding Subarray Beauty",
    "example_output": "# Expected output for Sliding Subarray Beauty",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sliding Subarray Beauty\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2654",
    "title": "Minimum Number of Operations to Make All Array Elements Equal to 1",
    "titleSlug": "minimum-number-of-operations-to-make-all-array-elements-equal-to-1",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Make All Array Elements Equal to 1",
    "example_output": "# Expected output for Minimum Number of Operations to Make All Array Elements Equal to 1",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Make All Array Elements Equal to 1\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2655",
    "title": "Find Maximal Uncovered Ranges",
    "titleSlug": "find-maximal-uncovered-ranges",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Maximal Uncovered Ranges",
    "example_output": "# Expected output for Find Maximal Uncovered Ranges",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Maximal Uncovered Ranges\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2656",
    "title": "Maximum Sum With Exactly K Elements ",
    "titleSlug": "maximum-sum-with-exactly-k-elements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum With Exactly K Elements ",
    "example_output": "# Expected output for Maximum Sum With Exactly K Elements ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum With Exactly K Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2657",
    "title": "Find the Prefix Common Array of Two Arrays",
    "titleSlug": "find-the-prefix-common-array-of-two-arrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Prefix Common Array of Two Arrays",
    "example_output": "# Expected output for Find the Prefix Common Array of Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Prefix Common Array of Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2658",
    "title": "Maximum Number of Fish in a Grid",
    "titleSlug": "maximum-number-of-fish-in-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Fish in a Grid",
    "example_output": "# Expected output for Maximum Number of Fish in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Fish in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2659",
    "title": "Make Array Empty",
    "titleSlug": "make-array-empty",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Array Empty",
    "example_output": "# Expected output for Make Array Empty",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Array Empty\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2660",
    "title": "Determine the Winner of a Bowling Game",
    "titleSlug": "determine-the-winner-of-a-bowling-game",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Determine the Winner of a Bowling Game",
    "example_output": "# Expected output for Determine the Winner of a Bowling Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Determine the Winner of a Bowling Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2661",
    "title": "First Completely Painted Row or Column",
    "titleSlug": "first-completely-painted-row-or-column",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for First Completely Painted Row or Column",
    "example_output": "# Expected output for First Completely Painted Row or Column",
    "status": "TO_DO",
    "description": "Solve the problem titled \"First Completely Painted Row or Column\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2662",
    "title": "Minimum Cost of a Path With Special Roads",
    "titleSlug": "minimum-cost-of-a-path-with-special-roads",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost of a Path With Special Roads",
    "example_output": "# Expected output for Minimum Cost of a Path With Special Roads",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost of a Path With Special Roads\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2663",
    "title": "Lexicographically Smallest Beautiful String",
    "titleSlug": "lexicographically-smallest-beautiful-string",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lexicographically Smallest Beautiful String",
    "example_output": "# Expected output for Lexicographically Smallest Beautiful String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lexicographically Smallest Beautiful String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2664",
    "title": "The Knight’s Tour",
    "titleSlug": "the-knights-tour",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Knight’s Tour",
    "example_output": "# Expected output for The Knight’s Tour",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Knight’s Tour\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2665",
    "title": "Counter II",
    "titleSlug": "counter-ii",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Counter II",
    "example_output": "# Expected output for Counter II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Counter II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2666",
    "title": "Allow One Function Call",
    "titleSlug": "allow-one-function-call",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Allow One Function Call",
    "example_output": "# Expected output for Allow One Function Call",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Allow One Function Call\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2667",
    "title": "Create Hello World Function",
    "titleSlug": "create-hello-world-function",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create Hello World Function",
    "example_output": "# Expected output for Create Hello World Function",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create Hello World Function\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2668",
    "title": "Find Latest Salaries",
    "titleSlug": "find-latest-salaries",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Latest Salaries",
    "example_output": "# Expected output for Find Latest Salaries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Latest Salaries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2669",
    "title": "Count Artist Occurrences On Spotify Ranking List",
    "titleSlug": "count-artist-occurrences-on-spotify-ranking-list",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Artist Occurrences On Spotify Ranking List",
    "example_output": "# Expected output for Count Artist Occurrences On Spotify Ranking List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Artist Occurrences On Spotify Ranking List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2670",
    "title": "Find the Distinct Difference Array",
    "titleSlug": "find-the-distinct-difference-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Distinct Difference Array",
    "example_output": "# Expected output for Find the Distinct Difference Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Distinct Difference Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2671",
    "title": "Frequency Tracker",
    "titleSlug": "frequency-tracker",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Design"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Frequency Tracker",
    "example_output": "# Expected output for Frequency Tracker",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Frequency Tracker\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2672",
    "title": "Number of Adjacent Elements With the Same Color",
    "titleSlug": "number-of-adjacent-elements-with-the-same-color",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Adjacent Elements With the Same Color",
    "example_output": "# Expected output for Number of Adjacent Elements With the Same Color",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Adjacent Elements With the Same Color\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2673",
    "title": "Make Costs of Paths Equal in a Binary Tree",
    "titleSlug": "make-costs-of-paths-equal-in-a-binary-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Costs of Paths Equal in a Binary Tree",
    "example_output": "# Expected output for Make Costs of Paths Equal in a Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Costs of Paths Equal in a Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2674",
    "title": "Split a Circular Linked List",
    "titleSlug": "split-a-circular-linked-list",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split a Circular Linked List",
    "example_output": "# Expected output for Split a Circular Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split a Circular Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2675",
    "title": "Array of Objects to Matrix",
    "titleSlug": "array-of-objects-to-matrix",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array of Objects to Matrix",
    "example_output": "# Expected output for Array of Objects to Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Array of Objects to Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2676",
    "title": "Throttle",
    "titleSlug": "throttle",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Throttle",
    "example_output": "# Expected output for Throttle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Throttle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2677",
    "title": "Chunk Array",
    "titleSlug": "chunk-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Chunk Array",
    "example_output": "# Expected output for Chunk Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Chunk Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2678",
    "title": "Number of Senior Citizens",
    "titleSlug": "number-of-senior-citizens",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Senior Citizens",
    "example_output": "# Expected output for Number of Senior Citizens",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Senior Citizens\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2679",
    "title": "Sum in a Matrix",
    "titleSlug": "sum-in-a-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum in a Matrix",
    "example_output": "# Expected output for Sum in a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Sum in a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2680",
    "title": "Maximum OR",
    "titleSlug": "maximum-or",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum OR",
    "example_output": "# Expected output for Maximum OR",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum OR\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2681",
    "title": "Power of Heroes",
    "titleSlug": "power-of-heroes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Power of Heroes",
    "example_output": "# Expected output for Power of Heroes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Power of Heroes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2682",
    "title": "Find the Losers of the Circular Game",
    "titleSlug": "find-the-losers-of-the-circular-game",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Losers of the Circular Game",
    "example_output": "# Expected output for Find the Losers of the Circular Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Losers of the Circular Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2683",
    "title": "Neighboring Bitwise XOR",
    "titleSlug": "neighboring-bitwise-xor",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Neighboring Bitwise XOR",
    "example_output": "# Expected output for Neighboring Bitwise XOR",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Neighboring Bitwise XOR\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2684",
    "title": "Maximum Number of Moves in a Grid",
    "titleSlug": "maximum-number-of-moves-in-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Moves in a Grid",
    "example_output": "# Expected output for Maximum Number of Moves in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Moves in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2685",
    "title": "Count the Number of Complete Components",
    "titleSlug": "count-the-number-of-complete-components",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Complete Components",
    "example_output": "# Expected output for Count the Number of Complete Components",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Complete Components\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2686",
    "title": "Immediate Food Delivery III",
    "titleSlug": "immediate-food-delivery-iii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Immediate Food Delivery III",
    "example_output": "# Expected output for Immediate Food Delivery III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Immediate Food Delivery III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2687",
    "title": "Bikes Last Time Used ",
    "titleSlug": "bikes-last-time-used",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bikes Last Time Used ",
    "example_output": "# Expected output for Bikes Last Time Used ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bikes Last Time Used\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2688",
    "title": "Find Active Users",
    "titleSlug": "find-active-users",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Active Users",
    "example_output": "# Expected output for Find Active Users",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Active Users\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2689",
    "title": "Extract Kth Character From The Rope Tree",
    "titleSlug": "extract-kth-character-from-the-rope-tree",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Extract Kth Character From The Rope Tree",
    "example_output": "# Expected output for Extract Kth Character From The Rope Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Extract Kth Character From The Rope Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2690",
    "title": "Infinite Method Object",
    "titleSlug": "infinite-method-object",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Infinite Method Object",
    "example_output": "# Expected output for Infinite Method Object",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Infinite Method Object\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2691",
    "title": "Immutability Helper",
    "titleSlug": "immutability-helper",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Immutability Helper",
    "example_output": "# Expected output for Immutability Helper",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Immutability Helper\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2692",
    "title": "Make Object Immutable",
    "titleSlug": "make-object-immutable",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Object Immutable",
    "example_output": "# Expected output for Make Object Immutable",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Object Immutable\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2693",
    "title": "Call Function with Custom Context",
    "titleSlug": "call-function-with-custom-context",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Call Function with Custom Context",
    "example_output": "# Expected output for Call Function with Custom Context",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Call Function with Custom Context\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2694",
    "title": "Event Emitter",
    "titleSlug": "event-emitter",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Event Emitter",
    "example_output": "# Expected output for Event Emitter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Event Emitter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2695",
    "title": "Array Wrapper",
    "titleSlug": "array-wrapper",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array Wrapper",
    "example_output": "# Expected output for Array Wrapper",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array Wrapper\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2696",
    "title": "Minimum String Length After Removing Substrings",
    "titleSlug": "minimum-string-length-after-removing-substrings",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum String Length After Removing Substrings",
    "example_output": "# Expected output for Minimum String Length After Removing Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum String Length After Removing Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2697",
    "title": "Lexicographically Smallest Palindrome",
    "titleSlug": "lexicographically-smallest-palindrome",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lexicographically Smallest Palindrome",
    "example_output": "# Expected output for Lexicographically Smallest Palindrome",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Lexicographically Smallest Palindrome\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2698",
    "title": "Find the Punishment Number of an Integer",
    "titleSlug": "find-the-punishment-number-of-an-integer",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Punishment Number of an Integer",
    "example_output": "# Expected output for Find the Punishment Number of an Integer",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Punishment Number of an Integer\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2699",
    "title": "Modify Graph Edge Weights",
    "titleSlug": "modify-graph-edge-weights",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Modify Graph Edge Weights",
    "example_output": "# Expected output for Modify Graph Edge Weights",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Modify Graph Edge Weights\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2700",
    "title": "Differences Between Two Objects",
    "titleSlug": "differences-between-two-objects",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Differences Between Two Objects",
    "example_output": "# Expected output for Differences Between Two Objects",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Differences Between Two Objects\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2701",
    "title": "Consecutive Transactions with Increasing Amounts",
    "titleSlug": "consecutive-transactions-with-increasing-amounts",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Consecutive Transactions with Increasing Amounts",
    "example_output": "# Expected output for Consecutive Transactions with Increasing Amounts",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Consecutive Transactions with Increasing Amounts\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2702",
    "title": "Minimum Operations to Make Numbers Non-positive",
    "titleSlug": "minimum-operations-to-make-numbers-non-positive",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make Numbers Non-positive",
    "example_output": "# Expected output for Minimum Operations to Make Numbers Non-positive",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make Numbers Non-positive\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2703",
    "title": "Return Length of Arguments Passed",
    "titleSlug": "return-length-of-arguments-passed",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Return Length of Arguments Passed",
    "example_output": "# Expected output for Return Length of Arguments Passed",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Return Length of Arguments Passed\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2704",
    "title": "To Be Or Not To Be",
    "titleSlug": "to-be-or-not-to-be",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for To Be Or Not To Be",
    "example_output": "# Expected output for To Be Or Not To Be",
    "status": "TO_DO",
    "description": "Solve the problem titled \"To Be Or Not To Be\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2705",
    "title": "Compact Object",
    "titleSlug": "compact-object",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Compact Object",
    "example_output": "# Expected output for Compact Object",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Compact Object\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2706",
    "title": "Buy Two Chocolates",
    "titleSlug": "buy-two-chocolates",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Buy Two Chocolates",
    "example_output": "# Expected output for Buy Two Chocolates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Buy Two Chocolates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2707",
    "title": "Extra Characters in a String",
    "titleSlug": "extra-characters-in-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Trie"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Extra Characters in a String",
    "example_output": "# Expected output for Extra Characters in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Extra Characters in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2708",
    "title": "Maximum Strength of a Group",
    "titleSlug": "maximum-strength-of-a-group",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Strength of a Group",
    "example_output": "# Expected output for Maximum Strength of a Group",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Strength of a Group\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2709",
    "title": "Greatest Common Divisor Traversal",
    "titleSlug": "greatest-common-divisor-traversal",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Greatest Common Divisor Traversal",
    "example_output": "# Expected output for Greatest Common Divisor Traversal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Greatest Common Divisor Traversal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2710",
    "title": "Remove Trailing Zeros From a String",
    "titleSlug": "remove-trailing-zeros-from-a-string",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Trailing Zeros From a String",
    "example_output": "# Expected output for Remove Trailing Zeros From a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Trailing Zeros From a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2711",
    "title": "Difference of Number of Distinct Values on Diagonals",
    "titleSlug": "difference-of-number-of-distinct-values-on-diagonals",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Difference of Number of Distinct Values on Diagonals",
    "example_output": "# Expected output for Difference of Number of Distinct Values on Diagonals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Difference of Number of Distinct Values on Diagonals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2712",
    "title": "Minimum Cost to Make All Characters Equal",
    "titleSlug": "minimum-cost-to-make-all-characters-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Make All Characters Equal",
    "example_output": "# Expected output for Minimum Cost to Make All Characters Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Make All Characters Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2713",
    "title": "Maximum Strictly Increasing Cells in a Matrix",
    "titleSlug": "maximum-strictly-increasing-cells-in-a-matrix",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Memoization"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Strictly Increasing Cells in a Matrix",
    "example_output": "# Expected output for Maximum Strictly Increasing Cells in a Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Maximum Strictly Increasing Cells in a Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2714",
    "title": "Find Shortest Path with K Hops",
    "titleSlug": "find-shortest-path-with-k-hops",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Shortest Path with K Hops",
    "example_output": "# Expected output for Find Shortest Path with K Hops",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Shortest Path with K Hops\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2715",
    "title": "Timeout Cancellation",
    "titleSlug": "timeout-cancellation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Timeout Cancellation",
    "example_output": "# Expected output for Timeout Cancellation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Timeout Cancellation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2716",
    "title": "Minimize String Length",
    "titleSlug": "minimize-string-length",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimize String Length",
    "example_output": "# Expected output for Minimize String Length",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimize String Length\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2717",
    "title": "Semi-Ordered Permutation",
    "titleSlug": "semi-ordered-permutation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Semi-Ordered Permutation",
    "example_output": "# Expected output for Semi-Ordered Permutation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Semi-Ordered Permutation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2718",
    "title": "Sum of Matrix After Queries",
    "titleSlug": "sum-of-matrix-after-queries",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Matrix After Queries",
    "example_output": "# Expected output for Sum of Matrix After Queries",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Sum of Matrix After Queries\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2719",
    "title": "Count of Integers",
    "titleSlug": "count-of-integers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count of Integers",
    "example_output": "# Expected output for Count of Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count of Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2720",
    "title": "Popularity Percentage",
    "titleSlug": "popularity-percentage",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Popularity Percentage",
    "example_output": "# Expected output for Popularity Percentage",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Popularity Percentage\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2721",
    "title": "Execute Asynchronous Functions in Parallel",
    "titleSlug": "execute-asynchronous-functions-in-parallel",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Execute Asynchronous Functions in Parallel",
    "example_output": "# Expected output for Execute Asynchronous Functions in Parallel",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Execute Asynchronous Functions in Parallel\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2722",
    "title": "Join Two Arrays by ID",
    "titleSlug": "join-two-arrays-by-id",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Join Two Arrays by ID",
    "example_output": "# Expected output for Join Two Arrays by ID",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Join Two Arrays by ID\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2723",
    "title": "Add Two Promises",
    "titleSlug": "add-two-promises",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Add Two Promises",
    "example_output": "# Expected output for Add Two Promises",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Add Two Promises\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2724",
    "title": "Sort By",
    "titleSlug": "sort-by",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort By",
    "example_output": "# Expected output for Sort By",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort By\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2725",
    "title": "Interval Cancellation",
    "titleSlug": "interval-cancellation",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Interval Cancellation",
    "example_output": "# Expected output for Interval Cancellation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Interval Cancellation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2726",
    "title": "Calculator with Method Chaining",
    "titleSlug": "calculator-with-method-chaining",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculator with Method Chaining",
    "example_output": "# Expected output for Calculator with Method Chaining",
    "status": "TO_DO",
    "description": "Implement a calculator that supports the logic described in \"Calculator with Method Chaining\". The calculator may need to parse expressions and compute results."
  },
  {
    "id": "2727",
    "title": "Is Object Empty",
    "titleSlug": "is-object-empty",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Is Object Empty",
    "example_output": "# Expected output for Is Object Empty",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Is Object Empty\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2728",
    "title": "Count Houses in a Circular Street",
    "titleSlug": "count-houses-in-a-circular-street",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Houses in a Circular Street",
    "example_output": "# Expected output for Count Houses in a Circular Street",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Houses in a Circular Street\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2729",
    "title": "Check if The Number is Fascinating",
    "titleSlug": "check-if-the-number-is-fascinating",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if The Number is Fascinating",
    "example_output": "# Expected output for Check if The Number is Fascinating",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if The Number is Fascinating\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2730",
    "title": "Find the Longest Semi-Repetitive Substring",
    "titleSlug": "find-the-longest-semi-repetitive-substring",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Longest Semi-Repetitive Substring",
    "example_output": "# Expected output for Find the Longest Semi-Repetitive Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Longest Semi-Repetitive Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2731",
    "title": "Movement of Robots",
    "titleSlug": "movement-of-robots",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Movement of Robots",
    "example_output": "# Expected output for Movement of Robots",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Movement of Robots\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2732",
    "title": "Find a Good Subset of the Matrix",
    "titleSlug": "find-a-good-subset-of-the-matrix",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find a Good Subset of the Matrix",
    "example_output": "# Expected output for Find a Good Subset of the Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Find a Good Subset of the Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2733",
    "title": "Neither Minimum nor Maximum",
    "titleSlug": "neither-minimum-nor-maximum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Neither Minimum nor Maximum",
    "example_output": "# Expected output for Neither Minimum nor Maximum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Neither Minimum nor Maximum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2734",
    "title": "Lexicographically Smallest String After Substring Operation",
    "titleSlug": "lexicographically-smallest-string-after-substring-operation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Lexicographically Smallest String After Substring Operation",
    "example_output": "# Expected output for Lexicographically Smallest String After Substring Operation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Lexicographically Smallest String After Substring Operation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2735",
    "title": "Collecting Chocolates",
    "titleSlug": "collecting-chocolates",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Collecting Chocolates",
    "example_output": "# Expected output for Collecting Chocolates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Collecting Chocolates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2736",
    "title": "Maximum Sum Queries",
    "titleSlug": "maximum-sum-queries",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum Queries",
    "example_output": "# Expected output for Maximum Sum Queries",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum Queries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2737",
    "title": "Find the Closest Marked Node",
    "titleSlug": "find-the-closest-marked-node",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Closest Marked Node",
    "example_output": "# Expected output for Find the Closest Marked Node",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Closest Marked Node\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2738",
    "title": "Count Occurrences in Text",
    "titleSlug": "count-occurrences-in-text",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Occurrences in Text",
    "example_output": "# Expected output for Count Occurrences in Text",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Occurrences in Text\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2739",
    "title": "Total Distance Traveled",
    "titleSlug": "total-distance-traveled",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Total Distance Traveled",
    "example_output": "# Expected output for Total Distance Traveled",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Total Distance Traveled\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2740",
    "title": "Find the Value of the Partition",
    "titleSlug": "find-the-value-of-the-partition",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Value of the Partition",
    "example_output": "# Expected output for Find the Value of the Partition",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Value of the Partition\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2741",
    "title": "Special Permutations",
    "titleSlug": "special-permutations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Special Permutations",
    "example_output": "# Expected output for Special Permutations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Special Permutations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2742",
    "title": "Painting the Walls",
    "titleSlug": "painting-the-walls",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Painting the Walls",
    "example_output": "# Expected output for Painting the Walls",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Painting the Walls\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2743",
    "title": "Count Substrings Without Repeating Character",
    "titleSlug": "count-substrings-without-repeating-character",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Substrings Without Repeating Character",
    "example_output": "# Expected output for Count Substrings Without Repeating Character",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Substrings Without Repeating Character\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2744",
    "title": "Find Maximum Number of String Pairs",
    "titleSlug": "find-maximum-number-of-string-pairs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Maximum Number of String Pairs",
    "example_output": "# Expected output for Find Maximum Number of String Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Maximum Number of String Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2745",
    "title": "Construct the Longest New String",
    "titleSlug": "construct-the-longest-new-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Brainteaser"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct the Longest New String",
    "example_output": "# Expected output for Construct the Longest New String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Construct the Longest New String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2746",
    "title": "Decremental String Concatenation",
    "titleSlug": "decremental-string-concatenation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Decremental String Concatenation",
    "example_output": "# Expected output for Decremental String Concatenation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Decremental String Concatenation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2747",
    "title": "Count Zero Request Servers",
    "titleSlug": "count-zero-request-servers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Zero Request Servers",
    "example_output": "# Expected output for Count Zero Request Servers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Zero Request Servers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2748",
    "title": "Number of Beautiful Pairs",
    "titleSlug": "number-of-beautiful-pairs",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Beautiful Pairs",
    "example_output": "# Expected output for Number of Beautiful Pairs",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Beautiful Pairs\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2749",
    "title": "Minimum Operations to Make the Integer Zero",
    "titleSlug": "minimum-operations-to-make-the-integer-zero",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Brainteaser"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make the Integer Zero",
    "example_output": "# Expected output for Minimum Operations to Make the Integer Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make the Integer Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2750",
    "title": "Ways to Split Array Into Good Subarrays",
    "titleSlug": "ways-to-split-array-into-good-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ways to Split Array Into Good Subarrays",
    "example_output": "# Expected output for Ways to Split Array Into Good Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Ways to Split Array Into Good Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2751",
    "title": "Robot Collisions",
    "titleSlug": "robot-collisions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Robot Collisions",
    "example_output": "# Expected output for Robot Collisions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Robot Collisions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2752",
    "title": "Customers with Maximum Number of Transactions on Consecutive Days",
    "titleSlug": "customers-with-maximum-number-of-transactions-on-consecutive-days",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Customers with Maximum Number of Transactions on Consecutive Days",
    "example_output": "# Expected output for Customers with Maximum Number of Transactions on Consecutive Days",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Customers with Maximum Number of Transactions on Consecutive Days\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2753",
    "title": "Count Houses in a Circular Street II",
    "titleSlug": "count-houses-in-a-circular-street-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Houses in a Circular Street II",
    "example_output": "# Expected output for Count Houses in a Circular Street II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Houses in a Circular Street II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2754",
    "title": "Bind Function to Context",
    "titleSlug": "bind-function-to-context",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Bind Function to Context",
    "example_output": "# Expected output for Bind Function to Context",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Bind Function to Context\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2755",
    "title": "Deep Merge of Two Objects",
    "titleSlug": "deep-merge-of-two-objects",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Deep Merge of Two Objects",
    "example_output": "# Expected output for Deep Merge of Two Objects",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Deep Merge of Two Objects\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2756",
    "title": "Query Batching",
    "titleSlug": "query-batching",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Query Batching",
    "example_output": "# Expected output for Query Batching",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Query Batching\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2757",
    "title": "Generate Circular Array Values",
    "titleSlug": "generate-circular-array-values",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Generate Circular Array Values",
    "example_output": "# Expected output for Generate Circular Array Values",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Generate Circular Array Values\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2758",
    "title": "Next Day",
    "titleSlug": "next-day",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Next Day",
    "example_output": "# Expected output for Next Day",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Next Day\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2759",
    "title": "Convert JSON String to Object",
    "titleSlug": "convert-json-string-to-object",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert JSON String to Object",
    "example_output": "# Expected output for Convert JSON String to Object",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert JSON String to Object\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2760",
    "title": "Longest Even Odd Subarray With Threshold",
    "titleSlug": "longest-even-odd-subarray-with-threshold",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Even Odd Subarray With Threshold",
    "example_output": "# Expected output for Longest Even Odd Subarray With Threshold",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Even Odd Subarray With Threshold\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2761",
    "title": "Prime Pairs With Target Sum",
    "titleSlug": "prime-pairs-with-target-sum",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Prime Pairs With Target Sum",
    "example_output": "# Expected output for Prime Pairs With Target Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Prime Pairs With Target Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2762",
    "title": "Continuous Subarrays",
    "titleSlug": "continuous-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Ordered Set"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Continuous Subarrays",
    "example_output": "# Expected output for Continuous Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Continuous Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2763",
    "title": "Sum of Imbalance Numbers of All Subarrays",
    "titleSlug": "sum-of-imbalance-numbers-of-all-subarrays",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Imbalance Numbers of All Subarrays",
    "example_output": "# Expected output for Sum of Imbalance Numbers of All Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Imbalance Numbers of All Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2764",
    "title": "Is Array a Preorder of Some ‌Binary Tree",
    "titleSlug": "is-array-a-preorder-of-some-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Stack"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Is Array a Preorder of Some ‌Binary Tree",
    "example_output": "# Expected output for Is Array a Preorder of Some ‌Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Is Array a Preorder of Some ‌Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2765",
    "title": "Longest Alternating Subarray",
    "titleSlug": "longest-alternating-subarray",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Alternating Subarray",
    "example_output": "# Expected output for Longest Alternating Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Alternating Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2766",
    "title": "Relocate Marbles",
    "titleSlug": "relocate-marbles",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Relocate Marbles",
    "example_output": "# Expected output for Relocate Marbles",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Relocate Marbles\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2767",
    "title": "Partition String Into Minimum Beautiful Substrings",
    "titleSlug": "partition-string-into-minimum-beautiful-substrings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partition String Into Minimum Beautiful Substrings",
    "example_output": "# Expected output for Partition String Into Minimum Beautiful Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partition String Into Minimum Beautiful Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2768",
    "title": "Number of Black Blocks",
    "titleSlug": "number-of-black-blocks",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Black Blocks",
    "example_output": "# Expected output for Number of Black Blocks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Black Blocks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2769",
    "title": "Find the Maximum Achievable Number",
    "titleSlug": "find-the-maximum-achievable-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Maximum Achievable Number",
    "example_output": "# Expected output for Find the Maximum Achievable Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Maximum Achievable Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2770",
    "title": "Maximum Number of Jumps to Reach the Last Index",
    "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Jumps to Reach the Last Index",
    "example_output": "# Expected output for Maximum Number of Jumps to Reach the Last Index",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Jumps to Reach the Last Index\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2771",
    "title": "Longest Non-decreasing Subarray From Two Arrays",
    "titleSlug": "longest-non-decreasing-subarray-from-two-arrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Non-decreasing Subarray From Two Arrays",
    "example_output": "# Expected output for Longest Non-decreasing Subarray From Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Non-decreasing Subarray From Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2772",
    "title": "Apply Operations to Make All Array Elements Equal to Zero",
    "titleSlug": "apply-operations-to-make-all-array-elements-equal-to-zero",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Operations to Make All Array Elements Equal to Zero",
    "example_output": "# Expected output for Apply Operations to Make All Array Elements Equal to Zero",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Operations to Make All Array Elements Equal to Zero\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2773",
    "title": "Height of Special Binary Tree",
    "titleSlug": "height-of-special-binary-tree",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Height of Special Binary Tree",
    "example_output": "# Expected output for Height of Special Binary Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Height of Special Binary Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2774",
    "title": "Array Upper Bound",
    "titleSlug": "array-upper-bound",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array Upper Bound",
    "example_output": "# Expected output for Array Upper Bound",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array Upper Bound\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2775",
    "title": "Undefined to Null",
    "titleSlug": "undefined-to-null",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Undefined to Null",
    "example_output": "# Expected output for Undefined to Null",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Undefined to Null\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2776",
    "title": "Convert Callback Based Function to Promise Based Function",
    "titleSlug": "convert-callback-based-function-to-promise-based-function",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Convert Callback Based Function to Promise Based Function",
    "example_output": "# Expected output for Convert Callback Based Function to Promise Based Function",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Convert Callback Based Function to Promise Based Function\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2777",
    "title": "Date Range Generator",
    "titleSlug": "date-range-generator",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Date Range Generator",
    "example_output": "# Expected output for Date Range Generator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Date Range Generator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2778",
    "title": "Sum of Squares of Special Elements ",
    "titleSlug": "sum-of-squares-of-special-elements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Squares of Special Elements ",
    "example_output": "# Expected output for Sum of Squares of Special Elements ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Squares of Special Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2779",
    "title": "Maximum Beauty of an Array After Applying Operation",
    "titleSlug": "maximum-beauty-of-an-array-after-applying-operation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Beauty of an Array After Applying Operation",
    "example_output": "# Expected output for Maximum Beauty of an Array After Applying Operation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Beauty of an Array After Applying Operation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2780",
    "title": "Minimum Index of a Valid Split",
    "titleSlug": "minimum-index-of-a-valid-split",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Index of a Valid Split",
    "example_output": "# Expected output for Minimum Index of a Valid Split",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Index of a Valid Split\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2781",
    "title": "Length of the Longest Valid Substring",
    "titleSlug": "length-of-the-longest-valid-substring",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Length of the Longest Valid Substring",
    "example_output": "# Expected output for Length of the Longest Valid Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Length of the Longest Valid Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2782",
    "title": "Number of Unique Categories",
    "titleSlug": "number-of-unique-categories",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Union Find"
      },
      {
        "name": "Interactive"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Unique Categories",
    "example_output": "# Expected output for Number of Unique Categories",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Unique Categories\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2783",
    "title": "Flight Occupancy and Waitlist Analysis",
    "titleSlug": "flight-occupancy-and-waitlist-analysis",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Flight Occupancy and Waitlist Analysis",
    "example_output": "# Expected output for Flight Occupancy and Waitlist Analysis",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Flight Occupancy and Waitlist Analysis\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2784",
    "title": "Check if Array is Good",
    "titleSlug": "check-if-array-is-good",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Array is Good",
    "example_output": "# Expected output for Check if Array is Good",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Array is Good\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2785",
    "title": "Sort Vowels in a String",
    "titleSlug": "sort-vowels-in-a-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sort Vowels in a String",
    "example_output": "# Expected output for Sort Vowels in a String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sort Vowels in a String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2786",
    "title": "Visit Array Positions to Maximize Score",
    "titleSlug": "visit-array-positions-to-maximize-score",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Visit Array Positions to Maximize Score",
    "example_output": "# Expected output for Visit Array Positions to Maximize Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Visit Array Positions to Maximize Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2787",
    "title": "Ways to Express an Integer as Sum of Powers",
    "titleSlug": "ways-to-express-an-integer-as-sum-of-powers",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Ways to Express an Integer as Sum of Powers",
    "example_output": "# Expected output for Ways to Express an Integer as Sum of Powers",
    "status": "TO_DO",
    "description": "Given a string representing a boolean expression, return the minimum cost or number of operations needed as required by the problem \"Ways to Express an Integer as Sum of Powers\"."
  },
  {
    "id": "2788",
    "title": "Split Strings by Separator",
    "titleSlug": "split-strings-by-separator",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Strings by Separator",
    "example_output": "# Expected output for Split Strings by Separator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Strings by Separator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2789",
    "title": "Largest Element in an Array after Merge Operations",
    "titleSlug": "largest-element-in-an-array-after-merge-operations",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Largest Element in an Array after Merge Operations",
    "example_output": "# Expected output for Largest Element in an Array after Merge Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Largest Element in an Array after Merge Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2790",
    "title": "Maximum Number of Groups With Increasing Length",
    "titleSlug": "maximum-number-of-groups-with-increasing-length",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Groups With Increasing Length",
    "example_output": "# Expected output for Maximum Number of Groups With Increasing Length",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Groups With Increasing Length\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2791",
    "title": "Count Paths That Can Form a Palindrome in a Tree",
    "titleSlug": "count-paths-that-can-form-a-palindrome-in-a-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Paths That Can Form a Palindrome in a Tree",
    "example_output": "# Expected output for Count Paths That Can Form a Palindrome in a Tree",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Count Paths That Can Form a Palindrome in a Tree\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2792",
    "title": "Count Nodes That Are Great Enough",
    "titleSlug": "count-nodes-that-are-great-enough",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Divide and Conquer"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Binary Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Nodes That Are Great Enough",
    "example_output": "# Expected output for Count Nodes That Are Great Enough",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Nodes That Are Great Enough\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2793",
    "title": "Status of Flight Tickets",
    "titleSlug": "status-of-flight-tickets",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Status of Flight Tickets",
    "example_output": "# Expected output for Status of Flight Tickets",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Status of Flight Tickets\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2794",
    "title": "Create Object from Two Arrays",
    "titleSlug": "create-object-from-two-arrays",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create Object from Two Arrays",
    "example_output": "# Expected output for Create Object from Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create Object from Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2795",
    "title": "Parallel Execution of Promises for Individual Results Retrieval",
    "titleSlug": "parallel-execution-of-promises-for-individual-results-retrieval",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Parallel Execution of Promises for Individual Results Retrieval",
    "example_output": "# Expected output for Parallel Execution of Promises for Individual Results Retrieval",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Parallel Execution of Promises for Individual Results Retrieval\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2796",
    "title": "Repeat String",
    "titleSlug": "repeat-string",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Repeat String",
    "example_output": "# Expected output for Repeat String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Repeat String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2797",
    "title": "Partial Function with Placeholders",
    "titleSlug": "partial-function-with-placeholders",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Partial Function with Placeholders",
    "example_output": "# Expected output for Partial Function with Placeholders",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Partial Function with Placeholders\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2798",
    "title": "Number of Employees Who Met the Target",
    "titleSlug": "number-of-employees-who-met-the-target",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Employees Who Met the Target",
    "example_output": "# Expected output for Number of Employees Who Met the Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Employees Who Met the Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2799",
    "title": "Count Complete Subarrays in an Array",
    "titleSlug": "count-complete-subarrays-in-an-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Complete Subarrays in an Array",
    "example_output": "# Expected output for Count Complete Subarrays in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Complete Subarrays in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2800",
    "title": "Shortest String That Contains Three Strings",
    "titleSlug": "shortest-string-that-contains-three-strings",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest String That Contains Three Strings",
    "example_output": "# Expected output for Shortest String That Contains Three Strings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest String That Contains Three Strings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2801",
    "title": "Count Stepping Numbers in Range",
    "titleSlug": "count-stepping-numbers-in-range",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Stepping Numbers in Range",
    "example_output": "# Expected output for Count Stepping Numbers in Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Stepping Numbers in Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2802",
    "title": "Find The K-th Lucky Number",
    "titleSlug": "find-the-k-th-lucky-number",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find The K-th Lucky Number",
    "example_output": "# Expected output for Find The K-th Lucky Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find The K-th Lucky Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2803",
    "title": "Factorial Generator",
    "titleSlug": "factorial-generator",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Factorial Generator",
    "example_output": "# Expected output for Factorial Generator",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Factorial Generator\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2804",
    "title": "Array Prototype ForEach",
    "titleSlug": "array-prototype-foreach",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Array Prototype ForEach",
    "example_output": "# Expected output for Array Prototype ForEach",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Array Prototype ForEach\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2805",
    "title": "Custom Interval",
    "titleSlug": "custom-interval",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Custom Interval",
    "example_output": "# Expected output for Custom Interval",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Custom Interval\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2806",
    "title": "Account Balance After Rounded Purchase",
    "titleSlug": "account-balance-after-rounded-purchase",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Account Balance After Rounded Purchase",
    "example_output": "# Expected output for Account Balance After Rounded Purchase",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Account Balance After Rounded Purchase\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2807",
    "title": "Insert Greatest Common Divisors in Linked List",
    "titleSlug": "insert-greatest-common-divisors-in-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Insert Greatest Common Divisors in Linked List",
    "example_output": "# Expected output for Insert Greatest Common Divisors in Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Insert Greatest Common Divisors in Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2808",
    "title": "Minimum Seconds to Equalize a Circular Array",
    "titleSlug": "minimum-seconds-to-equalize-a-circular-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Seconds to Equalize a Circular Array",
    "example_output": "# Expected output for Minimum Seconds to Equalize a Circular Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Seconds to Equalize a Circular Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2809",
    "title": "Minimum Time to Make Array Sum At Most x",
    "titleSlug": "minimum-time-to-make-array-sum-at-most-x",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time to Make Array Sum At Most x",
    "example_output": "# Expected output for Minimum Time to Make Array Sum At Most x",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time to Make Array Sum At Most x\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2810",
    "title": "Faulty Keyboard",
    "titleSlug": "faulty-keyboard",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Faulty Keyboard",
    "example_output": "# Expected output for Faulty Keyboard",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Faulty Keyboard\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2811",
    "title": "Check if it is Possible to Split Array",
    "titleSlug": "check-if-it-is-possible-to-split-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if it is Possible to Split Array",
    "example_output": "# Expected output for Check if it is Possible to Split Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if it is Possible to Split Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2812",
    "title": "Find the Safest Path in a Grid",
    "titleSlug": "find-the-safest-path-in-a-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Safest Path in a Grid",
    "example_output": "# Expected output for Find the Safest Path in a Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Safest Path in a Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2813",
    "title": "Maximum Elegance of a K-Length Subsequence",
    "titleSlug": "maximum-elegance-of-a-k-length-subsequence",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Elegance of a K-Length Subsequence",
    "example_output": "# Expected output for Maximum Elegance of a K-Length Subsequence",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Elegance of a K-Length Subsequence\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2814",
    "title": "Minimum Time Takes to Reach Destination Without Drowning",
    "titleSlug": "minimum-time-takes-to-reach-destination-without-drowning",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Time Takes to Reach Destination Without Drowning",
    "example_output": "# Expected output for Minimum Time Takes to Reach Destination Without Drowning",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Time Takes to Reach Destination Without Drowning\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2815",
    "title": "Max Pair Sum in an Array",
    "titleSlug": "max-pair-sum-in-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Max Pair Sum in an Array",
    "example_output": "# Expected output for Max Pair Sum in an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Max Pair Sum in an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2816",
    "title": "Double a Number Represented as a Linked List",
    "titleSlug": "double-a-number-represented-as-a-linked-list",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Linked List"
      },
      {
        "name": "Math"
      },
      {
        "name": "Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Double a Number Represented as a Linked List",
    "example_output": "# Expected output for Double a Number Represented as a Linked List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Double a Number Represented as a Linked List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2817",
    "title": "Minimum Absolute Difference Between Elements With Constraint",
    "titleSlug": "minimum-absolute-difference-between-elements-with-constraint",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Ordered Set"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Absolute Difference Between Elements With Constraint",
    "example_output": "# Expected output for Minimum Absolute Difference Between Elements With Constraint",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Absolute Difference Between Elements With Constraint\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2818",
    "title": "Apply Operations to Maximize Score",
    "titleSlug": "apply-operations-to-maximize-score",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Operations to Maximize Score",
    "example_output": "# Expected output for Apply Operations to Maximize Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Operations to Maximize Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2819",
    "title": "Minimum Relative Loss After Buying Chocolates",
    "titleSlug": "minimum-relative-loss-after-buying-chocolates",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Relative Loss After Buying Chocolates",
    "example_output": "# Expected output for Minimum Relative Loss After Buying Chocolates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Relative Loss After Buying Chocolates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2820",
    "title": "Election Results",
    "titleSlug": "election-results",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Election Results",
    "example_output": "# Expected output for Election Results",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Election Results\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2821",
    "title": "Delay the Resolution of Each Promise",
    "titleSlug": "delay-the-resolution-of-each-promise",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Delay the Resolution of Each Promise",
    "example_output": "# Expected output for Delay the Resolution of Each Promise",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Delay the Resolution of Each Promise\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2822",
    "title": "Inversion of Object",
    "titleSlug": "inversion-of-object",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Inversion of Object",
    "example_output": "# Expected output for Inversion of Object",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Inversion of Object\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2823",
    "title": "Deep Object Filter",
    "titleSlug": "deep-object-filter",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Deep Object Filter",
    "example_output": "# Expected output for Deep Object Filter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Deep Object Filter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2824",
    "title": "Count Pairs Whose Sum is Less than Target",
    "titleSlug": "count-pairs-whose-sum-is-less-than-target",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Pairs Whose Sum is Less than Target",
    "example_output": "# Expected output for Count Pairs Whose Sum is Less than Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Pairs Whose Sum is Less than Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2825",
    "title": "Make String a Subsequence Using Cyclic Increments",
    "titleSlug": "make-string-a-subsequence-using-cyclic-increments",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make String a Subsequence Using Cyclic Increments",
    "example_output": "# Expected output for Make String a Subsequence Using Cyclic Increments",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make String a Subsequence Using Cyclic Increments\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2826",
    "title": "Sorting Three Groups",
    "titleSlug": "sorting-three-groups",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sorting Three Groups",
    "example_output": "# Expected output for Sorting Three Groups",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sorting Three Groups\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2827",
    "title": "Number of Beautiful Integers in the Range",
    "titleSlug": "number-of-beautiful-integers-in-the-range",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Beautiful Integers in the Range",
    "example_output": "# Expected output for Number of Beautiful Integers in the Range",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Beautiful Integers in the Range\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2828",
    "title": "Check if a String Is an Acronym of Words",
    "titleSlug": "check-if-a-string-is-an-acronym-of-words",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if a String Is an Acronym of Words",
    "example_output": "# Expected output for Check if a String Is an Acronym of Words",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if a String Is an Acronym of Words\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2829",
    "title": "Determine the Minimum Sum of a k-avoiding Array",
    "titleSlug": "determine-the-minimum-sum-of-a-k-avoiding-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Determine the Minimum Sum of a k-avoiding Array",
    "example_output": "# Expected output for Determine the Minimum Sum of a k-avoiding Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Determine the Minimum Sum of a k-avoiding Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2830",
    "title": "Maximize the Profit as the Salesman",
    "titleSlug": "maximize-the-profit-as-the-salesman",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize the Profit as the Salesman",
    "example_output": "# Expected output for Maximize the Profit as the Salesman",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize the Profit as the Salesman\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2831",
    "title": "Find the Longest Equal Subarray",
    "titleSlug": "find-the-longest-equal-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Longest Equal Subarray",
    "example_output": "# Expected output for Find the Longest Equal Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Longest Equal Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2832",
    "title": "Maximal Range That Each Element Is Maximum in It",
    "titleSlug": "maximal-range-that-each-element-is-maximum-in-it",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximal Range That Each Element Is Maximum in It",
    "example_output": "# Expected output for Maximal Range That Each Element Is Maximum in It",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximal Range That Each Element Is Maximum in It\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2833",
    "title": "Furthest Point From Origin",
    "titleSlug": "furthest-point-from-origin",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Furthest Point From Origin",
    "example_output": "# Expected output for Furthest Point From Origin",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Furthest Point From Origin\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2834",
    "title": "Find the Minimum Possible Sum of a Beautiful Array",
    "titleSlug": "find-the-minimum-possible-sum-of-a-beautiful-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Minimum Possible Sum of a Beautiful Array",
    "example_output": "# Expected output for Find the Minimum Possible Sum of a Beautiful Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Minimum Possible Sum of a Beautiful Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2835",
    "title": "Minimum Operations to Form Subsequence With Target Sum",
    "titleSlug": "minimum-operations-to-form-subsequence-with-target-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Form Subsequence With Target Sum",
    "example_output": "# Expected output for Minimum Operations to Form Subsequence With Target Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Form Subsequence With Target Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2836",
    "title": "Maximize Value of Function in a Ball Passing Game",
    "titleSlug": "maximize-value-of-function-in-a-ball-passing-game",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Value of Function in a Ball Passing Game",
    "example_output": "# Expected output for Maximize Value of Function in a Ball Passing Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Value of Function in a Ball Passing Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2837",
    "title": "Total Traveled Distance",
    "titleSlug": "total-traveled-distance",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Total Traveled Distance",
    "example_output": "# Expected output for Total Traveled Distance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Total Traveled Distance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2838",
    "title": "Maximum Coins Heroes Can Collect",
    "titleSlug": "maximum-coins-heroes-can-collect",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Coins Heroes Can Collect",
    "example_output": "# Expected output for Maximum Coins Heroes Can Collect",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Coins Heroes Can Collect\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2839",
    "title": "Check if Strings Can be Made Equal With Operations I",
    "titleSlug": "check-if-strings-can-be-made-equal-with-operations-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Strings Can be Made Equal With Operations I",
    "example_output": "# Expected output for Check if Strings Can be Made Equal With Operations I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Strings Can be Made Equal With Operations I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2840",
    "title": "Check if Strings Can be Made Equal With Operations II",
    "titleSlug": "check-if-strings-can-be-made-equal-with-operations-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Strings Can be Made Equal With Operations II",
    "example_output": "# Expected output for Check if Strings Can be Made Equal With Operations II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Strings Can be Made Equal With Operations II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2841",
    "title": "Maximum Sum of Almost Unique Subarray",
    "titleSlug": "maximum-sum-of-almost-unique-subarray",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Sum of Almost Unique Subarray",
    "example_output": "# Expected output for Maximum Sum of Almost Unique Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Sum of Almost Unique Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2842",
    "title": "Count K-Subsequences of a String With Maximum Beauty",
    "titleSlug": "count-k-subsequences-of-a-string-with-maximum-beauty",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count K-Subsequences of a String With Maximum Beauty",
    "example_output": "# Expected output for Count K-Subsequences of a String With Maximum Beauty",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count K-Subsequences of a String With Maximum Beauty\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2843",
    "title": "  Count Symmetric Integers",
    "titleSlug": "count-symmetric-integers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for   Count Symmetric Integers",
    "example_output": "# Expected output for   Count Symmetric Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Symmetric Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2844",
    "title": "Minimum Operations to Make a Special Number",
    "titleSlug": "minimum-operations-to-make-a-special-number",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Make a Special Number",
    "example_output": "# Expected output for Minimum Operations to Make a Special Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Make a Special Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2845",
    "title": "Count of Interesting Subarrays",
    "titleSlug": "count-of-interesting-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count of Interesting Subarrays",
    "example_output": "# Expected output for Count of Interesting Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count of Interesting Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2846",
    "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
    "titleSlug": "minimum-edge-weight-equilibrium-queries-in-a-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Strongly Connected Component"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Edge Weight Equilibrium Queries in a Tree",
    "example_output": "# Expected output for Minimum Edge Weight Equilibrium Queries in a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Edge Weight Equilibrium Queries in a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2847",
    "title": "Smallest Number With Given Digit Product",
    "titleSlug": "smallest-number-with-given-digit-product",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Number With Given Digit Product",
    "example_output": "# Expected output for Smallest Number With Given Digit Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Number With Given Digit Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2848",
    "title": "Points That Intersect With Cars",
    "titleSlug": "points-that-intersect-with-cars",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Points That Intersect With Cars",
    "example_output": "# Expected output for Points That Intersect With Cars",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Points That Intersect With Cars\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2849",
    "title": "Determine if a Cell Is Reachable at a Given Time",
    "titleSlug": "determine-if-a-cell-is-reachable-at-a-given-time",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Determine if a Cell Is Reachable at a Given Time",
    "example_output": "# Expected output for Determine if a Cell Is Reachable at a Given Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Determine if a Cell Is Reachable at a Given Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2850",
    "title": "Minimum Moves to Spread Stones Over Grid",
    "titleSlug": "minimum-moves-to-spread-stones-over-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Moves to Spread Stones Over Grid",
    "example_output": "# Expected output for Minimum Moves to Spread Stones Over Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Moves to Spread Stones Over Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2851",
    "title": "String Transformation",
    "titleSlug": "string-transformation",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "String Matching"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for String Transformation",
    "example_output": "# Expected output for String Transformation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"String Transformation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2852",
    "title": "Sum of Remoteness of All Cells",
    "titleSlug": "sum-of-remoteness-of-all-cells",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Remoteness of All Cells",
    "example_output": "# Expected output for Sum of Remoteness of All Cells",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Remoteness of All Cells\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2853",
    "title": "Highest Salaries Difference",
    "titleSlug": "highest-salaries-difference",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Highest Salaries Difference",
    "example_output": "# Expected output for Highest Salaries Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Highest Salaries Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2854",
    "title": "Rolling Average Steps",
    "titleSlug": "rolling-average-steps",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rolling Average Steps",
    "example_output": "# Expected output for Rolling Average Steps",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rolling Average Steps\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2855",
    "title": "Minimum Right Shifts to Sort the Array",
    "titleSlug": "minimum-right-shifts-to-sort-the-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Right Shifts to Sort the Array",
    "example_output": "# Expected output for Minimum Right Shifts to Sort the Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Right Shifts to Sort the Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2856",
    "title": "Minimum Array Length After Pair Removals",
    "titleSlug": "minimum-array-length-after-pair-removals",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Array Length After Pair Removals",
    "example_output": "# Expected output for Minimum Array Length After Pair Removals",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Array Length After Pair Removals\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2857",
    "title": "Count Pairs of Points With Distance k",
    "titleSlug": "count-pairs-of-points-with-distance-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Pairs of Points With Distance k",
    "example_output": "# Expected output for Count Pairs of Points With Distance k",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Pairs of Points With Distance k\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2858",
    "title": "Minimum Edge Reversals So Every Node Is Reachable",
    "titleSlug": "minimum-edge-reversals-so-every-node-is-reachable",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Edge Reversals So Every Node Is Reachable",
    "example_output": "# Expected output for Minimum Edge Reversals So Every Node Is Reachable",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Edge Reversals So Every Node Is Reachable\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2859",
    "title": "Sum of Values at Indices With K Set Bits",
    "titleSlug": "sum-of-values-at-indices-with-k-set-bits",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Sum of Values at Indices With K Set Bits",
    "example_output": "# Expected output for Sum of Values at Indices With K Set Bits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Sum of Values at Indices With K Set Bits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2860",
    "title": "Happy Students",
    "titleSlug": "happy-students",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Happy Students",
    "example_output": "# Expected output for Happy Students",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Happy Students\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2861",
    "title": "Maximum Number of Alloys",
    "titleSlug": "maximum-number-of-alloys",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of Alloys",
    "example_output": "# Expected output for Maximum Number of Alloys",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of Alloys\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2862",
    "title": "Maximum Element-Sum of a Complete Subset of Indices",
    "titleSlug": "maximum-element-sum-of-a-complete-subset-of-indices",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Element-Sum of a Complete Subset of Indices",
    "example_output": "# Expected output for Maximum Element-Sum of a Complete Subset of Indices",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Element-Sum of a Complete Subset of Indices\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2863",
    "title": "Maximum Length of Semi-Decreasing Subarrays",
    "titleSlug": "maximum-length-of-semi-decreasing-subarrays",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Length of Semi-Decreasing Subarrays",
    "example_output": "# Expected output for Maximum Length of Semi-Decreasing Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Length of Semi-Decreasing Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2864",
    "title": "Maximum Odd Binary Number",
    "titleSlug": "maximum-odd-binary-number",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Odd Binary Number",
    "example_output": "# Expected output for Maximum Odd Binary Number",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Odd Binary Number\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2865",
    "title": "Beautiful Towers I",
    "titleSlug": "beautiful-towers-i",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Beautiful Towers I",
    "example_output": "# Expected output for Beautiful Towers I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Beautiful Towers I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2866",
    "title": "Beautiful Towers II",
    "titleSlug": "beautiful-towers-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Beautiful Towers II",
    "example_output": "# Expected output for Beautiful Towers II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Beautiful Towers II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2867",
    "title": "Count Valid Paths in a Tree",
    "titleSlug": "count-valid-paths-in-a-tree",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Valid Paths in a Tree",
    "example_output": "# Expected output for Count Valid Paths in a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Valid Paths in a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2868",
    "title": "The Wording Game",
    "titleSlug": "the-wording-game",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Game Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for The Wording Game",
    "example_output": "# Expected output for The Wording Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"The Wording Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2869",
    "title": "Minimum Operations to Collect Elements",
    "titleSlug": "minimum-operations-to-collect-elements",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Collect Elements",
    "example_output": "# Expected output for Minimum Operations to Collect Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Collect Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2870",
    "title": "Minimum Number of Operations to Make Array Empty",
    "titleSlug": "minimum-number-of-operations-to-make-array-empty",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Make Array Empty",
    "example_output": "# Expected output for Minimum Number of Operations to Make Array Empty",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Make Array Empty\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2871",
    "title": "Split Array Into Maximum Number of Subarrays",
    "titleSlug": "split-array-into-maximum-number-of-subarrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Split Array Into Maximum Number of Subarrays",
    "example_output": "# Expected output for Split Array Into Maximum Number of Subarrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Split Array Into Maximum Number of Subarrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2872",
    "title": "Maximum Number of K-Divisible Components",
    "titleSlug": "maximum-number-of-k-divisible-components",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Number of K-Divisible Components",
    "example_output": "# Expected output for Maximum Number of K-Divisible Components",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Number of K-Divisible Components\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2873",
    "title": "Maximum Value of an Ordered Triplet I",
    "titleSlug": "maximum-value-of-an-ordered-triplet-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Value of an Ordered Triplet I",
    "example_output": "# Expected output for Maximum Value of an Ordered Triplet I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Value of an Ordered Triplet I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2874",
    "title": "Maximum Value of an Ordered Triplet II",
    "titleSlug": "maximum-value-of-an-ordered-triplet-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Value of an Ordered Triplet II",
    "example_output": "# Expected output for Maximum Value of an Ordered Triplet II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Value of an Ordered Triplet II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2875",
    "title": "Minimum Size Subarray in Infinite Array",
    "titleSlug": "minimum-size-subarray-in-infinite-array",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Size Subarray in Infinite Array",
    "example_output": "# Expected output for Minimum Size Subarray in Infinite Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Size Subarray in Infinite Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2876",
    "title": "Count Visited Nodes in a Directed Graph",
    "titleSlug": "count-visited-nodes-in-a-directed-graph",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Visited Nodes in a Directed Graph",
    "example_output": "# Expected output for Count Visited Nodes in a Directed Graph",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Visited Nodes in a Directed Graph\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2877",
    "title": "Create a DataFrame from List",
    "titleSlug": "create-a-dataframe-from-list",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create a DataFrame from List",
    "example_output": "# Expected output for Create a DataFrame from List",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create a DataFrame from List\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2878",
    "title": "Get the Size of a DataFrame",
    "titleSlug": "get-the-size-of-a-dataframe",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Get the Size of a DataFrame",
    "example_output": "# Expected output for Get the Size of a DataFrame",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Get the Size of a DataFrame\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2879",
    "title": "Display the First Three Rows",
    "titleSlug": "display-the-first-three-rows",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Display the First Three Rows",
    "example_output": "# Expected output for Display the First Three Rows",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Display the First Three Rows\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2880",
    "title": "Select Data",
    "titleSlug": "select-data",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Select Data",
    "example_output": "# Expected output for Select Data",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Select Data\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2881",
    "title": "Create a New Column",
    "titleSlug": "create-a-new-column",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Create a New Column",
    "example_output": "# Expected output for Create a New Column",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Create a New Column\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2882",
    "title": "Drop Duplicate Rows",
    "titleSlug": "drop-duplicate-rows",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Drop Duplicate Rows",
    "example_output": "# Expected output for Drop Duplicate Rows",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Drop Duplicate Rows\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2883",
    "title": "Drop Missing Data",
    "titleSlug": "drop-missing-data",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Drop Missing Data",
    "example_output": "# Expected output for Drop Missing Data",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Drop Missing Data\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2884",
    "title": "Modify Columns",
    "titleSlug": "modify-columns",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Modify Columns",
    "example_output": "# Expected output for Modify Columns",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Modify Columns\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2885",
    "title": "Rename Columns",
    "titleSlug": "rename-columns",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Rename Columns",
    "example_output": "# Expected output for Rename Columns",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Rename Columns\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2886",
    "title": "Change Data Type",
    "titleSlug": "change-data-type",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Change Data Type",
    "example_output": "# Expected output for Change Data Type",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Change Data Type\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2887",
    "title": "Fill Missing Data",
    "titleSlug": "fill-missing-data",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Fill Missing Data",
    "example_output": "# Expected output for Fill Missing Data",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Fill Missing Data\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2888",
    "title": "Reshape Data: Concatenate",
    "titleSlug": "reshape-data-concatenate",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reshape Data: Concatenate",
    "example_output": "# Expected output for Reshape Data: Concatenate",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reshape Data: Concatenate\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2889",
    "title": "Reshape Data: Pivot",
    "titleSlug": "reshape-data-pivot",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reshape Data: Pivot",
    "example_output": "# Expected output for Reshape Data: Pivot",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reshape Data: Pivot\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2890",
    "title": "Reshape Data: Melt",
    "titleSlug": "reshape-data-melt",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Reshape Data: Melt",
    "example_output": "# Expected output for Reshape Data: Melt",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Reshape Data: Melt\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2891",
    "title": "Method Chaining",
    "titleSlug": "method-chaining",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Method Chaining",
    "example_output": "# Expected output for Method Chaining",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Method Chaining\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2892",
    "title": "Minimizing Array After Replacing Pairs With Their Product",
    "titleSlug": "minimizing-array-after-replacing-pairs-with-their-product",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimizing Array After Replacing Pairs With Their Product",
    "example_output": "# Expected output for Minimizing Array After Replacing Pairs With Their Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimizing Array After Replacing Pairs With Their Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2893",
    "title": "Calculate Orders Within Each Interval",
    "titleSlug": "calculate-orders-within-each-interval",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate Orders Within Each Interval",
    "example_output": "# Expected output for Calculate Orders Within Each Interval",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate Orders Within Each Interval\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2894",
    "title": "Divisible and Non-divisible Sums Difference",
    "titleSlug": "divisible-and-non-divisible-sums-difference",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divisible and Non-divisible Sums Difference",
    "example_output": "# Expected output for Divisible and Non-divisible Sums Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divisible and Non-divisible Sums Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2895",
    "title": "Minimum Processing Time",
    "titleSlug": "minimum-processing-time",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Processing Time",
    "example_output": "# Expected output for Minimum Processing Time",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Processing Time\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2896",
    "title": "Apply Operations to Make Two Strings Equal",
    "titleSlug": "apply-operations-to-make-two-strings-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Operations to Make Two Strings Equal",
    "example_output": "# Expected output for Apply Operations to Make Two Strings Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Operations to Make Two Strings Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2897",
    "title": "Apply Operations on Array to Maximize Sum of Squares",
    "titleSlug": "apply-operations-on-array-to-maximize-sum-of-squares",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Operations on Array to Maximize Sum of Squares",
    "example_output": "# Expected output for Apply Operations on Array to Maximize Sum of Squares",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Operations on Array to Maximize Sum of Squares\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2898",
    "title": "Maximum Linear Stock Score",
    "titleSlug": "maximum-linear-stock-score",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Linear Stock Score",
    "example_output": "# Expected output for Maximum Linear Stock Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Linear Stock Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2899",
    "title": "Last Visited Integers",
    "titleSlug": "last-visited-integers",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Last Visited Integers",
    "example_output": "# Expected output for Last Visited Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Last Visited Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2900",
    "title": "Longest Unequal Adjacent Groups Subsequence I",
    "titleSlug": "longest-unequal-adjacent-groups-subsequence-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Unequal Adjacent Groups Subsequence I",
    "example_output": "# Expected output for Longest Unequal Adjacent Groups Subsequence I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Unequal Adjacent Groups Subsequence I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2901",
    "title": "Longest Unequal Adjacent Groups Subsequence II",
    "titleSlug": "longest-unequal-adjacent-groups-subsequence-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Longest Unequal Adjacent Groups Subsequence II",
    "example_output": "# Expected output for Longest Unequal Adjacent Groups Subsequence II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Longest Unequal Adjacent Groups Subsequence II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2902",
    "title": "Count of Sub-Multisets With Bounded Sum",
    "titleSlug": "count-of-sub-multisets-with-bounded-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count of Sub-Multisets With Bounded Sum",
    "example_output": "# Expected output for Count of Sub-Multisets With Bounded Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count of Sub-Multisets With Bounded Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2903",
    "title": "Find Indices With Index and Value Difference I",
    "titleSlug": "find-indices-with-index-and-value-difference-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Indices With Index and Value Difference I",
    "example_output": "# Expected output for Find Indices With Index and Value Difference I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Indices With Index and Value Difference I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2904",
    "title": "Shortest and Lexicographically Smallest Beautiful String",
    "titleSlug": "shortest-and-lexicographically-smallest-beautiful-string",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Shortest and Lexicographically Smallest Beautiful String",
    "example_output": "# Expected output for Shortest and Lexicographically Smallest Beautiful String",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Shortest and Lexicographically Smallest Beautiful String\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2905",
    "title": "Find Indices With Index and Value Difference II",
    "titleSlug": "find-indices-with-index-and-value-difference-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Indices With Index and Value Difference II",
    "example_output": "# Expected output for Find Indices With Index and Value Difference II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Indices With Index and Value Difference II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2906",
    "title": "Construct Product Matrix",
    "titleSlug": "construct-product-matrix",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Construct Product Matrix",
    "example_output": "# Expected output for Construct Product Matrix",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Construct Product Matrix\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2907",
    "title": "Maximum Profitable Triplets With Increasing Prices I",
    "titleSlug": "maximum-profitable-triplets-with-increasing-prices-i",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Profitable Triplets With Increasing Prices I",
    "example_output": "# Expected output for Maximum Profitable Triplets With Increasing Prices I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Profitable Triplets With Increasing Prices I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2908",
    "title": "Minimum Sum of Mountain Triplets I",
    "titleSlug": "minimum-sum-of-mountain-triplets-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Sum of Mountain Triplets I",
    "example_output": "# Expected output for Minimum Sum of Mountain Triplets I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Sum of Mountain Triplets I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2909",
    "title": "Minimum Sum of Mountain Triplets II",
    "titleSlug": "minimum-sum-of-mountain-triplets-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Sum of Mountain Triplets II",
    "example_output": "# Expected output for Minimum Sum of Mountain Triplets II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Sum of Mountain Triplets II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2910",
    "title": "Minimum Number of Groups to Create a Valid Assignment",
    "titleSlug": "minimum-number-of-groups-to-create-a-valid-assignment",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Groups to Create a Valid Assignment",
    "example_output": "# Expected output for Minimum Number of Groups to Create a Valid Assignment",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Groups to Create a Valid Assignment\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2911",
    "title": "Minimum Changes to Make K Semi-palindromes",
    "titleSlug": "minimum-changes-to-make-k-semi-palindromes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Changes to Make K Semi-palindromes",
    "example_output": "# Expected output for Minimum Changes to Make K Semi-palindromes",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Minimum Changes to Make K Semi-palindromes\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2912",
    "title": "Number of Ways to Reach Destination in the Grid",
    "titleSlug": "number-of-ways-to-reach-destination-in-the-grid",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Ways to Reach Destination in the Grid",
    "example_output": "# Expected output for Number of Ways to Reach Destination in the Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Ways to Reach Destination in the Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2913",
    "title": "Subarrays Distinct Element Sum of Squares I",
    "titleSlug": "subarrays-distinct-element-sum-of-squares-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subarrays Distinct Element Sum of Squares I",
    "example_output": "# Expected output for Subarrays Distinct Element Sum of Squares I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subarrays Distinct Element Sum of Squares I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2914",
    "title": "Minimum Number of Changes to Make Binary String Beautiful",
    "titleSlug": "minimum-number-of-changes-to-make-binary-string-beautiful",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Changes to Make Binary String Beautiful",
    "example_output": "# Expected output for Minimum Number of Changes to Make Binary String Beautiful",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Changes to Make Binary String Beautiful\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2915",
    "title": "Length of the Longest Subsequence That Sums to Target",
    "titleSlug": "length-of-the-longest-subsequence-that-sums-to-target",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Length of the Longest Subsequence That Sums to Target",
    "example_output": "# Expected output for Length of the Longest Subsequence That Sums to Target",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Length of the Longest Subsequence That Sums to Target\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2916",
    "title": "Subarrays Distinct Element Sum of Squares II",
    "titleSlug": "subarrays-distinct-element-sum-of-squares-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Subarrays Distinct Element Sum of Squares II",
    "example_output": "# Expected output for Subarrays Distinct Element Sum of Squares II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Subarrays Distinct Element Sum of Squares II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2917",
    "title": "Find the K-or of an Array",
    "titleSlug": "find-the-k-or-of-an-array",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the K-or of an Array",
    "example_output": "# Expected output for Find the K-or of an Array",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the K-or of an Array\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2918",
    "title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
    "titleSlug": "minimum-equal-sum-of-two-arrays-after-replacing-zeros",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Equal Sum of Two Arrays After Replacing Zeros",
    "example_output": "# Expected output for Minimum Equal Sum of Two Arrays After Replacing Zeros",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Equal Sum of Two Arrays After Replacing Zeros\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2919",
    "title": "Minimum Increment Operations to Make Array Beautiful",
    "titleSlug": "minimum-increment-operations-to-make-array-beautiful",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Increment Operations to Make Array Beautiful",
    "example_output": "# Expected output for Minimum Increment Operations to Make Array Beautiful",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Increment Operations to Make Array Beautiful\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2920",
    "title": "Maximum Points After Collecting Coins From All Nodes",
    "titleSlug": "maximum-points-after-collecting-coins-from-all-nodes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Points After Collecting Coins From All Nodes",
    "example_output": "# Expected output for Maximum Points After Collecting Coins From All Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Points After Collecting Coins From All Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2921",
    "title": "Maximum Profitable Triplets With Increasing Prices II",
    "titleSlug": "maximum-profitable-triplets-with-increasing-prices-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Profitable Triplets With Increasing Prices II",
    "example_output": "# Expected output for Maximum Profitable Triplets With Increasing Prices II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Profitable Triplets With Increasing Prices II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2922",
    "title": "Market Analysis III",
    "titleSlug": "market-analysis-iii",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Market Analysis III",
    "example_output": "# Expected output for Market Analysis III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Market Analysis III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2923",
    "title": "Find Champion I",
    "titleSlug": "find-champion-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Champion I",
    "example_output": "# Expected output for Find Champion I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Champion I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2924",
    "title": "Find Champion II",
    "titleSlug": "find-champion-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Graph"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Champion II",
    "example_output": "# Expected output for Find Champion II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Champion II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2925",
    "title": "Maximum Score After Applying Operations on a Tree",
    "titleSlug": "maximum-score-after-applying-operations-on-a-tree",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Score After Applying Operations on a Tree",
    "example_output": "# Expected output for Maximum Score After Applying Operations on a Tree",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Score After Applying Operations on a Tree\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2926",
    "title": "Maximum Balanced Subsequence Sum",
    "titleSlug": "maximum-balanced-subsequence-sum",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Balanced Subsequence Sum",
    "example_output": "# Expected output for Maximum Balanced Subsequence Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Balanced Subsequence Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2927",
    "title": "Distribute Candies Among Children III",
    "titleSlug": "distribute-candies-among-children-iii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distribute Candies Among Children III",
    "example_output": "# Expected output for Distribute Candies Among Children III",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distribute Candies Among Children III\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2928",
    "title": "Distribute Candies Among Children I",
    "titleSlug": "distribute-candies-among-children-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distribute Candies Among Children I",
    "example_output": "# Expected output for Distribute Candies Among Children I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distribute Candies Among Children I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2929",
    "title": "Distribute Candies Among Children II",
    "titleSlug": "distribute-candies-among-children-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Combinatorics"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Distribute Candies Among Children II",
    "example_output": "# Expected output for Distribute Candies Among Children II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Distribute Candies Among Children II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2930",
    "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
    "titleSlug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Strings Which Can Be Rearranged to Contain Substring",
    "example_output": "# Expected output for Number of Strings Which Can Be Rearranged to Contain Substring",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Strings Which Can Be Rearranged to Contain Substring\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2931",
    "title": "Maximum Spending After Buying Items",
    "titleSlug": "maximum-spending-after-buying-items",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Spending After Buying Items",
    "example_output": "# Expected output for Maximum Spending After Buying Items",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Spending After Buying Items\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2932",
    "title": "Maximum Strong Pair XOR I",
    "titleSlug": "maximum-strong-pair-xor-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Strong Pair XOR I",
    "example_output": "# Expected output for Maximum Strong Pair XOR I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Strong Pair XOR I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2933",
    "title": "High-Access Employees",
    "titleSlug": "high-access-employees",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for High-Access Employees",
    "example_output": "# Expected output for High-Access Employees",
    "status": "TO_DO",
    "description": "Solve the problem titled \"High-Access Employees\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2934",
    "title": "Minimum Operations to Maximize Last Elements in Arrays",
    "titleSlug": "minimum-operations-to-maximize-last-elements-in-arrays",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Operations to Maximize Last Elements in Arrays",
    "example_output": "# Expected output for Minimum Operations to Maximize Last Elements in Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Operations to Maximize Last Elements in Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2935",
    "title": "Maximum Strong Pair XOR II",
    "titleSlug": "maximum-strong-pair-xor-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Strong Pair XOR II",
    "example_output": "# Expected output for Maximum Strong Pair XOR II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Strong Pair XOR II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2936",
    "title": "Number of Equal Numbers Blocks",
    "titleSlug": "number-of-equal-numbers-blocks",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Interactive"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Equal Numbers Blocks",
    "example_output": "# Expected output for Number of Equal Numbers Blocks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Equal Numbers Blocks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2937",
    "title": "Make Three Strings Equal",
    "titleSlug": "make-three-strings-equal",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Three Strings Equal",
    "example_output": "# Expected output for Make Three Strings Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Three Strings Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2938",
    "title": "Separate Black and White Balls",
    "titleSlug": "separate-black-and-white-balls",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers"
      },
      {
        "name": "String"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Separate Black and White Balls",
    "example_output": "# Expected output for Separate Black and White Balls",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Separate Black and White Balls\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2939",
    "title": "Maximum Xor Product",
    "titleSlug": "maximum-xor-product",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Xor Product",
    "example_output": "# Expected output for Maximum Xor Product",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Xor Product\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2940",
    "title": "Find Building Where Alice and Bob Can Meet",
    "titleSlug": "find-building-where-alice-and-bob-can-meet",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Binary Indexed Tree"
      },
      {
        "name": "Segment Tree"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Stack"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Building Where Alice and Bob Can Meet",
    "example_output": "# Expected output for Find Building Where Alice and Bob Can Meet",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Building Where Alice and Bob Can Meet\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2941",
    "title": "Maximum GCD-Sum of a Subarray",
    "titleSlug": "maximum-gcd-sum-of-a-subarray",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum GCD-Sum of a Subarray",
    "example_output": "# Expected output for Maximum GCD-Sum of a Subarray",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum GCD-Sum of a Subarray\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2942",
    "title": "Find Words Containing Character",
    "titleSlug": "find-words-containing-character",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Words Containing Character",
    "example_output": "# Expected output for Find Words Containing Character",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Words Containing Character\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2943",
    "title": "Maximize Area of Square Hole in Grid",
    "titleSlug": "maximize-area-of-square-hole-in-grid",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximize Area of Square Hole in Grid",
    "example_output": "# Expected output for Maximize Area of Square Hole in Grid",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximize Area of Square Hole in Grid\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2944",
    "title": "Minimum Number of Coins for Fruits",
    "titleSlug": "minimum-number-of-coins-for-fruits",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Coins for Fruits",
    "example_output": "# Expected output for Minimum Number of Coins for Fruits",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Coins for Fruits\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2945",
    "title": "Find Maximum Non-decreasing Array Length",
    "titleSlug": "find-maximum-non-decreasing-array-length",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Stack"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Monotonic Stack"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Maximum Non-decreasing Array Length",
    "example_output": "# Expected output for Find Maximum Non-decreasing Array Length",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Maximum Non-decreasing Array Length\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2946",
    "title": "Matrix Similarity After Cyclic Shifts",
    "titleSlug": "matrix-similarity-after-cyclic-shifts",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Matrix"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Matrix Similarity After Cyclic Shifts",
    "example_output": "# Expected output for Matrix Similarity After Cyclic Shifts",
    "status": "TO_DO",
    "description": "Given a matrix, implement an algorithm to solve the problem titled \"Matrix Similarity After Cyclic Shifts\". The problem involves analyzing or transforming the structure of the matrix. Provide a clear and efficient solution."
  },
  {
    "id": "2947",
    "title": "Count Beautiful Substrings I",
    "titleSlug": "count-beautiful-substrings-i",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Number Theory"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Beautiful Substrings I",
    "example_output": "# Expected output for Count Beautiful Substrings I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Beautiful Substrings I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2948",
    "title": "Make Lexicographically Smallest Array by Swapping Elements",
    "titleSlug": "make-lexicographically-smallest-array-by-swapping-elements",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Union Find"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Make Lexicographically Smallest Array by Swapping Elements",
    "example_output": "# Expected output for Make Lexicographically Smallest Array by Swapping Elements",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Make Lexicographically Smallest Array by Swapping Elements\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2949",
    "title": "Count Beautiful Substrings II",
    "titleSlug": "count-beautiful-substrings-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Number Theory"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Beautiful Substrings II",
    "example_output": "# Expected output for Count Beautiful Substrings II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Beautiful Substrings II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2950",
    "title": "Number of Divisible Substrings",
    "titleSlug": "number-of-divisible-substrings",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Divisible Substrings",
    "example_output": "# Expected output for Number of Divisible Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Divisible Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2951",
    "title": "Find the Peaks",
    "titleSlug": "find-the-peaks",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find the Peaks",
    "example_output": "# Expected output for Find the Peaks",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find the Peaks\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2952",
    "title": "Minimum Number of Coins to be Added",
    "titleSlug": "minimum-number-of-coins-to-be-added",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Coins to be Added",
    "example_output": "# Expected output for Minimum Number of Coins to be Added",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Coins to be Added\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2953",
    "title": "Count Complete Substrings",
    "titleSlug": "count-complete-substrings",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Complete Substrings",
    "example_output": "# Expected output for Count Complete Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Complete Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2954",
    "title": "Count the Number of Infection Sequences",
    "titleSlug": "count-the-number-of-infection-sequences",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Infection Sequences",
    "example_output": "# Expected output for Count the Number of Infection Sequences",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Infection Sequences\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2955",
    "title": "Number of Same-End Substrings",
    "titleSlug": "number-of-same-end-substrings",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Counting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Same-End Substrings",
    "example_output": "# Expected output for Number of Same-End Substrings",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Same-End Substrings\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2956",
    "title": "Find Common Elements Between Two Arrays",
    "titleSlug": "find-common-elements-between-two-arrays",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Common Elements Between Two Arrays",
    "example_output": "# Expected output for Find Common Elements Between Two Arrays",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Common Elements Between Two Arrays\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2957",
    "title": "Remove Adjacent Almost-Equal Characters",
    "titleSlug": "remove-adjacent-almost-equal-characters",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Greedy"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Remove Adjacent Almost-Equal Characters",
    "example_output": "# Expected output for Remove Adjacent Almost-Equal Characters",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Remove Adjacent Almost-Equal Characters\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2958",
    "title": "Length of Longest Subarray With at Most K Frequency",
    "titleSlug": "length-of-longest-subarray-with-at-most-k-frequency",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Length of Longest Subarray With at Most K Frequency",
    "example_output": "# Expected output for Length of Longest Subarray With at Most K Frequency",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Length of Longest Subarray With at Most K Frequency\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2959",
    "title": "Number of Possible Sets of Closing Branches",
    "titleSlug": "number-of-possible-sets-of-closing-branches",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Enumeration"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Possible Sets of Closing Branches",
    "example_output": "# Expected output for Number of Possible Sets of Closing Branches",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Possible Sets of Closing Branches\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2960",
    "title": "Count Tested Devices After Test Operations",
    "titleSlug": "count-tested-devices-after-test-operations",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Simulation"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Tested Devices After Test Operations",
    "example_output": "# Expected output for Count Tested Devices After Test Operations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Tested Devices After Test Operations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2961",
    "title": "Double Modular Exponentiation",
    "titleSlug": "double-modular-exponentiation",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Double Modular Exponentiation",
    "example_output": "# Expected output for Double Modular Exponentiation",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Double Modular Exponentiation\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2962",
    "title": "Count Subarrays Where Max Element Appears at Least K Times",
    "titleSlug": "count-subarrays-where-max-element-appears-at-least-k-times",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sliding Window"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count Subarrays Where Max Element Appears at Least K Times",
    "example_output": "# Expected output for Count Subarrays Where Max Element Appears at Least K Times",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count Subarrays Where Max Element Appears at Least K Times\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2963",
    "title": "Count the Number of Good Partitions",
    "titleSlug": "count-the-number-of-good-partitions",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Combinatorics"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Good Partitions",
    "example_output": "# Expected output for Count the Number of Good Partitions",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Good Partitions\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2964",
    "title": "Number of Divisible Triplet Sums",
    "titleSlug": "number-of-divisible-triplet-sums",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Divisible Triplet Sums",
    "example_output": "# Expected output for Number of Divisible Triplet Sums",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Divisible Triplet Sums\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2965",
    "title": "Find Missing and Repeated Values",
    "titleSlug": "find-missing-and-repeated-values",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Math"
      },
      {
        "name": "Matrix"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Missing and Repeated Values",
    "example_output": "# Expected output for Find Missing and Repeated Values",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Missing and Repeated Values\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2966",
    "title": "Divide Array Into Arrays With Max Difference",
    "titleSlug": "divide-array-into-arrays-with-max-difference",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Divide Array Into Arrays With Max Difference",
    "example_output": "# Expected output for Divide Array Into Arrays With Max Difference",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Divide Array Into Arrays With Max Difference\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2967",
    "title": "Minimum Cost to Make Array Equalindromic",
    "titleSlug": "minimum-cost-to-make-array-equalindromic",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Math"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Make Array Equalindromic",
    "example_output": "# Expected output for Minimum Cost to Make Array Equalindromic",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Make Array Equalindromic\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2968",
    "title": "Apply Operations to Maximize Frequency Score",
    "titleSlug": "apply-operations-to-maximize-frequency-score",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Apply Operations to Maximize Frequency Score",
    "example_output": "# Expected output for Apply Operations to Maximize Frequency Score",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Apply Operations to Maximize Frequency Score\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2969",
    "title": "Minimum Number of Coins for Fruits II",
    "titleSlug": "minimum-number-of-coins-for-fruits-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Queue"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Monotonic Queue"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Coins for Fruits II",
    "example_output": "# Expected output for Minimum Number of Coins for Fruits II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Coins for Fruits II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2970",
    "title": "Count the Number of Incremovable Subarrays I",
    "titleSlug": "count-the-number-of-incremovable-subarrays-i",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Incremovable Subarrays I",
    "example_output": "# Expected output for Count the Number of Incremovable Subarrays I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Incremovable Subarrays I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2971",
    "title": "Find Polygon With the Largest Perimeter",
    "titleSlug": "find-polygon-with-the-largest-perimeter",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Greedy"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Polygon With the Largest Perimeter",
    "example_output": "# Expected output for Find Polygon With the Largest Perimeter",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Polygon With the Largest Perimeter\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2972",
    "title": "Count the Number of Incremovable Subarrays II",
    "titleSlug": "count-the-number-of-incremovable-subarrays-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Two Pointers"
      },
      {
        "name": "Binary Search"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Incremovable Subarrays II",
    "example_output": "# Expected output for Count the Number of Incremovable Subarrays II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Incremovable Subarrays II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2973",
    "title": "Find Number of Coins to Place in Tree Nodes",
    "titleSlug": "find-number-of-coins-to-place-in-tree-nodes",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Tree"
      },
      {
        "name": "Depth-First Search"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Number of Coins to Place in Tree Nodes",
    "example_output": "# Expected output for Find Number of Coins to Place in Tree Nodes",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Number of Coins to Place in Tree Nodes\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2974",
    "title": "Minimum Number Game",
    "titleSlug": "minimum-number-game",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Sorting"
      },
      {
        "name": "Heap (Priority Queue)"
      },
      {
        "name": "Simulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number Game",
    "example_output": "# Expected output for Minimum Number Game",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number Game\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2975",
    "title": "Maximum Square Area by Removing Fences From a Field",
    "titleSlug": "maximum-square-area-by-removing-fences-from-a-field",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Enumeration"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Square Area by Removing Fences From a Field",
    "example_output": "# Expected output for Maximum Square Area by Removing Fences From a Field",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Square Area by Removing Fences From a Field\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2976",
    "title": "Minimum Cost to Convert String I",
    "titleSlug": "minimum-cost-to-convert-string-i",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Convert String I",
    "example_output": "# Expected output for Minimum Cost to Convert String I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Convert String I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2977",
    "title": "Minimum Cost to Convert String II",
    "titleSlug": "minimum-cost-to-convert-string-ii",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Graph"
      },
      {
        "name": "Trie"
      },
      {
        "name": "Shortest Path"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Cost to Convert String II",
    "example_output": "# Expected output for Minimum Cost to Convert String II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Cost to Convert String II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2978",
    "title": "Symmetric Coordinates",
    "titleSlug": "symmetric-coordinates",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Symmetric Coordinates",
    "example_output": "# Expected output for Symmetric Coordinates",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Symmetric Coordinates\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2979",
    "title": "Most Expensive Item That Can Not Be Bought",
    "titleSlug": "most-expensive-item-that-can-not-be-bought",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Number Theory"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Most Expensive Item That Can Not Be Bought",
    "example_output": "# Expected output for Most Expensive Item That Can Not Be Bought",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Most Expensive Item That Can Not Be Bought\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2980",
    "title": "Check if Bitwise OR Has Trailing Zeros",
    "titleSlug": "check-if-bitwise-or-has-trailing-zeros",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Check if Bitwise OR Has Trailing Zeros",
    "example_output": "# Expected output for Check if Bitwise OR Has Trailing Zeros",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Check if Bitwise OR Has Trailing Zeros\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2981",
    "title": "Find Longest Special Substring That Occurs Thrice I",
    "titleSlug": "find-longest-special-substring-that-occurs-thrice-i",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Longest Special Substring That Occurs Thrice I",
    "example_output": "# Expected output for Find Longest Special Substring That Occurs Thrice I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Longest Special Substring That Occurs Thrice I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2982",
    "title": "Find Longest Special Substring That Occurs Thrice II",
    "titleSlug": "find-longest-special-substring-that-occurs-thrice-ii",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Binary Search"
      },
      {
        "name": "Sliding Window"
      },
      {
        "name": "Counting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Longest Special Substring That Occurs Thrice II",
    "example_output": "# Expected output for Find Longest Special Substring That Occurs Thrice II",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Longest Special Substring That Occurs Thrice II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2983",
    "title": "Palindrome Rearrangement Queries",
    "titleSlug": "palindrome-rearrangement-queries",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Hash Table"
      },
      {
        "name": "String"
      },
      {
        "name": "Prefix Sum"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Palindrome Rearrangement Queries",
    "example_output": "# Expected output for Palindrome Rearrangement Queries",
    "status": "TO_DO",
    "description": "Given a string or array, determine how to compute or maximize a palindrome under the logic defined by the problem titled \"Palindrome Rearrangement Queries\". Return the result based on the transformation rules involved."
  },
  {
    "id": "2984",
    "title": "Find Peak Calling Hours for Each City",
    "titleSlug": "find-peak-calling-hours-for-each-city",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Peak Calling Hours for Each City",
    "example_output": "# Expected output for Find Peak Calling Hours for Each City",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Peak Calling Hours for Each City\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2985",
    "title": "Calculate Compressed Mean",
    "titleSlug": "calculate-compressed-mean",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Calculate Compressed Mean",
    "example_output": "# Expected output for Calculate Compressed Mean",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Calculate Compressed Mean\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2986",
    "title": "Find Third Transaction",
    "titleSlug": "find-third-transaction",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Third Transaction",
    "example_output": "# Expected output for Find Third Transaction",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Third Transaction\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2987",
    "title": "Find Expensive Cities",
    "titleSlug": "find-expensive-cities",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Find Expensive Cities",
    "example_output": "# Expected output for Find Expensive Cities",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Find Expensive Cities\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2988",
    "title": "Manager of the Largest Department",
    "titleSlug": "manager-of-the-largest-department",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Manager of the Largest Department",
    "example_output": "# Expected output for Manager of the Largest Department",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Manager of the Largest Department\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2989",
    "title": "Class Performance",
    "titleSlug": "class-performance",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Class Performance",
    "example_output": "# Expected output for Class Performance",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Class Performance\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2990",
    "title": "Loan Types",
    "titleSlug": "loan-types",
    "paidOnly": true,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Loan Types",
    "example_output": "# Expected output for Loan Types",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Loan Types\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2991",
    "title": "Top Three Wineries ",
    "titleSlug": "top-three-wineries",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Top Three Wineries ",
    "example_output": "# Expected output for Top Three Wineries ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Top Three Wineries\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2992",
    "title": "Number of Self-Divisible Permutations",
    "titleSlug": "number-of-self-divisible-permutations",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Backtracking"
      },
      {
        "name": "Bit Manipulation"
      },
      {
        "name": "Bitmask"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Number of Self-Divisible Permutations",
    "example_output": "# Expected output for Number of Self-Divisible Permutations",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Number of Self-Divisible Permutations\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2993",
    "title": "Friday Purchases I",
    "titleSlug": "friday-purchases-i",
    "paidOnly": true,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Friday Purchases I",
    "example_output": "# Expected output for Friday Purchases I",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Friday Purchases I\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2994",
    "title": "Friday Purchases II ",
    "titleSlug": "friday-purchases-ii",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Friday Purchases II ",
    "example_output": "# Expected output for Friday Purchases II ",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Friday Purchases II\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2995",
    "title": "Viewers Turned Streamers",
    "titleSlug": "viewers-turned-streamers",
    "paidOnly": true,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Viewers Turned Streamers",
    "example_output": "# Expected output for Viewers Turned Streamers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Viewers Turned Streamers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2996",
    "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum",
    "titleSlug": "smallest-missing-integer-greater-than-sequential-prefix-sum",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Hash Table"
      },
      {
        "name": "Sorting"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Smallest Missing Integer Greater Than Sequential Prefix Sum",
    "example_output": "# Expected output for Smallest Missing Integer Greater Than Sequential Prefix Sum",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Smallest Missing Integer Greater Than Sequential Prefix Sum\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2997",
    "title": "Minimum Number of Operations to Make Array XOR Equal to K",
    "titleSlug": "minimum-number-of-operations-to-make-array-xor-equal-to-k",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array"
      },
      {
        "name": "Bit Manipulation"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Make Array XOR Equal to K",
    "example_output": "# Expected output for Minimum Number of Operations to Make Array XOR Equal to K",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Make Array XOR Equal to K\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2998",
    "title": "Minimum Number of Operations to Make X and Y Equal",
    "titleSlug": "minimum-number-of-operations-to-make-x-and-y-equal",
    "paidOnly": false,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Dynamic Programming"
      },
      {
        "name": "Breadth-First Search"
      },
      {
        "name": "Memoization"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Minimum Number of Operations to Make X and Y Equal",
    "example_output": "# Expected output for Minimum Number of Operations to Make X and Y Equal",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Minimum Number of Operations to Make X and Y Equal\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "2999",
    "title": "Count the Number of Powerful Integers",
    "titleSlug": "count-the-number-of-powerful-integers",
    "paidOnly": false,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math"
      },
      {
        "name": "String"
      },
      {
        "name": "Dynamic Programming"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Count the Number of Powerful Integers",
    "example_output": "# Expected output for Count the Number of Powerful Integers",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Count the Number of Powerful Integers\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  },
  {
    "id": "3000",
    "title": "Maximum Area of Longest Diagonal Rectangle",
    "titleSlug": "maximum-area-of-longest-diagonal-rectangle",
    "paidOnly": false,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array"
      }
    ],
    "function_signature": "function solve(input: any): any",
    "example_input": "# Example input for Maximum Area of Longest Diagonal Rectangle",
    "example_output": "# Expected output for Maximum Area of Longest Diagonal Rectangle",
    "status": "TO_DO",
    "description": "Solve the problem titled \"Maximum Area of Longest Diagonal Rectangle\". Provide a full implementation that addresses the unique constraints and requirements defined in that problem."
  }
]